(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("myfiwidget", [], factory);
	else if(typeof exports === 'object')
		exports["myfiwidget"] = factory();
	else
		root["myfiwidget"] = factory();
})((typeof self !== 'undefined' ? self : this), () => {
return /******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/libphonenumber-js/es6/AsYouType.js":
/*!*********************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/AsYouType.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AsYouType)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _PhoneNumber_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./PhoneNumber.js */ "./node_modules/libphonenumber-js/es6/PhoneNumber.js");
/* harmony import */ var _AsYouTypeState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsYouTypeState.js */ "./node_modules/libphonenumber-js/es6/AsYouTypeState.js");
/* harmony import */ var _AsYouTypeFormatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AsYouTypeFormatter.js */ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js");
/* harmony import */ var _AsYouTypeFormatter_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AsYouTypeFormatter.js */ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js");
/* harmony import */ var _AsYouTypeParser_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AsYouTypeParser.js */ "./node_modules/libphonenumber-js/es6/AsYouTypeParser.js");
/* harmony import */ var _helpers_getCountryByCallingCode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/getCountryByCallingCode.js */ "./node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }







var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;

var AsYouType = /*#__PURE__*/function () {
  /**
   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.
   * @param {Object} metadata
   */
  function AsYouType(optionsOrDefaultCountry, metadata) {
    _classCallCheck(this, AsYouType);

    this.metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);

    var _this$getCountryAndCa = this.getCountryAndCallingCode(optionsOrDefaultCountry),
        _this$getCountryAndCa2 = _slicedToArray(_this$getCountryAndCa, 2),
        defaultCountry = _this$getCountryAndCa2[0],
        defaultCallingCode = _this$getCountryAndCa2[1];

    this.defaultCountry = defaultCountry;
    this.defaultCallingCode = defaultCallingCode;
    this.reset();
  }

  _createClass(AsYouType, [{
    key: "getCountryAndCallingCode",
    value: function getCountryAndCallingCode(optionsOrDefaultCountry) {
      // Set `defaultCountry` and `defaultCallingCode` options.
      var defaultCountry;
      var defaultCallingCode; // Turns out `null` also has type "object". Weird.

      if (optionsOrDefaultCountry) {
        if (_typeof(optionsOrDefaultCountry) === 'object') {
          defaultCountry = optionsOrDefaultCountry.defaultCountry;
          defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;
        } else {
          defaultCountry = optionsOrDefaultCountry;
        }
      }

      if (defaultCountry && !this.metadata.hasCountry(defaultCountry)) {
        defaultCountry = undefined;
      }

      if (defaultCallingCode) {
        /* istanbul ignore if */
        if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
          if (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {
            defaultCountry = '001';
          }
        }
      }

      return [defaultCountry, defaultCallingCode];
    }
    /**
     * Inputs "next" phone number characters.
     * @param  {string} text
     * @return {string} Formatted phone number characters that have been input so far.
     */

  }, {
    key: "input",
    value: function input(text) {
      var _this$parser$input = this.parser.input(text, this.state),
          digits = _this$parser$input.digits,
          justLeadingPlus = _this$parser$input.justLeadingPlus;

      if (justLeadingPlus) {
        this.formattedOutput = '+';
      } else if (digits) {
        this.determineTheCountryIfNeeded(); // Match the available formats by the currently available leading digits.

        if (this.state.nationalSignificantNumber) {
          this.formatter.narrowDownMatchingFormats(this.state);
        }

        var formattedNationalNumber;

        if (this.metadata.hasSelectedNumberingPlan()) {
          formattedNationalNumber = this.formatter.format(digits, this.state);
        }

        if (formattedNationalNumber === undefined) {
          // See if another national (significant) number could be re-extracted.
          if (this.parser.reExtractNationalSignificantNumber(this.state)) {
            this.determineTheCountryIfNeeded(); // If it could, then re-try formatting the new national (significant) number.

            var nationalDigits = this.state.getNationalDigits();

            if (nationalDigits) {
              formattedNationalNumber = this.formatter.format(nationalDigits, this.state);
            }
          }
        }

        this.formattedOutput = formattedNationalNumber ? this.getFullNumber(formattedNationalNumber) : this.getNonFormattedNumber();
      }

      return this.formattedOutput;
    }
  }, {
    key: "reset",
    value: function reset() {
      var _this = this;

      this.state = new _AsYouTypeState_js__WEBPACK_IMPORTED_MODULE_1__["default"]({
        onCountryChange: function onCountryChange(country) {
          // Before version `1.6.0`, the official `AsYouType` formatter API
          // included the `.country` property of an `AsYouType` instance.
          // Since that property (along with the others) have been moved to
          // `this.state`, `this.country` property is emulated for compatibility
          // with the old versions.
          _this.country = country;
        },
        onCallingCodeChange: function onCallingCodeChange(callingCode, country) {
          _this.metadata.selectNumberingPlan(country, callingCode);

          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);

          _this.parser.reset(_this.metadata.numberingPlan);
        }
      });
      this.formatter = new _AsYouTypeFormatter_js__WEBPACK_IMPORTED_MODULE_2__["default"]({
        state: this.state,
        metadata: this.metadata
      });
      this.parser = new _AsYouTypeParser_js__WEBPACK_IMPORTED_MODULE_3__["default"]({
        defaultCountry: this.defaultCountry,
        defaultCallingCode: this.defaultCallingCode,
        metadata: this.metadata,
        state: this.state,
        onNationalSignificantNumberChange: function onNationalSignificantNumberChange() {
          _this.determineTheCountryIfNeeded();

          _this.formatter.reset(_this.metadata.numberingPlan, _this.state);
        }
      });
      this.state.reset({
        country: this.defaultCountry,
        callingCode: this.defaultCallingCode
      });
      this.formattedOutput = '';
      return this;
    }
    /**
     * Returns `true` if the phone number is being input in international format.
     * In other words, returns `true` if and only if the parsed phone number starts with a `"+"`.
     * @return {boolean}
     */

  }, {
    key: "isInternational",
    value: function isInternational() {
      return this.state.international;
    }
    /**
     * Returns the "calling code" part of the phone number when it's being input
     * in an international format.
     * If no valid calling code has been entered so far, returns `undefined`.
     * @return {string} [callingCode]
     */

  }, {
    key: "getCallingCode",
    value: function getCallingCode() {
      // If the number is being input in national format and some "default calling code"
      // has been passed to `AsYouType` constructor, then `this.state.callingCode`
      // is equal to that "default calling code".
      //
      // If the number is being input in national format and no "default calling code"
      // has been passed to `AsYouType` constructor, then returns `undefined`,
      // even if a "default country" has been passed to `AsYouType` constructor.
      //
      if (this.isInternational()) {
        return this.state.callingCode;
      }
    } // A legacy alias.

  }, {
    key: "getCountryCallingCode",
    value: function getCountryCallingCode() {
      return this.getCallingCode();
    }
    /**
     * Returns a two-letter country code of the phone number.
     * Returns `undefined` for "non-geographic" phone numbering plans.
     * Returns `undefined` if no phone number has been input yet.
     * @return {string} [country]
     */

  }, {
    key: "getCountry",
    value: function getCountry() {
      var digits = this.state.digits; // Return `undefined` if no digits have been input yet.

      if (digits) {
        return this._getCountry();
      }
    }
    /**
     * Returns a two-letter country code of the phone number.
     * Returns `undefined` for "non-geographic" phone numbering plans.
     * @return {string} [country]
     */

  }, {
    key: "_getCountry",
    value: function _getCountry() {
      var country = this.state.country;
      /* istanbul ignore if */

      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
        // `AsYouType.getCountry()` returns `undefined`
        // for "non-geographic" phone numbering plans.
        if (country === '001') {
          return;
        }
      }

      return country;
    }
  }, {
    key: "determineTheCountryIfNeeded",
    value: function determineTheCountryIfNeeded() {
      // Suppose a user enters a phone number in international format,
      // and there're several countries corresponding to that country calling code,
      // and a country has been derived from the number, and then
      // a user enters one more digit and the number is no longer
      // valid for the derived country, so the country should be re-derived
      // on every new digit in those cases.
      //
      // If the phone number is being input in national format,
      // then it could be a case when `defaultCountry` wasn't specified
      // when creating `AsYouType` instance, and just `defaultCallingCode` was specified,
      // and that "calling code" could correspond to a "non-geographic entity",
      // or there could be several countries corresponding to that country calling code.
      // In those cases, `this.country` is `undefined` and should be derived
      // from the number. Again, if country calling code is ambiguous, then
      // `this.country` should be re-derived with each new digit.
      //
      if (!this.state.country || this.isCountryCallingCodeAmbiguous()) {
        this.determineTheCountry();
      }
    } // Prepends `+CountryCode ` in case of an international phone number

  }, {
    key: "getFullNumber",
    value: function getFullNumber(formattedNationalNumber) {
      var _this2 = this;

      if (this.isInternational()) {
        var prefix = function prefix(text) {
          return _this2.formatter.getInternationalPrefixBeforeCountryCallingCode(_this2.state, {
            spacing: text ? true : false
          }) + text;
        };

        var callingCode = this.state.callingCode;

        if (!callingCode) {
          return prefix("".concat(this.state.getDigitsWithoutInternationalPrefix()));
        }

        if (!formattedNationalNumber) {
          return prefix(callingCode);
        }

        return prefix("".concat(callingCode, " ").concat(formattedNationalNumber));
      }

      return formattedNationalNumber;
    }
  }, {
    key: "getNonFormattedNationalNumberWithPrefix",
    value: function getNonFormattedNationalNumberWithPrefix() {
      var _this$state = this.state,
          nationalSignificantNumber = _this$state.nationalSignificantNumber,
          complexPrefixBeforeNationalSignificantNumber = _this$state.complexPrefixBeforeNationalSignificantNumber,
          nationalPrefix = _this$state.nationalPrefix;
      var number = nationalSignificantNumber;
      var prefix = complexPrefixBeforeNationalSignificantNumber || nationalPrefix;

      if (prefix) {
        number = prefix + number;
      }

      return number;
    }
  }, {
    key: "getNonFormattedNumber",
    value: function getNonFormattedNumber() {
      var nationalSignificantNumberMatchesInput = this.state.nationalSignificantNumberMatchesInput;
      return this.getFullNumber(nationalSignificantNumberMatchesInput ? this.getNonFormattedNationalNumberWithPrefix() : this.state.getNationalDigits());
    }
  }, {
    key: "getNonFormattedTemplate",
    value: function getNonFormattedTemplate() {
      var number = this.getNonFormattedNumber();

      if (number) {
        return number.replace(/[\+\d]/g, _AsYouTypeFormatter_js__WEBPACK_IMPORTED_MODULE_4__.DIGIT_PLACEHOLDER);
      }
    }
  }, {
    key: "isCountryCallingCodeAmbiguous",
    value: function isCountryCallingCodeAmbiguous() {
      var callingCode = this.state.callingCode;
      var countryCodes = this.metadata.getCountryCodesForCallingCode(callingCode);
      return countryCodes && countryCodes.length > 1;
    } // Determines the country of the phone number
    // entered so far based on the country phone code
    // and the national phone number.

  }, {
    key: "determineTheCountry",
    value: function determineTheCountry() {
      this.state.setCountry((0,_helpers_getCountryByCallingCode_js__WEBPACK_IMPORTED_MODULE_5__["default"])(this.isInternational() ? this.state.callingCode : this.defaultCallingCode, this.state.nationalSignificantNumber, this.metadata));
    }
    /**
     * Returns a E.164 phone number value for the user's input.
     *
     * For example, for country `"US"` and input `"(222) 333-4444"`
     * it will return `"+12223334444"`.
     *
     * For international phone number input, it will also auto-correct
     * some minor errors such as using a national prefix when writing
     * an international phone number. For example, if the user inputs
     * `"+44 0 7400 000000"` then it will return an auto-corrected
     * `"+447400000000"` phone number value.
     *
     * Will return `undefined` if no digits have been input,
     * or when inputting a phone number in national format and no
     * default country or default "country calling code" have been set.
     *
     * @return {string} [value]
     */

  }, {
    key: "getNumberValue",
    value: function getNumberValue() {
      var _this$state2 = this.state,
          digits = _this$state2.digits,
          callingCode = _this$state2.callingCode,
          country = _this$state2.country,
          nationalSignificantNumber = _this$state2.nationalSignificantNumber; // Will return `undefined` if no digits have been input.

      if (!digits) {
        return;
      }

      if (this.isInternational()) {
        if (callingCode) {
          return '+' + callingCode + nationalSignificantNumber;
        } else {
          return '+' + digits;
        }
      } else {
        if (country || callingCode) {
          var callingCode_ = country ? this.metadata.countryCallingCode() : callingCode;
          return '+' + callingCode_ + nationalSignificantNumber;
        }
      }
    }
    /**
     * Returns an instance of `PhoneNumber` class.
     * Will return `undefined` if no national (significant) number
     * digits have been entered so far, or if no `defaultCountry` has been
     * set and the user enters a phone number not in international format.
     */

  }, {
    key: "getNumber",
    value: function getNumber() {
      var _this$state3 = this.state,
          nationalSignificantNumber = _this$state3.nationalSignificantNumber,
          carrierCode = _this$state3.carrierCode,
          callingCode = _this$state3.callingCode; // `this._getCountry()` is basically same as `this.state.country`
      // with the only change that it return `undefined` in case of a
      // "non-geographic" numbering plan instead of `"001"` "internal use" value.

      var country = this._getCountry();

      if (!nationalSignificantNumber) {
        return;
      }

      if (!country && !callingCode) {
        return;
      }

      var phoneNumber = new _PhoneNumber_js__WEBPACK_IMPORTED_MODULE_6__["default"](country || callingCode, nationalSignificantNumber, this.metadata.metadata);

      if (carrierCode) {
        phoneNumber.carrierCode = carrierCode;
      } // Phone number extensions are not supported by "As You Type" formatter.


      return phoneNumber;
    }
    /**
     * Returns `true` if the phone number is "possible".
     * Is just a shortcut for `PhoneNumber.isPossible()`.
     * @return {boolean}
     */

  }, {
    key: "isPossible",
    value: function isPossible() {
      var phoneNumber = this.getNumber();

      if (!phoneNumber) {
        return false;
      }

      return phoneNumber.isPossible();
    }
    /**
     * Returns `true` if the phone number is "valid".
     * Is just a shortcut for `PhoneNumber.isValid()`.
     * @return {boolean}
     */

  }, {
    key: "isValid",
    value: function isValid() {
      var phoneNumber = this.getNumber();

      if (!phoneNumber) {
        return false;
      }

      return phoneNumber.isValid();
    }
    /**
     * @deprecated
     * This method is used in `react-phone-number-input/source/input-control.js`
     * in versions before `3.0.16`.
     */

  }, {
    key: "getNationalNumber",
    value: function getNationalNumber() {
      return this.state.nationalSignificantNumber;
    }
    /**
     * Returns the phone number characters entered by the user.
     * @return {string}
     */

  }, {
    key: "getChars",
    value: function getChars() {
      return (this.state.international ? '+' : '') + this.state.digits;
    }
    /**
     * Returns the template for the formatted phone number.
     * @return {string}
     */

  }, {
    key: "getTemplate",
    value: function getTemplate() {
      return this.formatter.getTemplate(this.state) || this.getNonFormattedTemplate() || '';
    }
  }]);

  return AsYouType;
}();


//# sourceMappingURL=AsYouType.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PatternMatcher)
/* harmony export */ });
/* harmony import */ var _AsYouTypeFormatter_PatternParser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsYouTypeFormatter.PatternParser.js */ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternParser.js");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var PatternMatcher = /*#__PURE__*/function () {
  function PatternMatcher(pattern) {
    _classCallCheck(this, PatternMatcher);

    this.matchTree = new _AsYouTypeFormatter_PatternParser_js__WEBPACK_IMPORTED_MODULE_0__["default"]().parse(pattern);
  }

  _createClass(PatternMatcher, [{
    key: "match",
    value: function match(string) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          allowOverflow = _ref.allowOverflow;

      if (!string) {
        throw new Error('String is required');
      }

      var result = _match(string.split(''), this.matchTree, true);

      if (result && result.match) {
        delete result.matchedChars;
      }

      if (result && result.overflow) {
        if (!allowOverflow) {
          return;
        }
      }

      return result;
    }
  }]);

  return PatternMatcher;
}();
/**
 * Matches `characters` against a pattern compiled into a `tree`.
 * @param  {string[]} characters
 * @param  {Tree} tree — A pattern compiled into a `tree`. See the `*.d.ts` file for the description of the `tree` structure.
 * @param  {boolean} last — Whether it's the last (rightmost) subtree on its level of the match tree.
 * @return {object} See the `*.d.ts` file for the description of the result object.
 */




function _match(characters, tree, last) {
  // If `tree` is a string, then `tree` is a single character.
  // That's because when a pattern is parsed, multi-character-string parts
  // of a pattern are compiled into arrays of single characters.
  // I still wrote this piece of code for a "general" hypothetical case
  // when `tree` could be a string of several characters, even though
  // such case is not possible with the current implementation.
  if (typeof tree === 'string') {
    var characterString = characters.join('');

    if (tree.indexOf(characterString) === 0) {
      // `tree` is always a single character.
      // If `tree.indexOf(characterString) === 0`
      // then `characters.length === tree.length`.

      /* istanbul ignore else */
      if (characters.length === tree.length) {
        return {
          match: true,
          matchedChars: characters
        };
      } // `tree` is always a single character.
      // If `tree.indexOf(characterString) === 0`
      // then `characters.length === tree.length`.

      /* istanbul ignore next */


      return {
        partialMatch: true // matchedChars: characters

      };
    }

    if (characterString.indexOf(tree) === 0) {
      if (last) {
        // The `else` path is not possible because `tree` is always a single character.
        // The `else` case for `characters.length > tree.length` would be
        // `characters.length <= tree.length` which means `characters.length <= 1`.
        // `characters` array can't be empty, so that means `characters === [tree]`,
        // which would also mean `tree.indexOf(characterString) === 0` and that'd mean
        // that the `if (tree.indexOf(characterString) === 0)` condition before this
        // `if` condition would be entered, and returned from there, not reaching this code.

        /* istanbul ignore else */
        if (characters.length > tree.length) {
          return {
            overflow: true
          };
        }
      }

      return {
        match: true,
        matchedChars: characters.slice(0, tree.length)
      };
    }

    return;
  }

  if (Array.isArray(tree)) {
    var restCharacters = characters.slice();
    var i = 0;

    while (i < tree.length) {
      var subtree = tree[i];

      var result = _match(restCharacters, subtree, last && i === tree.length - 1);

      if (!result) {
        return;
      } else if (result.overflow) {
        return result;
      } else if (result.match) {
        // Continue with the next subtree with the rest of the characters.
        restCharacters = restCharacters.slice(result.matchedChars.length);

        if (restCharacters.length === 0) {
          if (i === tree.length - 1) {
            return {
              match: true,
              matchedChars: characters
            };
          } else {
            return {
              partialMatch: true // matchedChars: characters

            };
          }
        }
      } else {
        /* istanbul ignore else */
        if (result.partialMatch) {
          return {
            partialMatch: true // matchedChars: characters

          };
        } else {
          throw new Error("Unsupported match result:\n".concat(JSON.stringify(result, null, 2)));
        }
      }

      i++;
    } // If `last` then overflow has already been checked
    // by the last element of the `tree` array.

    /* istanbul ignore if */


    if (last) {
      return {
        overflow: true
      };
    }

    return {
      match: true,
      matchedChars: characters.slice(0, characters.length - restCharacters.length)
    };
  }

  switch (tree.op) {
    case '|':
      var partialMatch;

      for (var _iterator = _createForOfIteratorHelperLoose(tree.args), _step; !(_step = _iterator()).done;) {
        var branch = _step.value;

        var _result = _match(characters, branch, last);

        if (_result) {
          if (_result.overflow) {
            return _result;
          } else if (_result.match) {
            return {
              match: true,
              matchedChars: _result.matchedChars
            };
          } else {
            /* istanbul ignore else */
            if (_result.partialMatch) {
              partialMatch = true;
            } else {
              throw new Error("Unsupported match result:\n".concat(JSON.stringify(_result, null, 2)));
            }
          }
        }
      }

      if (partialMatch) {
        return {
          partialMatch: true // matchedChars: ...

        };
      } // Not even a partial match.


      return;

    case '[]':
      for (var _iterator2 = _createForOfIteratorHelperLoose(tree.args), _step2; !(_step2 = _iterator2()).done;) {
        var _char = _step2.value;

        if (characters[0] === _char) {
          if (characters.length === 1) {
            return {
              match: true,
              matchedChars: characters
            };
          }

          if (last) {
            return {
              overflow: true
            };
          }

          return {
            match: true,
            matchedChars: [_char]
          };
        }
      } // No character matches.


      return;

    /* istanbul ignore next */

    default:
      throw new Error("Unsupported instruction tree: ".concat(tree));
  }
}
//# sourceMappingURL=AsYouTypeFormatter.PatternMatcher.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternParser.js":
/*!********************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternParser.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PatternParser)
/* harmony export */ });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var PatternParser = /*#__PURE__*/function () {
  function PatternParser() {
    _classCallCheck(this, PatternParser);
  }

  _createClass(PatternParser, [{
    key: "parse",
    value: function parse(pattern) {
      this.context = [{
        or: true,
        instructions: []
      }];
      this.parsePattern(pattern);

      if (this.context.length !== 1) {
        throw new Error('Non-finalized contexts left when pattern parse ended');
      }

      var _this$context$ = this.context[0],
          branches = _this$context$.branches,
          instructions = _this$context$.instructions;

      if (branches) {
        return {
          op: '|',
          args: branches.concat([expandSingleElementArray(instructions)])
        };
      }
      /* istanbul ignore if */


      if (instructions.length === 0) {
        throw new Error('Pattern is required');
      }

      if (instructions.length === 1) {
        return instructions[0];
      }

      return instructions;
    }
  }, {
    key: "startContext",
    value: function startContext(context) {
      this.context.push(context);
    }
  }, {
    key: "endContext",
    value: function endContext() {
      this.context.pop();
    }
  }, {
    key: "getContext",
    value: function getContext() {
      return this.context[this.context.length - 1];
    }
  }, {
    key: "parsePattern",
    value: function parsePattern(pattern) {
      if (!pattern) {
        throw new Error('Pattern is required');
      }

      var match = pattern.match(OPERATOR);

      if (!match) {
        if (ILLEGAL_CHARACTER_REGEXP.test(pattern)) {
          throw new Error("Illegal characters found in a pattern: ".concat(pattern));
        }

        this.getContext().instructions = this.getContext().instructions.concat(pattern.split(''));
        return;
      }

      var operator = match[1];
      var before = pattern.slice(0, match.index);
      var rightPart = pattern.slice(match.index + operator.length);

      switch (operator) {
        case '(?:':
          if (before) {
            this.parsePattern(before);
          }

          this.startContext({
            or: true,
            instructions: [],
            branches: []
          });
          break;

        case ')':
          if (!this.getContext().or) {
            throw new Error('")" operator must be preceded by "(?:" operator');
          }

          if (before) {
            this.parsePattern(before);
          }

          if (this.getContext().instructions.length === 0) {
            throw new Error('No instructions found after "|" operator in an "or" group');
          }

          var _this$getContext = this.getContext(),
              branches = _this$getContext.branches;

          branches.push(expandSingleElementArray(this.getContext().instructions));
          this.endContext();
          this.getContext().instructions.push({
            op: '|',
            args: branches
          });
          break;

        case '|':
          if (!this.getContext().or) {
            throw new Error('"|" operator can only be used inside "or" groups');
          }

          if (before) {
            this.parsePattern(before);
          } // The top-level is an implicit "or" group, if required.


          if (!this.getContext().branches) {
            // `branches` are not defined only for the root implicit "or" operator.

            /* istanbul ignore else */
            if (this.context.length === 1) {
              this.getContext().branches = [];
            } else {
              throw new Error('"branches" not found in an "or" group context');
            }
          }

          this.getContext().branches.push(expandSingleElementArray(this.getContext().instructions));
          this.getContext().instructions = [];
          break;

        case '[':
          if (before) {
            this.parsePattern(before);
          }

          this.startContext({
            oneOfSet: true
          });
          break;

        case ']':
          if (!this.getContext().oneOfSet) {
            throw new Error('"]" operator must be preceded by "[" operator');
          }

          this.endContext();
          this.getContext().instructions.push({
            op: '[]',
            args: parseOneOfSet(before)
          });
          break;

        /* istanbul ignore next */

        default:
          throw new Error("Unknown operator: ".concat(operator));
      }

      if (rightPart) {
        this.parsePattern(rightPart);
      }
    }
  }]);

  return PatternParser;
}();



function parseOneOfSet(pattern) {
  var values = [];
  var i = 0;

  while (i < pattern.length) {
    if (pattern[i] === '-') {
      if (i === 0 || i === pattern.length - 1) {
        throw new Error("Couldn't parse a one-of set pattern: ".concat(pattern));
      }

      var prevValue = pattern[i - 1].charCodeAt(0) + 1;
      var nextValue = pattern[i + 1].charCodeAt(0) - 1;
      var value = prevValue;

      while (value <= nextValue) {
        values.push(String.fromCharCode(value));
        value++;
      }
    } else {
      values.push(pattern[i]);
    }

    i++;
  }

  return values;
}

var ILLEGAL_CHARACTER_REGEXP = /[\(\)\[\]\?\:\|]/;
var OPERATOR = new RegExp( // any of:
'(' + // or operator
'\\|' + // or
'|' + // or group start
'\\(\\?\\:' + // or
'|' + // or group end
'\\)' + // or
'|' + // one-of set start
'\\[' + // or
'|' + // one-of set end
'\\]' + ')');

function expandSingleElementArray(array) {
  if (array.length === 1) {
    return array[0];
  }

  return array;
}
//# sourceMappingURL=AsYouTypeFormatter.PatternParser.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js":
/*!***************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   canFormatCompleteNumber: () => (/* binding */ canFormatCompleteNumber),
/* harmony export */   "default": () => (/* binding */ formatCompleteNumber)
/* harmony export */ });
/* harmony import */ var _helpers_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/checkNumberLength.js */ "./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js");
/* harmony import */ var _helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/parseDigits.js */ "./node_modules/libphonenumber-js/es6/helpers/parseDigits.js");
/* harmony import */ var _helpers_formatNationalNumberUsingFormat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/formatNationalNumberUsingFormat.js */ "./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js");



function formatCompleteNumber(state, format, _ref) {
  var metadata = _ref.metadata,
      shouldTryNationalPrefixFormattingRule = _ref.shouldTryNationalPrefixFormattingRule,
      getSeparatorAfterNationalPrefix = _ref.getSeparatorAfterNationalPrefix;
  var matcher = new RegExp("^(?:".concat(format.pattern(), ")$"));

  if (matcher.test(state.nationalSignificantNumber)) {
    return formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, {
      metadata: metadata,
      shouldTryNationalPrefixFormattingRule: shouldTryNationalPrefixFormattingRule,
      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix
    });
  }
}
function canFormatCompleteNumber(nationalSignificantNumber, metadata) {
  return (0,_helpers_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_0__["default"])(nationalSignificantNumber, metadata) === 'IS_POSSIBLE';
}

function formatNationalNumberWithAndWithoutNationalPrefixFormattingRule(state, format, _ref2) {
  var metadata = _ref2.metadata,
      shouldTryNationalPrefixFormattingRule = _ref2.shouldTryNationalPrefixFormattingRule,
      getSeparatorAfterNationalPrefix = _ref2.getSeparatorAfterNationalPrefix;
  // `format` has already been checked for `nationalPrefix` requirement.
  var nationalSignificantNumber = state.nationalSignificantNumber,
      international = state.international,
      nationalPrefix = state.nationalPrefix,
      carrierCode = state.carrierCode; // Format the number with using `national_prefix_formatting_rule`.
  // If the resulting formatted number is a valid formatted number, then return it.
  //
  // Google's AsYouType formatter is different in a way that it doesn't try
  // to format using the "national prefix formatting rule", and instead it
  // simply prepends a national prefix followed by a " " character.
  // This code does that too, but as a fallback.
  // The reason is that "national prefix formatting rule" may use parentheses,
  // which wouldn't be included has it used the simpler Google's way.
  //

  if (shouldTryNationalPrefixFormattingRule(format)) {
    var formattedNumber = formatNationalNumber(state, format, {
      useNationalPrefixFormattingRule: true,
      getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,
      metadata: metadata
    });

    if (formattedNumber) {
      return formattedNumber;
    }
  } // Format the number without using `national_prefix_formatting_rule`.


  return formatNationalNumber(state, format, {
    useNationalPrefixFormattingRule: false,
    getSeparatorAfterNationalPrefix: getSeparatorAfterNationalPrefix,
    metadata: metadata
  });
}

function formatNationalNumber(state, format, _ref3) {
  var metadata = _ref3.metadata,
      useNationalPrefixFormattingRule = _ref3.useNationalPrefixFormattingRule,
      getSeparatorAfterNationalPrefix = _ref3.getSeparatorAfterNationalPrefix;
  var formattedNationalNumber = (0,_helpers_formatNationalNumberUsingFormat_js__WEBPACK_IMPORTED_MODULE_1__["default"])(state.nationalSignificantNumber, format, {
    carrierCode: state.carrierCode,
    useInternationalFormat: state.international,
    withNationalPrefix: useNationalPrefixFormattingRule,
    metadata: metadata
  });

  if (!useNationalPrefixFormattingRule) {
    if (state.nationalPrefix) {
      // If a national prefix was extracted, then just prepend it,
      // followed by a " " character.
      formattedNationalNumber = state.nationalPrefix + getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;
    } else if (state.complexPrefixBeforeNationalSignificantNumber) {
      formattedNationalNumber = state.complexPrefixBeforeNationalSignificantNumber + ' ' + formattedNationalNumber;
    }
  }

  if (isValidFormattedNationalNumber(formattedNationalNumber, state)) {
    return formattedNationalNumber;
  }
} // Check that the formatted phone number contains exactly
// the same digits that have been input by the user.
// For example, when "0111523456789" is input for `AR` country,
// the extracted `this.nationalSignificantNumber` is "91123456789",
// which means that the national part of `this.digits` isn't simply equal to
// `this.nationalPrefix` + `this.nationalSignificantNumber`.
//
// Also, a `format` can add extra digits to the `this.nationalSignificantNumber`
// being formatted via `metadata[country].national_prefix_transform_rule`.
// For example, for `VI` country, it prepends `340` to the national number,
// and if this check hasn't been implemented, then there would be a bug
// when `340` "area coude" is "duplicated" during input for `VI` country:
// https://github.com/catamphetamine/libphonenumber-js/issues/318
//
// So, all these "gotchas" are filtered out.
//
// In the original Google's code, the comments say:
// "Check that we didn't remove nor add any extra digits when we matched
// this formatting pattern. This usually happens after we entered the last
// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when
// formatted but AYTF should retain all the number entered and not change
// in order to match a format (of same leading digits and length) display
// in that way."
// "If it's the same (i.e entered number and format is same), then it's
// safe to return this in formatted number as nothing is lost / added."
// Otherwise, don't use this format.
// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5
// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b
//


function isValidFormattedNationalNumber(formattedNationalNumber, state) {
  return (0,_helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_2__["default"])(formattedNationalNumber) === state.getNationalDigits();
}
//# sourceMappingURL=AsYouTypeFormatter.complete.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js":
/*!******************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DIGIT_PLACEHOLDER: () => (/* reexport safe */ _AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER),
/* harmony export */   "default": () => (/* binding */ AsYouTypeFormatter)
/* harmony export */ });
/* harmony import */ var _AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsYouTypeFormatter.util.js */ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js");
/* harmony import */ var _AsYouTypeFormatter_complete_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AsYouTypeFormatter.complete.js */ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.complete.js");
/* harmony import */ var _AsYouTypeFormatter_PatternMatcher_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AsYouTypeFormatter.PatternMatcher.js */ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.PatternMatcher.js");
/* harmony import */ var _helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/parseDigits.js */ "./node_modules/libphonenumber-js/es6/helpers/parseDigits.js");
/* harmony import */ var _helpers_formatNationalNumberUsingFormat_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/formatNationalNumberUsingFormat.js */ "./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");
/* harmony import */ var _helpers_applyInternationalSeparatorStyle_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/applyInternationalSeparatorStyle.js */ "./node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }








 // Used in phone number format template creation.
// Could be any digit, I guess.

var DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`

var LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the
// `number_pattern` by applying the pattern to the "longest phone number" string.

var LONGEST_DUMMY_PHONE_NUMBER = (0,_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.repeat)(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // A set of characters that, if found in a national prefix formatting rules, are an indicator to
// us that we should separate the national prefix from the number when formatting.

var NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.
// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c
// "We no longer have numbers in formatting matching patterns, only \d."
// Because this library supports generating custom metadata
// some users may still be using old metadata so the relevant
// code seems to stay until some next major version update.

var SUPPORT_LEGACY_FORMATTING_PATTERNS = true; // A pattern that is used to match character classes in regular expressions.
// An example of a character class is "[1-4]".

var CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {
  return /\[([^\[\]])*\]/g;
}; // Any digit in a regular expression that actually denotes a digit. For
// example, in the regular expression "80[0-2]\d{6,10}", the first 2 digits
// (8 and 0) are standalone digits, but the rest are not.
// Two look-aheads are needed because the number following \\d could be a
// two-digit number, since the phone number can be as long as 15 digits.


var CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && function () {
  return /\d(?=[^,}][^,}])/g;
}; // A regular expression that is used to determine if a `format` is
// suitable to be used in the "as you type formatter".
// A `format` is suitable when the resulting formatted number has
// the same digits as the user has entered.
//
// In the simplest case, that would mean that the format
// doesn't add any additional digits when formatting a number.
// Google says that it also shouldn't add "star" (`*`) characters,
// like it does in some Israeli formats.
// Such basic format would only contain "valid punctuation"
// and "captured group" identifiers ($1, $2, etc).
//
// An example of a format that adds additional digits:
//
// Country: `AR` (Argentina).
// Format:
// {
//    "pattern": "(\\d)(\\d{2})(\\d{4})(\\d{4})",
//    "leading_digits_patterns": ["91"],
//    "national_prefix_formatting_rule": "0$1",
//    "format": "$2 15-$3-$4",
//    "international_format": "$1 $2 $3-$4"
// }
//
// In the format above, the `format` adds `15` to the digits when formatting a number.
// A sidenote: this format actually is suitable because `national_prefix_for_parsing`
// has previously removed `15` from a national number, so re-adding `15` in `format`
// doesn't actually result in any extra digits added to user's input.
// But verifying that would be a complex procedure, so the code chooses a simpler path:
// it simply filters out all `format`s that contain anything but "captured group" ids.
//
// This regular expression is called `ELIGIBLE_FORMAT_PATTERN` in Google's
// `libphonenumber` code.
//


var NON_ALTERING_FORMAT_REG_EXP = new RegExp('[' + _constants_js__WEBPACK_IMPORTED_MODULE_1__.VALID_PUNCTUATION + ']*' + // Google developers say:
// "We require that the first matching group is present in the
//  output pattern to ensure no data is lost while formatting."
'\\$1' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_1__.VALID_PUNCTUATION + ']*' + '(\\$\\d[' + _constants_js__WEBPACK_IMPORTED_MODULE_1__.VALID_PUNCTUATION + ']*)*' + '$'); // This is the minimum length of the leading digits of a phone number
// to guarantee the first "leading digits pattern" for a phone number format
// to be preemptive.

var MIN_LEADING_DIGITS_LENGTH = 3;

var AsYouTypeFormatter = /*#__PURE__*/function () {
  function AsYouTypeFormatter(_ref) {
    var state = _ref.state,
        metadata = _ref.metadata;

    _classCallCheck(this, AsYouTypeFormatter);

    this.metadata = metadata;
    this.resetFormat();
  }

  _createClass(AsYouTypeFormatter, [{
    key: "resetFormat",
    value: function resetFormat() {
      this.chosenFormat = undefined;
      this.template = undefined;
      this.nationalNumberTemplate = undefined;
      this.populatedNationalNumberTemplate = undefined;
      this.populatedNationalNumberTemplatePosition = -1;
    }
  }, {
    key: "reset",
    value: function reset(numberingPlan, state) {
      this.resetFormat();

      if (numberingPlan) {
        this.isNANP = numberingPlan.callingCode() === '1';
        this.matchingFormats = numberingPlan.formats();

        if (state.nationalSignificantNumber) {
          this.narrowDownMatchingFormats(state);
        }
      } else {
        this.isNANP = undefined;
        this.matchingFormats = [];
      }
    }
    /**
     * Formats an updated phone number.
     * @param  {string} nextDigits — Additional phone number digits.
     * @param  {object} state — `AsYouType` state.
     * @return {[string]} Returns undefined if the updated phone number can't be formatted using any of the available formats.
     */

  }, {
    key: "format",
    value: function format(nextDigits, state) {
      var _this = this;

      // See if the phone number digits can be formatted as a complete phone number.
      // If not, use the results from `formatNationalNumberWithNextDigits()`,
      // which formats based on the chosen formatting pattern.
      //
      // Attempting to format complete phone number first is how it's done
      // in Google's `libphonenumber`, so this library just follows it.
      // Google's `libphonenumber` code doesn't explain in detail why does it
      // attempt to format digits as a complete phone number
      // instead of just going with a previoulsy (or newly) chosen `format`:
      //
      // "Checks to see if there is an exact pattern match for these digits.
      //  If so, we should use this instead of any other formatting template
      //  whose leadingDigitsPattern also matches the input."
      //
      if ((0,_AsYouTypeFormatter_complete_js__WEBPACK_IMPORTED_MODULE_2__.canFormatCompleteNumber)(state.nationalSignificantNumber, this.metadata)) {
        for (var _iterator = _createForOfIteratorHelperLoose(this.matchingFormats), _step; !(_step = _iterator()).done;) {
          var format = _step.value;
          var formattedCompleteNumber = (0,_AsYouTypeFormatter_complete_js__WEBPACK_IMPORTED_MODULE_2__["default"])(state, format, {
            metadata: this.metadata,
            shouldTryNationalPrefixFormattingRule: function shouldTryNationalPrefixFormattingRule(format) {
              return _this.shouldTryNationalPrefixFormattingRule(format, {
                international: state.international,
                nationalPrefix: state.nationalPrefix
              });
            },
            getSeparatorAfterNationalPrefix: function getSeparatorAfterNationalPrefix(format) {
              return _this.getSeparatorAfterNationalPrefix(format);
            }
          });

          if (formattedCompleteNumber) {
            this.resetFormat();
            this.chosenFormat = format;
            this.setNationalNumberTemplate(formattedCompleteNumber.replace(/\d/g, _AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER), state);
            this.populatedNationalNumberTemplate = formattedCompleteNumber; // With a new formatting template, the matched position
            // using the old template needs to be reset.

            this.populatedNationalNumberTemplatePosition = this.template.lastIndexOf(_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER);
            return formattedCompleteNumber;
          }
        }
      } // Format the digits as a partial (incomplete) phone number
      // using the previously chosen formatting pattern (or a newly chosen one).


      return this.formatNationalNumberWithNextDigits(nextDigits, state);
    } // Formats the next phone number digits.

  }, {
    key: "formatNationalNumberWithNextDigits",
    value: function formatNationalNumberWithNextDigits(nextDigits, state) {
      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.

      var newlyChosenFormat = this.chooseFormat(state);

      if (newlyChosenFormat) {
        if (newlyChosenFormat === previouslyChosenFormat) {
          // If it can format the next (current) digits
          // using the previously chosen phone number format
          // then return the updated formatted number.
          return this.formatNextNationalNumberDigits(nextDigits);
        } else {
          // If a more appropriate phone number format
          // has been chosen for these "leading digits",
          // then re-format the national phone number part
          // using the newly selected format.
          return this.formatNextNationalNumberDigits(state.getNationalDigits());
        }
      }
    }
  }, {
    key: "narrowDownMatchingFormats",
    value: function narrowDownMatchingFormats(_ref2) {
      var _this2 = this;

      var nationalSignificantNumber = _ref2.nationalSignificantNumber,
          nationalPrefix = _ref2.nationalPrefix,
          international = _ref2.international;
      var leadingDigits = nationalSignificantNumber; // "leading digits" pattern list starts with a
      // "leading digits" pattern fitting a maximum of 3 leading digits.
      // So, after a user inputs 3 digits of a national (significant) phone number
      // this national (significant) number can already be formatted.
      // The next "leading digits" pattern is for 4 leading digits max,
      // and the "leading digits" pattern after it is for 5 leading digits max, etc.
      // This implementation is different from Google's
      // in that it searches for a fitting format
      // even if the user has entered less than
      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.
      // Because some leading digit patterns already match for a single first digit.

      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;

      if (leadingDigitsPatternIndex < 0) {
        leadingDigitsPatternIndex = 0;
      }

      this.matchingFormats = this.matchingFormats.filter(function (format) {
        return _this2.formatSuits(format, international, nationalPrefix) && _this2.formatMatches(format, leadingDigits, leadingDigitsPatternIndex);
      }); // If there was a phone number format chosen
      // and it no longer holds given the new leading digits then reset it.
      // The test for this `if` condition is marked as:
      // "Reset a chosen format when it no longer holds given the new leading digits".
      // To construct a valid test case for this one can find a country
      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`
      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).

      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {
        this.resetFormat();
      }
    }
  }, {
    key: "formatSuits",
    value: function formatSuits(format, international, nationalPrefix) {
      // When a prefix before a national (significant) number is
      // simply a national prefix, then it's parsed as `this.nationalPrefix`.
      // In more complex cases, a prefix before national (significant) number
      // could include a national prefix as well as some "capturing groups",
      // and in that case there's no info whether a national prefix has been parsed.
      // If national prefix is not used when formatting a phone number
      // using this format, but a national prefix has been entered by the user,
      // and was extracted, then discard such phone number format.
      // In Google's "AsYouType" formatter code, the equivalent would be this part:
      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L175-L184
      if (nationalPrefix && !format.usesNationalPrefix() && // !format.domesticCarrierCodeFormattingRule() &&
      !format.nationalPrefixIsOptionalWhenFormattingInNationalFormat()) {
        return false;
      } // If national prefix is mandatory for this phone number format
      // and there're no guarantees that a national prefix is present in user input
      // then discard this phone number format as not suitable.
      // In Google's "AsYouType" formatter code, the equivalent would be this part:
      // https://github.com/google/libphonenumber/blob/0a45cfd96e71cad8edb0e162a70fcc8bd9728933/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L185-L193


      if (!international && !nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {
        return false;
      }

      return true;
    }
  }, {
    key: "formatMatches",
    value: function formatMatches(format, leadingDigits, leadingDigitsPatternIndex) {
      var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain
      // leading digits pattern then it fits.
      // The test case could be found by searching for "leadingDigitsPatternsCount === 0".

      if (leadingDigitsPatternsCount === 0) {
        return true;
      } // Start narrowing down the list of possible formats based on the leading digits.
      // (only previously matched formats take part in the narrowing down process)
      // `leading_digits_patterns` start with 3 digits min
      // and then go up from there one digit at a time.


      leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);
      var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Google imposes a requirement on the leading digits
      // to be minimum 3 digits long in order to be eligible
      // for checking those with a leading digits pattern.
      //
      // Since `leading_digits_patterns` start with 3 digits min,
      // Google's original `libphonenumber` library only starts
      // excluding any non-matching formats only when the
      // national number entered so far is at least 3 digits long,
      // otherwise format matching would give false negatives.
      //
      // For example, when the digits entered so far are `2`
      // and the leading digits pattern is `21` –
      // it's quite obvious in this case that the format could be the one
      // but due to the absence of further digits it would give false negative.
      //
      // Also, `leading_digits_patterns` doesn't always correspond to a single
      // digits count. For example, `60|8` pattern would already match `8`
      // but the `60` part would require having at least two leading digits,
      // so the whole pattern would require inputting two digits first in order to
      // decide on whether it matches the input, even when the input is "80".
      //
      // This library — `libphonenumber-js` — allows filtering by `leading_digits_patterns`
      // even when there's only 1 or 2 digits of the national (significant) number.
      // To do that, it uses a non-strict pattern matcher written specifically for that.
      //

      if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {
        // Before leading digits < 3 matching was implemented:
        // return true
        //
        // After leading digits < 3 matching was implemented:
        try {
          return new _AsYouTypeFormatter_PatternMatcher_js__WEBPACK_IMPORTED_MODULE_3__["default"](leadingDigitsPattern).match(leadingDigits, {
            allowOverflow: true
          }) !== undefined;
        } catch (error)
        /* istanbul ignore next */
        {
          // There's a slight possibility that there could be some undiscovered bug
          // in the pattern matcher code. Since the "leading digits < 3 matching"
          // feature is not "essential" for operation, it can fall back to the old way
          // in case of any issues rather than halting the application's execution.
          console.error(error);
          return true;
        }
      } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are
      // available then use the usual regular expression matching.
      //
      // The whole pattern is wrapped in round brackets (`()`) because
      // the pattern can use "or" operator (`|`) at the top level of the pattern.
      //


      return new RegExp("^(".concat(leadingDigitsPattern, ")")).test(leadingDigits);
    }
  }, {
    key: "getFormatFormat",
    value: function getFormatFormat(format, international) {
      return international ? format.internationalFormat() : format.format();
    }
  }, {
    key: "chooseFormat",
    value: function chooseFormat(state) {
      var _this3 = this;

      var _loop = function _loop() {
        var format = _step2.value;

        // If this format is currently being used
        // and is still suitable, then stick to it.
        if (_this3.chosenFormat === format) {
          return "break";
        } // Sometimes, a formatting rule inserts additional digits in a phone number,
        // and "as you type" formatter can't do that: it should only use the digits
        // that the user has input.
        //
        // For example, in Argentina, there's a format for mobile phone numbers:
        //
        // {
        //    "pattern": "(\\d)(\\d{2})(\\d{4})(\\d{4})",
        //    "leading_digits_patterns": ["91"],
        //    "national_prefix_formatting_rule": "0$1",
        //    "format": "$2 15-$3-$4",
        //    "international_format": "$1 $2 $3-$4"
        // }
        //
        // In that format, `international_format` is used instead of `format`
        // because `format` inserts `15` in the formatted number,
        // and `AsYouType` formatter should only use the digits
        // the user has actually input, without adding any extra digits.
        // In this case, it wouldn't make a difference, because the `15`
        // is first stripped when applying `national_prefix_for_parsing`
        // and then re-added when using `format`, so in reality it doesn't
        // add any new digits to the number, but to detect that, the code
        // would have to be more complex: it would have to try formatting
        // the digits using the format and then see if any digits have
        // actually been added or removed, and then, every time a new digit
        // is input, it should re-check whether the chosen format doesn't
        // alter the digits.
        //
        // Google's code doesn't go that far, and so does this library:
        // it simply requires that a `format` doesn't add any additonal
        // digits to user's input.
        //
        // Also, people in general should move from inputting phone numbers
        // in national format (possibly with national prefixes)
        // and use international phone number format instead:
        // it's a logical thing in the modern age of mobile phones,
        // globalization and the internet.
        //

        /* istanbul ignore if */


        if (!NON_ALTERING_FORMAT_REG_EXP.test(_this3.getFormatFormat(format, state.international))) {
          return "continue";
        }

        if (!_this3.createTemplateForFormat(format, state)) {
          // Remove the format if it can't generate a template.
          _this3.matchingFormats = _this3.matchingFormats.filter(function (_) {
            return _ !== format;
          });
          return "continue";
        }

        _this3.chosenFormat = format;
        return "break";
      };

      // When there are multiple available formats, the formatter uses the first
      // format where a formatting template could be created.
      //
      // For some weird reason, `istanbul` says "else path not taken"
      // for the `for of` line below. Supposedly that means that
      // the loop doesn't ever go over the last element in the list.
      // That's true because there always is `this.chosenFormat`
      // when `this.matchingFormats` is non-empty.
      // And, for some weird reason, it doesn't think that the case
      // with empty `this.matchingFormats` qualifies for a valid "else" path.
      // So simply muting this `istanbul` warning.
      // It doesn't skip the contents of the `for of` loop,
      // it just skips the `for of` line.
      //

      /* istanbul ignore next */
      for (var _iterator2 = _createForOfIteratorHelperLoose(this.matchingFormats.slice()), _step2; !(_step2 = _iterator2()).done;) {
        var _ret = _loop();

        if (_ret === "break") break;
        if (_ret === "continue") continue;
      }

      if (!this.chosenFormat) {
        // No format matches the national (significant) phone number.
        this.resetFormat();
      }

      return this.chosenFormat;
    }
  }, {
    key: "createTemplateForFormat",
    value: function createTemplateForFormat(format, state) {
      // The formatter doesn't format numbers when numberPattern contains '|', e.g.
      // (20|3)\d{4}. In those cases we quickly return.
      // (Though there's no such format in current metadata)

      /* istanbul ignore if */
      if (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {
        return;
      } // Get formatting template for this phone number format


      var template = this.getTemplateForFormat(format, state); // If the national number entered is too long
      // for any phone number format, then abort.

      if (template) {
        this.setNationalNumberTemplate(template, state);
        return true;
      }
    }
  }, {
    key: "getSeparatorAfterNationalPrefix",
    value: function getSeparatorAfterNationalPrefix(format) {
      // `US` metadata doesn't have a `national_prefix_formatting_rule`,
      // so the `if` condition below doesn't apply to `US`,
      // but in reality there shoudl be a separator
      // between a national prefix and a national (significant) number.
      // So `US` national prefix separator is a "special" "hardcoded" case.
      if (this.isNANP) {
        return ' ';
      } // If a `format` has a `national_prefix_formatting_rule`
      // and that rule has a separator after a national prefix,
      // then it means that there should be a separator
      // between a national prefix and a national (significant) number.


      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {
        return ' ';
      } // At this point, there seems to be no clear evidence that
      // there should be a separator between a national prefix
      // and a national (significant) number. So don't insert one.


      return '';
    }
  }, {
    key: "getInternationalPrefixBeforeCountryCallingCode",
    value: function getInternationalPrefixBeforeCountryCallingCode(_ref3, options) {
      var IDDPrefix = _ref3.IDDPrefix,
          missingPlus = _ref3.missingPlus;

      if (IDDPrefix) {
        return options && options.spacing === false ? IDDPrefix : IDDPrefix + ' ';
      }

      if (missingPlus) {
        return '';
      }

      return '+';
    }
  }, {
    key: "getTemplate",
    value: function getTemplate(state) {
      if (!this.template) {
        return;
      } // `this.template` holds the template for a "complete" phone number.
      // The currently entered phone number is most likely not "complete",
      // so trim all non-populated digits.


      var index = -1;
      var i = 0;
      var internationalPrefix = state.international ? this.getInternationalPrefixBeforeCountryCallingCode(state, {
        spacing: false
      }) : '';

      while (i < internationalPrefix.length + state.getDigitsWithoutInternationalPrefix().length) {
        index = this.template.indexOf(_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER, index + 1);
        i++;
      }

      return (0,_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.cutAndStripNonPairedParens)(this.template, index + 1);
    }
  }, {
    key: "setNationalNumberTemplate",
    value: function setNationalNumberTemplate(template, state) {
      this.nationalNumberTemplate = template;
      this.populatedNationalNumberTemplate = template; // With a new formatting template, the matched position
      // using the old template needs to be reset.

      this.populatedNationalNumberTemplatePosition = -1; // For convenience, the public `.template` property
      // contains the whole international number
      // if the phone number being input is international:
      // 'x' for the '+' sign, 'x'es for the country phone code,
      // a spacebar and then the template for the formatted national number.

      if (state.international) {
        this.template = this.getInternationalPrefixBeforeCountryCallingCode(state).replace(/[\d\+]/g, _AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER) + (0,_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.repeat)(_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER, state.callingCode.length) + ' ' + template;
      } else {
        this.template = template;
      }
    }
    /**
     * Generates formatting template for a national phone number,
     * optionally containing a national prefix, for a format.
     * @param  {Format} format
     * @param  {string} nationalPrefix
     * @return {string}
     */

  }, {
    key: "getTemplateForFormat",
    value: function getTemplateForFormat(format, _ref4) {
      var nationalSignificantNumber = _ref4.nationalSignificantNumber,
          international = _ref4.international,
          nationalPrefix = _ref4.nationalPrefix,
          complexPrefixBeforeNationalSignificantNumber = _ref4.complexPrefixBeforeNationalSignificantNumber;
      var pattern = format.pattern();
      /* istanbul ignore else */

      if (SUPPORT_LEGACY_FORMATTING_PATTERNS) {
        pattern = pattern // Replace anything in the form of [..] with \d
        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\d') // Replace any standalone digit (not the one in `{}`) with \d
        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\d');
      } // Generate a dummy national number (consisting of `9`s)
      // that fits this format's `pattern`.
      //
      // This match will always succeed,
      // because the "longest dummy phone number"
      // has enough length to accomodate any possible
      // national phone number format pattern.
      //


      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long
      // for any phone number format, then abort.

      if (nationalSignificantNumber.length > digits.length) {
        return;
      } // Get a formatting template which can be used to efficiently format
      // a partial number where digits are added one by one.
      // Below `strictPattern` is used for the
      // regular expression (with `^` and `$`).
      // This wasn't originally in Google's `libphonenumber`
      // and I guess they don't really need it
      // because they're not using "templates" to format phone numbers
      // but I added `strictPattern` after encountering
      // South Korean phone number formatting bug.
      //
      // Non-strict regular expression bug demonstration:
      //
      // this.nationalSignificantNumber : `111111111` (9 digits)
      //
      // pattern : (\d{2})(\d{3,4})(\d{4})
      // format : `$1 $2 $3`
      // digits : `9999999999` (10 digits)
      //
      // '9999999999'.replace(new RegExp(/(\d{2})(\d{3,4})(\d{4})/g), '$1 $2 $3') = "99 9999 9999"
      //
      // template : xx xxxx xxxx
      //
      // But the correct template in this case is `xx xxx xxxx`.
      // The template was generated incorrectly because of the
      // `{3,4}` variability in the `pattern`.
      //
      // The fix is, if `this.nationalSignificantNumber` has already sufficient length
      // to satisfy the `pattern` completely then `this.nationalSignificantNumber`
      // is used instead of `digits`.


      var strictPattern = new RegExp('^' + pattern + '$');
      var nationalNumberDummyDigits = nationalSignificantNumber.replace(/\d/g, DUMMY_DIGIT); // If `this.nationalSignificantNumber` has already sufficient length
      // to satisfy the `pattern` completely then use it
      // instead of `digits`.

      if (strictPattern.test(nationalNumberDummyDigits)) {
        digits = nationalNumberDummyDigits;
      }

      var numberFormat = this.getFormatFormat(format, international);
      var nationalPrefixIncludedInTemplate; // If a user did input a national prefix (and that's guaranteed),
      // and if a `format` does have a national prefix formatting rule,
      // then see if that national prefix formatting rule
      // prepends exactly the same national prefix the user has input.
      // If that's the case, then use the `format` with the national prefix formatting rule.
      // Otherwise, use  the `format` without the national prefix formatting rule,
      // and prepend a national prefix manually to it.

      if (this.shouldTryNationalPrefixFormattingRule(format, {
        international: international,
        nationalPrefix: nationalPrefix
      })) {
        var numberFormatWithNationalPrefix = numberFormat.replace(_helpers_formatNationalNumberUsingFormat_js__WEBPACK_IMPORTED_MODULE_4__.FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()); // If `national_prefix_formatting_rule` of a `format` simply prepends
        // national prefix at the start of a national (significant) number,
        // then such formatting can be used with `AsYouType` formatter.
        // There seems to be no `else` case: everywhere in metadata,
        // national prefix formatting rule is national prefix + $1,
        // or `($1)`, in which case such format isn't even considered
        // when the user has input a national prefix.

        /* istanbul ignore else */

        if ((0,_helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_5__["default"])(format.nationalPrefixFormattingRule()) === (nationalPrefix || '') + (0,_helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_5__["default"])('$1')) {
          numberFormat = numberFormatWithNationalPrefix;
          nationalPrefixIncludedInTemplate = true; // Replace all digits of the national prefix in the formatting template
          // with `DIGIT_PLACEHOLDER`s.

          if (nationalPrefix) {
            var i = nationalPrefix.length;

            while (i > 0) {
              numberFormat = numberFormat.replace(/\d/, _AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER);
              i--;
            }
          }
        }
      } // Generate formatting template for this phone number format.


      var template = digits // Format the dummy phone number according to the format.
      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.
      .replace(new RegExp(DUMMY_DIGIT, 'g'), _AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER); // If a prefix of a national (significant) number is not as simple
      // as just a basic national prefix, then just prepend such prefix
      // before the national (significant) number, optionally spacing
      // the two with a whitespace.

      if (!nationalPrefixIncludedInTemplate) {
        if (complexPrefixBeforeNationalSignificantNumber) {
          // Prepend the prefix to the template manually.
          template = (0,_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.repeat)(_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER, complexPrefixBeforeNationalSignificantNumber.length) + ' ' + template;
        } else if (nationalPrefix) {
          // Prepend national prefix to the template manually.
          template = (0,_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.repeat)(_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;
        }
      }

      if (international) {
        template = (0,_helpers_applyInternationalSeparatorStyle_js__WEBPACK_IMPORTED_MODULE_6__["default"])(template);
      }

      return template;
    }
  }, {
    key: "formatNextNationalNumberDigits",
    value: function formatNextNationalNumberDigits(digits) {
      var result = (0,_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.populateTemplateWithDigits)(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition, digits);

      if (!result) {
        // Reset the format.
        this.resetFormat();
        return;
      }

      this.populatedNationalNumberTemplate = result[0];
      this.populatedNationalNumberTemplatePosition = result[1]; // Return the formatted phone number so far.

      return (0,_AsYouTypeFormatter_util_js__WEBPACK_IMPORTED_MODULE_0__.cutAndStripNonPairedParens)(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good
      // for `react-phone-number-input`'s default input (`InputBasic`).
      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)
      // 	.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')
    }
  }, {
    key: "shouldTryNationalPrefixFormattingRule",
    value: function shouldTryNationalPrefixFormattingRule(format, _ref5) {
      var international = _ref5.international,
          nationalPrefix = _ref5.nationalPrefix;

      if (format.nationalPrefixFormattingRule()) {
        // In some countries, `national_prefix_formatting_rule` is `($1)`,
        // so it applies even if the user hasn't input a national prefix.
        // `format.usesNationalPrefix()` detects such cases.
        var usesNationalPrefix = format.usesNationalPrefix();

        if (usesNationalPrefix && nationalPrefix || !usesNationalPrefix && !international) {
          return true;
        }
      }
    }
  }]);

  return AsYouTypeFormatter;
}();


//# sourceMappingURL=AsYouTypeFormatter.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/AsYouTypeFormatter.util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DIGIT_PLACEHOLDER: () => (/* binding */ DIGIT_PLACEHOLDER),
/* harmony export */   closeNonPairedParens: () => (/* binding */ closeNonPairedParens),
/* harmony export */   countOccurences: () => (/* binding */ countOccurences),
/* harmony export */   cutAndStripNonPairedParens: () => (/* binding */ cutAndStripNonPairedParens),
/* harmony export */   populateTemplateWithDigits: () => (/* binding */ populateTemplateWithDigits),
/* harmony export */   repeat: () => (/* binding */ repeat),
/* harmony export */   stripNonPairedParens: () => (/* binding */ stripNonPairedParens)
/* harmony export */ });
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// Should be the same as `DIGIT_PLACEHOLDER` in `libphonenumber-metadata-generator`.
var DIGIT_PLACEHOLDER = 'x'; // '\u2008' (punctuation space)

var DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // Counts all occurences of a symbol in a string.
// Unicode-unsafe (because using `.split()`).

function countOccurences(symbol, string) {
  var count = 0; // Using `.split('')` to iterate through a string here
  // to avoid requiring `Symbol.iterator` polyfill.
  // `.split('')` is generally not safe for Unicode,
  // but in this particular case for counting brackets it is safe.
  // for (const character of string)

  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {
    var character = _step.value;

    if (character === symbol) {
      count++;
    }
  }

  return count;
} // Repeats a string (or a symbol) N times.
// http://stackoverflow.com/questions/202605/repeat-string-javascript

function repeat(string, times) {
  if (times < 1) {
    return '';
  }

  var result = '';

  while (times > 1) {
    if (times & 1) {
      result += string;
    }

    times >>= 1;
    string += string;
  }

  return result + string;
}
function cutAndStripNonPairedParens(string, cutBeforeIndex) {
  if (string[cutBeforeIndex] === ')') {
    cutBeforeIndex++;
  }

  return stripNonPairedParens(string.slice(0, cutBeforeIndex));
}
function closeNonPairedParens(template, cut_before) {
  var retained_template = template.slice(0, cut_before);
  var opening_braces = countOccurences('(', retained_template);
  var closing_braces = countOccurences(')', retained_template);
  var dangling_braces = opening_braces - closing_braces;

  while (dangling_braces > 0 && cut_before < template.length) {
    if (template[cut_before] === ')') {
      dangling_braces--;
    }

    cut_before++;
  }

  return template.slice(0, cut_before);
}
function stripNonPairedParens(string) {
  var dangling_braces = [];
  var i = 0;

  while (i < string.length) {
    if (string[i] === '(') {
      dangling_braces.push(i);
    } else if (string[i] === ')') {
      dangling_braces.pop();
    }

    i++;
  }

  var start = 0;
  var cleared_string = '';
  dangling_braces.push(string.length);

  for (var _i = 0, _dangling_braces = dangling_braces; _i < _dangling_braces.length; _i++) {
    var index = _dangling_braces[_i];
    cleared_string += string.slice(start, index);
    start = index + 1;
  }

  return cleared_string;
}
function populateTemplateWithDigits(template, position, digits) {
  // Using `.split('')` to iterate through a string here
  // to avoid requiring `Symbol.iterator` polyfill.
  // `.split('')` is generally not safe for Unicode,
  // but in this particular case for `digits` it is safe.
  // for (const digit of digits)
  for (var _iterator2 = _createForOfIteratorHelperLoose(digits.split('')), _step2; !(_step2 = _iterator2()).done;) {
    var digit = _step2.value;

    // If there is room for more digits in current `template`,
    // then set the next digit in the `template`,
    // and return the formatted digits so far.
    // If more digits are entered than the current format could handle.
    if (template.slice(position + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {
      return;
    }

    position = template.search(DIGIT_PLACEHOLDER_MATCHER);
    template = template.replace(DIGIT_PLACEHOLDER_MATCHER, digit);
  }

  return [template, position];
}
//# sourceMappingURL=AsYouTypeFormatter.util.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/AsYouTypeParser.js":
/*!***************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/AsYouTypeParser.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AsYouTypeParser),
/* harmony export */   extractFormattedDigitsAndPlus: () => (/* binding */ extractFormattedDigitsAndPlus)
/* harmony export */ });
/* harmony import */ var _helpers_extractCountryCallingCode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/extractCountryCallingCode.js */ "./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js");
/* harmony import */ var _helpers_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js */ "./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js");
/* harmony import */ var _helpers_extractNationalNumberFromPossiblyIncompleteNumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/extractNationalNumberFromPossiblyIncompleteNumber.js */ "./node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js");
/* harmony import */ var _helpers_stripIddPrefix_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/stripIddPrefix.js */ "./node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js");
/* harmony import */ var _helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/parseDigits.js */ "./node_modules/libphonenumber-js/es6/helpers/parseDigits.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }







var VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART = '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_PUNCTUATION + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']+';
var VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART + '$', 'i');
var VALID_FORMATTED_PHONE_NUMBER_PART = '(?:' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PLUS_CHARS + ']' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_PUNCTUATION + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']*' + '|' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_PUNCTUATION + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']+' + ')';
var AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_PUNCTUATION + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']+' + '.*' + '$'); // Tests whether `national_prefix_for_parsing` could match
// different national prefixes.
// Matches anything that's not a digit or a square bracket.

var COMPLEX_NATIONAL_PREFIX = /[^\d\[\]]/;

var AsYouTypeParser = /*#__PURE__*/function () {
  function AsYouTypeParser(_ref) {
    var defaultCountry = _ref.defaultCountry,
        defaultCallingCode = _ref.defaultCallingCode,
        metadata = _ref.metadata,
        onNationalSignificantNumberChange = _ref.onNationalSignificantNumberChange;

    _classCallCheck(this, AsYouTypeParser);

    this.defaultCountry = defaultCountry;
    this.defaultCallingCode = defaultCallingCode;
    this.metadata = metadata;
    this.onNationalSignificantNumberChange = onNationalSignificantNumberChange;
  }

  _createClass(AsYouTypeParser, [{
    key: "input",
    value: function input(text, state) {
      var _extractFormattedDigi = extractFormattedDigitsAndPlus(text),
          _extractFormattedDigi2 = _slicedToArray(_extractFormattedDigi, 2),
          formattedDigits = _extractFormattedDigi2[0],
          hasPlus = _extractFormattedDigi2[1];

      var digits = (0,_helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_1__["default"])(formattedDigits); // Checks for a special case: just a leading `+` has been entered.

      var justLeadingPlus;

      if (hasPlus) {
        if (!state.digits) {
          state.startInternationalNumber();

          if (!digits) {
            justLeadingPlus = true;
          }
        }
      }

      if (digits) {
        this.inputDigits(digits, state);
      }

      return {
        digits: digits,
        justLeadingPlus: justLeadingPlus
      };
    }
    /**
     * Inputs "next" phone number digits.
     * @param  {string} digits
     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means "don't format the national phone number at this stage".
     */

  }, {
    key: "inputDigits",
    value: function inputDigits(nextDigits, state) {
      var digits = state.digits;
      var hasReceivedThreeLeadingDigits = digits.length < 3 && digits.length + nextDigits.length >= 3; // Append phone number digits.

      state.appendDigits(nextDigits); // Attempt to extract IDD prefix:
      // Some users input their phone number in international format,
      // but in an "out-of-country" dialing format instead of using the leading `+`.
      // https://github.com/catamphetamine/libphonenumber-js/issues/185
      // Detect such numbers as soon as there're at least 3 digits.
      // Google's library attempts to extract IDD prefix at 3 digits,
      // so this library just copies that behavior.
      // I guess that's because the most commot IDD prefixes are
      // `00` (Europe) and `011` (US).
      // There exist really long IDD prefixes too:
      // for example, in Australia the default IDD prefix is `0011`,
      // and it could even be as long as `14880011`.
      // An IDD prefix is extracted here, and then every time when
      // there's a new digit and the number couldn't be formatted.

      if (hasReceivedThreeLeadingDigits) {
        this.extractIddPrefix(state);
      }

      if (this.isWaitingForCountryCallingCode(state)) {
        if (!this.extractCountryCallingCode(state)) {
          return;
        }
      } else {
        state.appendNationalSignificantNumberDigits(nextDigits);
      } // If a phone number is being input in international format,
      // then it's not valid for it to have a national prefix.
      // Still, some people incorrectly input such numbers with a national prefix.
      // In such cases, only attempt to strip a national prefix if the number becomes too long.
      // (but that is done later, not here)


      if (!state.international) {
        if (!this.hasExtractedNationalSignificantNumber) {
          this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {
            return state.update(stateUpdate);
          });
        }
      }
    }
  }, {
    key: "isWaitingForCountryCallingCode",
    value: function isWaitingForCountryCallingCode(_ref2) {
      var international = _ref2.international,
          callingCode = _ref2.callingCode;
      return international && !callingCode;
    } // Extracts a country calling code from a number
    // being entered in internatonal format.

  }, {
    key: "extractCountryCallingCode",
    value: function extractCountryCallingCode(state) {
      var _extractCountryCallin = (0,_helpers_extractCountryCallingCode_js__WEBPACK_IMPORTED_MODULE_2__["default"])('+' + state.getDigitsWithoutInternationalPrefix(), this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),
          countryCallingCode = _extractCountryCallin.countryCallingCode,
          number = _extractCountryCallin.number;

      if (countryCallingCode) {
        state.setCallingCode(countryCallingCode);
        state.update({
          nationalSignificantNumber: number
        });
        return true;
      }
    }
  }, {
    key: "reset",
    value: function reset(numberingPlan) {
      if (numberingPlan) {
        this.hasSelectedNumberingPlan = true;

        var nationalPrefixForParsing = numberingPlan._nationalPrefixForParsing();

        this.couldPossiblyExtractAnotherNationalSignificantNumber = nationalPrefixForParsing && COMPLEX_NATIONAL_PREFIX.test(nationalPrefixForParsing);
      } else {
        this.hasSelectedNumberingPlan = undefined;
        this.couldPossiblyExtractAnotherNationalSignificantNumber = undefined;
      }
    }
    /**
     * Extracts a national (significant) number from user input.
     * Google's library is different in that it only applies `national_prefix_for_parsing`
     * and doesn't apply `national_prefix_transform_rule` after that.
     * https://github.com/google/libphonenumber/blob/a3d70b0487875475e6ad659af404943211d26456/java/libphonenumber/src/com/google/i18n/phonenumbers/AsYouTypeFormatter.java#L539
     * @return {boolean} [extracted]
     */

  }, {
    key: "extractNationalSignificantNumber",
    value: function extractNationalSignificantNumber(nationalDigits, setState) {
      if (!this.hasSelectedNumberingPlan) {
        return;
      }

      var _extractNationalNumbe = (0,_helpers_extractNationalNumberFromPossiblyIncompleteNumber_js__WEBPACK_IMPORTED_MODULE_3__["default"])(nationalDigits, this.metadata),
          nationalPrefix = _extractNationalNumbe.nationalPrefix,
          nationalNumber = _extractNationalNumbe.nationalNumber,
          carrierCode = _extractNationalNumbe.carrierCode;

      if (nationalNumber === nationalDigits) {
        return;
      }

      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);
      return true;
    }
    /**
     * In Google's code this function is called "attempt to extract longer NDD".
     * "Some national prefixes are a substring of others", they say.
     * @return {boolean} [result] — Returns `true` if extracting a national prefix produced different results from what they were.
     */

  }, {
    key: "extractAnotherNationalSignificantNumber",
    value: function extractAnotherNationalSignificantNumber(nationalDigits, prevNationalSignificantNumber, setState) {
      if (!this.hasExtractedNationalSignificantNumber) {
        return this.extractNationalSignificantNumber(nationalDigits, setState);
      }

      if (!this.couldPossiblyExtractAnotherNationalSignificantNumber) {
        return;
      }

      var _extractNationalNumbe2 = (0,_helpers_extractNationalNumberFromPossiblyIncompleteNumber_js__WEBPACK_IMPORTED_MODULE_3__["default"])(nationalDigits, this.metadata),
          nationalPrefix = _extractNationalNumbe2.nationalPrefix,
          nationalNumber = _extractNationalNumbe2.nationalNumber,
          carrierCode = _extractNationalNumbe2.carrierCode; // If a national prefix has been extracted previously,
      // then it's always extracted as additional digits are added.
      // That's assuming `extractNationalNumberFromPossiblyIncompleteNumber()`
      // doesn't do anything different from what it currently does.
      // So, just in case, here's this check, though it doesn't occur.

      /* istanbul ignore if */


      if (nationalNumber === prevNationalSignificantNumber) {
        return;
      }

      this.onExtractedNationalNumber(nationalPrefix, carrierCode, nationalNumber, nationalDigits, setState);
      return true;
    }
  }, {
    key: "onExtractedNationalNumber",
    value: function onExtractedNationalNumber(nationalPrefix, carrierCode, nationalSignificantNumber, nationalDigits, setState) {
      var complexPrefixBeforeNationalSignificantNumber;
      var nationalSignificantNumberMatchesInput; // This check also works with empty `this.nationalSignificantNumber`.

      var nationalSignificantNumberIndex = nationalDigits.lastIndexOf(nationalSignificantNumber); // If the extracted national (significant) number is the
      // last substring of the `digits`, then it means that it hasn't been altered:
      // no digits have been removed from the national (significant) number
      // while applying `national_prefix_transform_rule`.
      // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule

      if (nationalSignificantNumberIndex >= 0 && nationalSignificantNumberIndex === nationalDigits.length - nationalSignificantNumber.length) {
        nationalSignificantNumberMatchesInput = true; // If a prefix of a national (significant) number is not as simple
        // as just a basic national prefix, then such prefix is stored in
        // `this.complexPrefixBeforeNationalSignificantNumber` property and will be
        // prepended "as is" to the national (significant) number to produce
        // a formatted result.

        var prefixBeforeNationalNumber = nationalDigits.slice(0, nationalSignificantNumberIndex); // `prefixBeforeNationalNumber` is always non-empty,
        // because `onExtractedNationalNumber()` isn't called
        // when a national (significant) number hasn't been actually "extracted":
        // when a national (significant) number is equal to the national part of `digits`,
        // then `onExtractedNationalNumber()` doesn't get called.

        if (prefixBeforeNationalNumber !== nationalPrefix) {
          complexPrefixBeforeNationalSignificantNumber = prefixBeforeNationalNumber;
        }
      }

      setState({
        nationalPrefix: nationalPrefix,
        carrierCode: carrierCode,
        nationalSignificantNumber: nationalSignificantNumber,
        nationalSignificantNumberMatchesInput: nationalSignificantNumberMatchesInput,
        complexPrefixBeforeNationalSignificantNumber: complexPrefixBeforeNationalSignificantNumber
      }); // `onExtractedNationalNumber()` is only called when
      // the national (significant) number actually did change.

      this.hasExtractedNationalSignificantNumber = true;
      this.onNationalSignificantNumberChange();
    }
  }, {
    key: "reExtractNationalSignificantNumber",
    value: function reExtractNationalSignificantNumber(state) {
      // Attempt to extract a national prefix.
      //
      // Some people incorrectly input national prefix
      // in an international phone number.
      // For example, some people write British phone numbers as `+44(0)...`.
      //
      // Also, in some rare cases, it is valid for a national prefix
      // to be a part of an international phone number.
      // For example, mobile phone numbers in Mexico are supposed to be
      // dialled internationally using a `1` national prefix,
      // so the national prefix will be part of an international number.
      //
      // Quote from:
      // https://www.mexperience.com/dialing-cell-phones-in-mexico/
      //
      // "Dialing a Mexican cell phone from abroad
      // When you are calling a cell phone number in Mexico from outside Mexico,
      // it’s necessary to dial an additional “1” after Mexico’s country code
      // (which is “52”) and before the area code.
      // You also ignore the 045, and simply dial the area code and the
      // cell phone’s number.
      //
      // If you don’t add the “1”, you’ll receive a recorded announcement
      // asking you to redial using it.
      //
      // For example, if you are calling from the USA to a cell phone
      // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.
      // (Note that this is different to calling a land line in Mexico City
      // from abroad, where the number dialed would be +52 – 55 – 1234 5678)".
      //
      // Google's demo output:
      // https://libphonenumber.appspot.com/phonenumberparser?number=%2b5215512345678&country=MX
      //
      if (this.extractAnotherNationalSignificantNumber(state.getNationalDigits(), state.nationalSignificantNumber, function (stateUpdate) {
        return state.update(stateUpdate);
      })) {
        return true;
      } // If no format matches the phone number, then it could be
      // "a really long IDD" (quote from a comment in Google's library).
      // An IDD prefix is first extracted when the user has entered at least 3 digits,
      // and then here — every time when there's a new digit and the number
      // couldn't be formatted.
      // For example, in Australia the default IDD prefix is `0011`,
      // and it could even be as long as `14880011`.
      //
      // Could also check `!hasReceivedThreeLeadingDigits` here
      // to filter out the case when this check duplicates the one
      // already performed when there're 3 leading digits,
      // but it's not a big deal, and in most cases there
      // will be a suitable `format` when there're 3 leading digits.
      //


      if (this.extractIddPrefix(state)) {
        this.extractCallingCodeAndNationalSignificantNumber(state);
        return true;
      } // Google's AsYouType formatter supports sort of an "autocorrection" feature
      // when it "autocorrects" numbers that have been input for a country
      // with that country's calling code.
      // Such "autocorrection" feature looks weird, but different people have been requesting it:
      // https://github.com/catamphetamine/libphonenumber-js/issues/376
      // https://github.com/catamphetamine/libphonenumber-js/issues/375
      // https://github.com/catamphetamine/libphonenumber-js/issues/316


      if (this.fixMissingPlus(state)) {
        this.extractCallingCodeAndNationalSignificantNumber(state);
        return true;
      }
    }
  }, {
    key: "extractIddPrefix",
    value: function extractIddPrefix(state) {
      // An IDD prefix can't be present in a number written with a `+`.
      // Also, don't re-extract an IDD prefix if has already been extracted.
      var international = state.international,
          IDDPrefix = state.IDDPrefix,
          digits = state.digits,
          nationalSignificantNumber = state.nationalSignificantNumber;

      if (international || IDDPrefix) {
        return;
      } // Some users input their phone number in "out-of-country"
      // dialing format instead of using the leading `+`.
      // https://github.com/catamphetamine/libphonenumber-js/issues/185
      // Detect such numbers.


      var numberWithoutIDD = (0,_helpers_stripIddPrefix_js__WEBPACK_IMPORTED_MODULE_4__["default"])(digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);

      if (numberWithoutIDD !== undefined && numberWithoutIDD !== digits) {
        // If an IDD prefix was stripped then convert the IDD-prefixed number
        // to international number for subsequent parsing.
        state.update({
          IDDPrefix: digits.slice(0, digits.length - numberWithoutIDD.length)
        });
        this.startInternationalNumber(state, {
          country: undefined,
          callingCode: undefined
        });
        return true;
      }
    }
  }, {
    key: "fixMissingPlus",
    value: function fixMissingPlus(state) {
      if (!state.international) {
        var _extractCountryCallin2 = (0,_helpers_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign_js__WEBPACK_IMPORTED_MODULE_5__["default"])(state.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),
            newCallingCode = _extractCountryCallin2.countryCallingCode,
            number = _extractCountryCallin2.number;

        if (newCallingCode) {
          state.update({
            missingPlus: true
          });
          this.startInternationalNumber(state, {
            country: state.country,
            callingCode: newCallingCode
          });
          return true;
        }
      }
    }
  }, {
    key: "startInternationalNumber",
    value: function startInternationalNumber(state, _ref3) {
      var country = _ref3.country,
          callingCode = _ref3.callingCode;
      state.startInternationalNumber(country, callingCode); // If a national (significant) number has been extracted before, reset it.

      if (state.nationalSignificantNumber) {
        state.resetNationalSignificantNumber();
        this.onNationalSignificantNumberChange();
        this.hasExtractedNationalSignificantNumber = undefined;
      }
    }
  }, {
    key: "extractCallingCodeAndNationalSignificantNumber",
    value: function extractCallingCodeAndNationalSignificantNumber(state) {
      if (this.extractCountryCallingCode(state)) {
        // `this.extractCallingCode()` is currently called when the number
        // couldn't be formatted during the standard procedure.
        // Normally, the national prefix would be re-extracted
        // for an international number if such number couldn't be formatted,
        // but since it's already not able to be formatted,
        // there won't be yet another retry, so also extract national prefix here.
        this.extractNationalSignificantNumber(state.getNationalDigits(), function (stateUpdate) {
          return state.update(stateUpdate);
        });
      }
    }
  }]);

  return AsYouTypeParser;
}();
/**
 * Extracts formatted phone number from text (if there's any).
 * @param  {string} text
 * @return {string} [formattedPhoneNumber]
 */




function extractFormattedPhoneNumber(text) {
  // Attempt to extract a possible number from the string passed in.
  var startsAt = text.search(VALID_FORMATTED_PHONE_NUMBER_PART);

  if (startsAt < 0) {
    return;
  } // Trim everything to the left of the phone number.


  text = text.slice(startsAt); // Trim the `+`.

  var hasPlus;

  if (text[0] === '+') {
    hasPlus = true;
    text = text.slice('+'.length);
  } // Trim everything to the right of the phone number.


  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.

  if (hasPlus) {
    text = '+' + text;
  }

  return text;
}
/**
 * Extracts formatted phone number digits (and a `+`) from text (if there're any).
 * @param  {string} text
 * @return {any[]}
 */


function _extractFormattedDigitsAndPlus(text) {
  // Extract a formatted phone number part from text.
  var extractedNumber = extractFormattedPhoneNumber(text) || ''; // Trim a `+`.

  if (extractedNumber[0] === '+') {
    return [extractedNumber.slice('+'.length), true];
  }

  return [extractedNumber];
}
/**
 * Extracts formatted phone number digits (and a `+`) from text (if there're any).
 * @param  {string} text
 * @return {any[]}
 */


function extractFormattedDigitsAndPlus(text) {
  var _extractFormattedDigi3 = _extractFormattedDigitsAndPlus(text),
      _extractFormattedDigi4 = _slicedToArray(_extractFormattedDigi3, 2),
      formattedDigits = _extractFormattedDigi4[0],
      hasPlus = _extractFormattedDigi4[1]; // If the extracted phone number part
  // can possibly be a part of some valid phone number
  // then parse phone number characters from a formatted phone number.


  if (!VALID_FORMATTED_PHONE_NUMBER_DIGITS_PART_PATTERN.test(formattedDigits)) {
    formattedDigits = '';
  }

  return [formattedDigits, hasPlus];
}
//# sourceMappingURL=AsYouTypeParser.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/AsYouTypeState.js":
/*!**************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/AsYouTypeState.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AsYouTypeState)
/* harmony export */ });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var AsYouTypeState = /*#__PURE__*/function () {
  function AsYouTypeState(_ref) {
    var onCountryChange = _ref.onCountryChange,
        onCallingCodeChange = _ref.onCallingCodeChange;

    _classCallCheck(this, AsYouTypeState);

    this.onCountryChange = onCountryChange;
    this.onCallingCodeChange = onCallingCodeChange;
  }

  _createClass(AsYouTypeState, [{
    key: "reset",
    value: function reset(_ref2) {
      var country = _ref2.country,
          callingCode = _ref2.callingCode;
      this.international = false;
      this.IDDPrefix = undefined;
      this.missingPlus = undefined;
      this.callingCode = undefined;
      this.digits = '';
      this.resetNationalSignificantNumber();
      this.initCountryAndCallingCode(country, callingCode);
    }
  }, {
    key: "resetNationalSignificantNumber",
    value: function resetNationalSignificantNumber() {
      this.nationalSignificantNumber = this.getNationalDigits();
      this.nationalSignificantNumberMatchesInput = true;
      this.nationalPrefix = undefined;
      this.carrierCode = undefined;
      this.complexPrefixBeforeNationalSignificantNumber = undefined;
    }
  }, {
    key: "update",
    value: function update(properties) {
      for (var _i = 0, _Object$keys = Object.keys(properties); _i < _Object$keys.length; _i++) {
        var key = _Object$keys[_i];
        this[key] = properties[key];
      }
    }
  }, {
    key: "initCountryAndCallingCode",
    value: function initCountryAndCallingCode(country, callingCode) {
      this.setCountry(country);
      this.setCallingCode(callingCode);
    }
  }, {
    key: "setCountry",
    value: function setCountry(country) {
      this.country = country;
      this.onCountryChange(country);
    }
  }, {
    key: "setCallingCode",
    value: function setCallingCode(callingCode) {
      this.callingCode = callingCode;
      this.onCallingCodeChange(callingCode, this.country);
    }
  }, {
    key: "startInternationalNumber",
    value: function startInternationalNumber(country, callingCode) {
      // Prepend the `+` to parsed input.
      this.international = true; // If a default country was set then reset it
      // because an explicitly international phone
      // number is being entered.

      this.initCountryAndCallingCode(country, callingCode);
    }
  }, {
    key: "appendDigits",
    value: function appendDigits(nextDigits) {
      this.digits += nextDigits;
    }
  }, {
    key: "appendNationalSignificantNumberDigits",
    value: function appendNationalSignificantNumberDigits(nextDigits) {
      this.nationalSignificantNumber += nextDigits;
    }
    /**
     * Returns the part of `this.digits` that corresponds to the national number.
     * Basically, all digits that have been input by the user, except for the
     * international prefix and the country calling code part
     * (if the number is an international one).
     * @return {string}
     */

  }, {
    key: "getNationalDigits",
    value: function getNationalDigits() {
      if (this.international) {
        return this.digits.slice((this.IDDPrefix ? this.IDDPrefix.length : 0) + (this.callingCode ? this.callingCode.length : 0));
      }

      return this.digits;
    }
  }, {
    key: "getDigitsWithoutInternationalPrefix",
    value: function getDigitsWithoutInternationalPrefix() {
      if (this.international) {
        if (this.IDDPrefix) {
          return this.digits.slice(this.IDDPrefix.length);
        }
      }

      return this.digits;
    }
  }]);

  return AsYouTypeState;
}();


//# sourceMappingURL=AsYouTypeState.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/ParseError.js":
/*!**********************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/ParseError.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ParseError)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// https://stackoverflow.com/a/46971044/970769
// "Breaking changes in Typescript 2.1"
// "Extending built-ins like Error, Array, and Map may no longer work."
// "As a recommendation, you can manually adjust the prototype immediately after any super(...) calls."
// https://github.com/Microsoft/TypeScript-wiki/blob/main/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
var ParseError = /*#__PURE__*/function (_Error) {
  _inherits(ParseError, _Error);

  var _super = _createSuper(ParseError);

  function ParseError(code) {
    var _this;

    _classCallCheck(this, ParseError);

    _this = _super.call(this, code); // Set the prototype explicitly.
    // Any subclass of FooError will have to manually set the prototype as well.

    Object.setPrototypeOf(_assertThisInitialized(_this), ParseError.prototype);
    _this.name = _this.constructor.name;
    return _this;
  }

  return _createClass(ParseError);
}( /*#__PURE__*/_wrapNativeSuper(Error));


//# sourceMappingURL=ParseError.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/PhoneNumber.js":
/*!***********************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/PhoneNumber.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PhoneNumber)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _isPossible_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isPossible.js */ "./node_modules/libphonenumber-js/es6/isPossible.js");
/* harmony import */ var _isValid_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isValid.js */ "./node_modules/libphonenumber-js/es6/isValid.js");
/* harmony import */ var _helpers_getNumberType_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/getNumberType.js */ "./node_modules/libphonenumber-js/es6/helpers/getNumberType.js");
/* harmony import */ var _helpers_getPossibleCountriesForNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/getPossibleCountriesForNumber.js */ "./node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js");
/* harmony import */ var _format_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./format.js */ "./node_modules/libphonenumber-js/es6/format.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



 // import checkNumberLength from './helpers/checkNumberLength.js'




var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;

var PhoneNumber = /*#__PURE__*/function () {
  /**
   * @param  {string} countryOrCountryCallingCode
   * @param  {string} nationalNumber
   * @param  {object} metadata — Metadata JSON
   * @return {PhoneNumber}
   */
  function PhoneNumber(countryOrCountryCallingCode, nationalNumber, metadata) {
    _classCallCheck(this, PhoneNumber);

    if (!countryOrCountryCallingCode) {
      throw new TypeError('`country` or `countryCallingCode` not passed');
    }

    if (!nationalNumber) {
      throw new TypeError('`nationalNumber` not passed');
    }

    if (!metadata) {
      throw new TypeError('`metadata` not passed');
    }

    var _getCountryAndCountry = getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadata),
        country = _getCountryAndCountry.country,
        countryCallingCode = _getCountryAndCountry.countryCallingCode;

    this.country = country;
    this.countryCallingCode = countryCallingCode;
    this.nationalNumber = nationalNumber;
    this.number = '+' + this.countryCallingCode + this.nationalNumber;
    this.metadata = metadata;
  }

  _createClass(PhoneNumber, [{
    key: "setExt",
    value: function setExt(ext) {
      this.ext = ext;
    }
  }, {
    key: "getPossibleCountries",
    value: function getPossibleCountries() {
      if (this.country) {
        return [this.country];
      }

      return (0,_helpers_getPossibleCountriesForNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this.countryCallingCode, this.nationalNumber, this.metadata);
    }
  }, {
    key: "isPossible",
    value: function isPossible() {
      return (0,_isPossible_js__WEBPACK_IMPORTED_MODULE_1__["default"])(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "isValid",
    value: function isValid() {
      return (0,_isValid_js__WEBPACK_IMPORTED_MODULE_2__["default"])(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "isNonGeographic",
    value: function isNonGeographic() {
      var metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_3__["default"](this.metadata);
      return metadata.isNonGeographicCallingCode(this.countryCallingCode);
    }
  }, {
    key: "isEqual",
    value: function isEqual(phoneNumber) {
      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;
    } // This function was originally meant to be an equivalent for `validatePhoneNumberLength()`,
    // but later it was found out that it doesn't include the possible `TOO_SHORT` result
    // returned from `parsePhoneNumberWithError()` in the original `validatePhoneNumberLength()`,
    // so eventually I simply commented out this method from the `PhoneNumber` class
    // and just left the `validatePhoneNumberLength()` function, even though that one would require
    // and additional step to also validate the actual country / calling code of the phone number.
    // validateLength() {
    // 	const metadata = new Metadata(this.metadata)
    // 	metadata.selectNumberingPlan(this.countryCallingCode)
    // 	const result = checkNumberLength(this.nationalNumber, metadata)
    // 	if (result !== 'IS_POSSIBLE') {
    // 		return result
    // 	}
    // }

  }, {
    key: "getType",
    value: function getType() {
      return (0,_helpers_getNumberType_js__WEBPACK_IMPORTED_MODULE_4__["default"])(this, {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "format",
    value: function format(_format, options) {
      return (0,_format_js__WEBPACK_IMPORTED_MODULE_5__["default"])(this, _format, options ? _objectSpread(_objectSpread({}, options), {}, {
        v2: true
      }) : {
        v2: true
      }, this.metadata);
    }
  }, {
    key: "formatNational",
    value: function formatNational(options) {
      return this.format('NATIONAL', options);
    }
  }, {
    key: "formatInternational",
    value: function formatInternational(options) {
      return this.format('INTERNATIONAL', options);
    }
  }, {
    key: "getURI",
    value: function getURI(options) {
      return this.format('RFC3966', options);
    }
  }]);

  return PhoneNumber;
}();



var isCountryCode = function isCountryCode(value) {
  return /^[A-Z]{2}$/.test(value);
};

function getCountryAndCountryCallingCode(countryOrCountryCallingCode, metadataJson) {
  var country;
  var countryCallingCode;
  var metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_3__["default"](metadataJson); // If country code is passed then derive `countryCallingCode` from it.
  // Also store the country code as `.country`.

  if (isCountryCode(countryOrCountryCallingCode)) {
    country = countryOrCountryCallingCode;
    metadata.selectNumberingPlan(country);
    countryCallingCode = metadata.countryCallingCode();
  } else {
    countryCallingCode = countryOrCountryCallingCode;
    /* istanbul ignore if */

    if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
      if (metadata.isNonGeographicCallingCode(countryCallingCode)) {
        country = '001';
      }
    }
  }

  return {
    country: country,
    countryCallingCode: countryCallingCode
  };
}
//# sourceMappingURL=PhoneNumber.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/constants.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MAX_LENGTH_COUNTRY_CODE: () => (/* binding */ MAX_LENGTH_COUNTRY_CODE),
/* harmony export */   MAX_LENGTH_FOR_NSN: () => (/* binding */ MAX_LENGTH_FOR_NSN),
/* harmony export */   MIN_LENGTH_FOR_NSN: () => (/* binding */ MIN_LENGTH_FOR_NSN),
/* harmony export */   PLUS_CHARS: () => (/* binding */ PLUS_CHARS),
/* harmony export */   VALID_DIGITS: () => (/* binding */ VALID_DIGITS),
/* harmony export */   VALID_PUNCTUATION: () => (/* binding */ VALID_PUNCTUATION),
/* harmony export */   WHITESPACE: () => (/* binding */ WHITESPACE)
/* harmony export */ });
// The minimum length of the national significant number.
var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,
// but one can find longer numbers in Germany.

var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.

var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers
// (ascii, fullwidth, arabic-indic, and eastern arabic digits).

var VALID_DIGITS = "0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9"; // `DASHES` will be right after the opening square bracket of the "character class"

var DASHES = "-\u2010-\u2015\u2212\u30FC\uFF0D";
var SLASHES = "\uFF0F/";
var DOTS = "\uFF0E.";
var WHITESPACE = " \xA0\xAD\u200B\u2060\u3000";
var BRACKETS = "()\uFF08\uFF09\uFF3B\uFF3D\\[\\]"; // export const OPENING_BRACKETS = '(\uFF08\uFF3B\\\['

var TILDES = "~\u2053\u223C\uFF5E"; // Regular expression of acceptable punctuation found in phone numbers. This
// excludes punctuation found as a leading character only. This consists of dash
// characters, white space characters, full stops, slashes, square brackets,
// parentheses and tildes. Full-width variants are also present.

var VALID_PUNCTUATION = "".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);
var PLUS_CHARS = "+\uFF0B"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')
//# sourceMappingURL=constants.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/format.js":
/*!******************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/format.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   chooseFormatForNumber: () => (/* binding */ chooseFormatForNumber),
/* harmony export */   "default": () => (/* binding */ formatNumber)
/* harmony export */ });
/* harmony import */ var _helpers_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./helpers/matchesEntirely.js */ "./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js");
/* harmony import */ var _helpers_formatNationalNumberUsingFormat_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/formatNationalNumberUsingFormat.js */ "./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js");
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _helpers_getIddPrefix_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/getIddPrefix.js */ "./node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js");
/* harmony import */ var _helpers_RFC3966_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/RFC3966.js */ "./node_modules/libphonenumber-js/es6/helpers/RFC3966.js");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// This is a port of Google Android `libphonenumber`'s
// `phonenumberutil.js` of December 31th, 2018.
//
// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js





var DEFAULT_OPTIONS = {
  formatExtension: function formatExtension(formattedNumber, extension, metadata) {
    return "".concat(formattedNumber).concat(metadata.ext()).concat(extension);
  }
};
/**
 * Formats a phone number.
 *
 * format(phoneNumberInstance, 'INTERNATIONAL', { ..., v2: true }, metadata)
 * format(phoneNumberInstance, 'NATIONAL', { ..., v2: true }, metadata)
 *
 * format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', { ... }, metadata)
 * format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', undefined, metadata)
 *
 * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.
 * @param  {string} format
 * @param  {object} [options]
 * @param  {object} metadata
 * @return {string}
 */

function formatNumber(input, format, options, metadata) {
  // Apply default options.
  if (options) {
    options = _objectSpread(_objectSpread({}, DEFAULT_OPTIONS), options);
  } else {
    options = DEFAULT_OPTIONS;
  }

  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);

  if (input.country && input.country !== '001') {
    // Validate `input.country`.
    if (!metadata.hasCountry(input.country)) {
      throw new Error("Unknown country: ".concat(input.country));
    }

    metadata.country(input.country);
  } else if (input.countryCallingCode) {
    metadata.selectNumberingPlan(input.countryCallingCode);
  } else return input.phone || '';

  var countryCallingCode = metadata.countryCallingCode();
  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s
  // but Babel has a bug and it says "duplicate variable declaration".

  var number;

  switch (format) {
    case 'NATIONAL':
      // Legacy argument support.
      // (`{ country: ..., phone: '' }`)
      if (!nationalNumber) {
        return '';
      }

      number = formatNationalNumber(nationalNumber, input.carrierCode, 'NATIONAL', metadata, options);
      return addExtension(number, input.ext, metadata, options.formatExtension);

    case 'INTERNATIONAL':
      // Legacy argument support.
      // (`{ country: ..., phone: '' }`)
      if (!nationalNumber) {
        return "+".concat(countryCallingCode);
      }

      number = formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata, options);
      number = "+".concat(countryCallingCode, " ").concat(number);
      return addExtension(number, input.ext, metadata, options.formatExtension);

    case 'E.164':
      // `E.164` doesn't define "phone number extensions".
      return "+".concat(countryCallingCode).concat(nationalNumber);

    case 'RFC3966':
      return (0,_helpers_RFC3966_js__WEBPACK_IMPORTED_MODULE_1__.formatRFC3966)({
        number: "+".concat(countryCallingCode).concat(nationalNumber),
        ext: input.ext
      });
    // For reference, here's Google's IDD formatter:
    // https://github.com/google/libphonenumber/blob/32719cf74e68796788d1ca45abc85dcdc63ba5b9/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L1546
    // Not saying that this IDD formatter replicates it 1:1, but it seems to work.
    // Who would even need to format phone numbers in IDD format anyway?

    case 'IDD':
      if (!options.fromCountry) {
        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')
      }

      var formattedNumber = formatIDD(nationalNumber, input.carrierCode, countryCallingCode, options.fromCountry, metadata);
      return addExtension(formattedNumber, input.ext, metadata, options.formatExtension);

    default:
      throw new Error("Unknown \"format\" argument passed to \"formatNumber()\": \"".concat(format, "\""));
  }
}

function formatNationalNumber(number, carrierCode, formatAs, metadata, options) {
  var format = chooseFormatForNumber(metadata.formats(), number);

  if (!format) {
    return number;
  }

  return (0,_helpers_formatNationalNumberUsingFormat_js__WEBPACK_IMPORTED_MODULE_2__["default"])(number, format, {
    useInternationalFormat: formatAs === 'INTERNATIONAL',
    withNationalPrefix: format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options && options.nationalPrefix === false ? false : true,
    carrierCode: carrierCode,
    metadata: metadata
  });
}

function chooseFormatForNumber(availableFormats, nationalNnumber) {
  for (var _iterator = _createForOfIteratorHelperLoose(availableFormats), _step; !(_step = _iterator()).done;) {
    var format = _step.value;

    // Validate leading digits.
    // The test case for "else path" could be found by searching for
    // "format.leadingDigitsPatterns().length === 0".
    if (format.leadingDigitsPatterns().length > 0) {
      // The last leading_digits_pattern is used here, as it is the most detailed
      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format

      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {
        continue;
      }
    } // Check that the national number matches the phone number format regular expression


    if ((0,_helpers_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_3__["default"])(nationalNnumber, format.pattern())) {
      return format;
    }
  }
}

function addExtension(formattedNumber, ext, metadata, formatExtension) {
  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;
}

function formatIDD(nationalNumber, carrierCode, countryCallingCode, fromCountry, metadata) {
  var fromCountryCallingCode = (0,_metadata_js__WEBPACK_IMPORTED_MODULE_0__.getCountryCallingCode)(fromCountry, metadata.metadata); // When calling within the same country calling code.

  if (fromCountryCallingCode === countryCallingCode) {
    var formattedNumber = formatNationalNumber(nationalNumber, carrierCode, 'NATIONAL', metadata); // For NANPA regions, return the national format for these regions
    // but prefix it with the country calling code.

    if (countryCallingCode === '1') {
      return countryCallingCode + ' ' + formattedNumber;
    } // If regions share a country calling code, the country calling code need
    // not be dialled. This also applies when dialling within a region, so this
    // if clause covers both these cases. Technically this is the case for
    // dialling from La Reunion to other overseas departments of France (French
    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover
    // this edge case for now and for those cases return the version including
    // country calling code. Details here:
    // http://www.petitfute.com/voyage/225-info-pratiques-reunion
    //


    return formattedNumber;
  }

  var iddPrefix = (0,_helpers_getIddPrefix_js__WEBPACK_IMPORTED_MODULE_4__["default"])(fromCountry, undefined, metadata.metadata);

  if (iddPrefix) {
    return "".concat(iddPrefix, " ").concat(countryCallingCode, " ").concat(formatNationalNumber(nationalNumber, null, 'INTERNATIONAL', metadata));
  }
}
//# sourceMappingURL=format.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/RFC3966.js":
/*!***************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/RFC3966.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   formatRFC3966: () => (/* binding */ formatRFC3966),
/* harmony export */   parseRFC3966: () => (/* binding */ parseRFC3966)
/* harmony export */ });
/* harmony import */ var _isViablePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isViablePhoneNumber.js */ "./node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js");
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

 // https://www.ietf.org/rfc/rfc3966.txt

/**
 * @param  {string} text - Phone URI (RFC 3966).
 * @return {object} `{ ?number, ?ext }`.
 */

function parseRFC3966(text) {
  var number;
  var ext; // Replace "tel:" with "tel=" for parsing convenience.

  text = text.replace(/^tel:/, 'tel=');

  for (var _iterator = _createForOfIteratorHelperLoose(text.split(';')), _step; !(_step = _iterator()).done;) {
    var part = _step.value;

    var _part$split = part.split('='),
        _part$split2 = _slicedToArray(_part$split, 2),
        name = _part$split2[0],
        value = _part$split2[1];

    switch (name) {
      case 'tel':
        number = value;
        break;

      case 'ext':
        ext = value;
        break;

      case 'phone-context':
        // Only "country contexts" are supported.
        // "Domain contexts" are ignored.
        if (value[0] === '+') {
          number = value + number;
        }

        break;
    }
  } // If the phone number is not viable, then abort.


  if (!(0,_isViablePhoneNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"])(number)) {
    return {};
  }

  var result = {
    number: number
  };

  if (ext) {
    result.ext = ext;
  }

  return result;
}
/**
 * @param  {object} - `{ ?number, ?extension }`.
 * @return {string} Phone URI (RFC 3966).
 */

function formatRFC3966(_ref) {
  var number = _ref.number,
      ext = _ref.ext;

  if (!number) {
    return '';
  }

  if (number[0] !== '+') {
    throw new Error("\"formatRFC3966()\" expects \"number\" to be in E.164 format.");
  }

  return "tel:".concat(number).concat(ext ? ';ext=' + ext : '');
}
//# sourceMappingURL=RFC3966.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ applyInternationalSeparatorStyle)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");
 // Removes brackets and replaces dashes with spaces.
//
// E.g. "(999) 111-22-33" -> "999 111 22 33"
//
// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.
// Meanwhile, there's no single opinion about using punctuation in international phone numbers.
//
// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.
// And here's a quote from WikiPedia's "North American Numbering Plan" page:
// https://en.wikipedia.org/wiki/North_American_Numbering_Plan
//
// "The country calling code for all countries participating in the NANP is 1.
// In international format, an NANP number should be listed as +1 301 555 01 00,
// where 301 is an area code (Maryland)."
//
// I personally prefer the international format without any punctuation.
// For example, brackets are remnants of the old age, meaning that the
// phone number part in brackets (so called "area code") can be omitted
// if dialing within the same "area".
// And hyphens were clearly introduced for splitting local numbers into memorizable groups.
// For example, remembering "5553535" is difficult but "555-35-35" is much simpler.
// Imagine a man taking a bus from home to work and seeing an ad with a phone number.
// He has a couple of seconds to memorize that number until it passes by.
// If it were spaces instead of hyphens the man wouldn't necessarily get it,
// but with hyphens instead of spaces the grouping is more explicit.
// I personally think that hyphens introduce visual clutter,
// so I prefer replacing them with spaces in international numbers.
// In the modern age all output is done on displays where spaces are clearly distinguishable
// so hyphens can be safely replaced with spaces without losing any legibility.
//

function applyInternationalSeparatorStyle(formattedNumber) {
  return formattedNumber.replace(new RegExp("[".concat(_constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_PUNCTUATION, "]+"), 'g'), ' ').trim();
}
//# sourceMappingURL=applyInternationalSeparatorStyle.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js":
/*!*************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   checkNumberLengthForType: () => (/* binding */ checkNumberLengthForType),
/* harmony export */   "default": () => (/* binding */ checkNumberLength)
/* harmony export */ });
/* harmony import */ var _mergeArrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeArrays.js */ "./node_modules/libphonenumber-js/es6/helpers/mergeArrays.js");

function checkNumberLength(nationalNumber, metadata) {
  return checkNumberLengthForType(nationalNumber, undefined, metadata);
} // Checks whether a number is possible for the country based on its length.
// Should only be called for the "new" metadata which has "possible lengths".

function checkNumberLengthForType(nationalNumber, type, metadata) {
  var type_info = metadata.type(type); // There should always be "<possiblePengths/>" set for every type element.
  // This is declared in the XML schema.
  // For size efficiency, where a sub-description (e.g. fixed-line)
  // has the same "<possiblePengths/>" as the "general description", this is missing,
  // so we fall back to the "general description". Where no numbers of the type
  // exist at all, there is one possible length (-1) which is guaranteed
  // not to match the length of any real phone number.

  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()
  // Metadata before version `1.0.18` didn't contain `possible_lengths`.

  if (!possible_lengths) {
    return 'IS_POSSIBLE';
  }

  if (type === 'FIXED_LINE_OR_MOBILE') {
    // No such country in metadata.

    /* istanbul ignore next */
    if (!metadata.type('FIXED_LINE')) {
      // The rare case has been encountered where no fixedLine data is available
      // (true for some non-geographic entities), so we just check mobile.
      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);
    }

    var mobile_type = metadata.type('MOBILE');

    if (mobile_type) {
      // Merge the mobile data in if there was any. "Concat" creates a new
      // array, it doesn't edit possible_lengths in place, so we don't need a copy.
      // Note that when adding the possible lengths from mobile, we have
      // to again check they aren't empty since if they are this indicates
      // they are the same as the general desc and should be obtained from there.
      possible_lengths = (0,_mergeArrays_js__WEBPACK_IMPORTED_MODULE_0__["default"])(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and
      // re-sort (duplicates are okay). Sorting isn't so expensive because
      // the lists are very small.
      // if (local_lengths) {
      // 	local_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())
      // } else {
      // 	local_lengths = mobile_type.possibleLengthsLocal()
      // }
    }
  } // If the type doesn't exist then return 'INVALID_LENGTH'.
  else if (type && !type_info) {
    return 'INVALID_LENGTH';
  }

  var actual_length = nationalNumber.length; // In `libphonenumber-js` all "local-only" formats are dropped for simplicity.
  // // This is safe because there is never an overlap beween the possible lengths
  // // and the local-only lengths; this is checked at build time.
  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)
  // {
  // 	return 'IS_POSSIBLE_LOCAL_ONLY'
  // }

  var minimum_length = possible_lengths[0];

  if (minimum_length === actual_length) {
    return 'IS_POSSIBLE';
  }

  if (minimum_length > actual_length) {
    return 'TOO_SHORT';
  }

  if (possible_lengths[possible_lengths.length - 1] < actual_length) {
    return 'TOO_LONG';
  } // We skip the first element since we've already checked it.


  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';
}
//# sourceMappingURL=checkNumberLength.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createExtensionPattern)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");
 // The RFC 3966 format for extensions.

var RFC3966_EXTN_PREFIX = ';ext=';
/**
 * Helper method for constructing regular expressions for parsing. Creates
 * an expression that captures up to max_length digits.
 * @return {string} RegEx pattern to capture extension digits.
 */

var getExtensionDigitsPattern = function getExtensionDigitsPattern(maxLength) {
  return "([".concat(_constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS, "]{1,").concat(maxLength, "})");
};
/**
 * Helper initialiser method to create the regular-expression pattern to match
 * extensions.
 * Copy-pasted from Google's `libphonenumber`:
 * https://github.com/google/libphonenumber/blob/55b2646ec9393f4d3d6661b9c82ef9e258e8b829/javascript/i18n/phonenumbers/phonenumberutil.js#L759-L766
 * @return {string} RegEx pattern to capture extensions.
 */


function createExtensionPattern(purpose) {
  // We cap the maximum length of an extension based on the ambiguity of the way
  // the extension is prefixed. As per ITU, the officially allowed length for
  // extensions is actually 40, but we don't support this since we haven't seen real
  // examples and this introduces many false interpretations as the extension labels
  // are not standardized.

  /** @type {string} */
  var extLimitAfterExplicitLabel = '20';
  /** @type {string} */

  var extLimitAfterLikelyLabel = '15';
  /** @type {string} */

  var extLimitAfterAmbiguousChar = '9';
  /** @type {string} */

  var extLimitWhenNotSure = '6';
  /** @type {string} */

  var possibleSeparatorsBetweenNumberAndExtLabel = "[ \xA0\\t,]*"; // Optional full stop (.) or colon, followed by zero or more spaces/tabs/commas.

  /** @type {string} */

  var possibleCharsAfterExtLabel = "[:\\.\uFF0E]?[ \xA0\\t,-]*";
  /** @type {string} */

  var optionalExtnSuffix = "#?"; // Here the extension is called out in more explicit way, i.e mentioning it obvious
  // patterns like "ext.".

  /** @type {string} */

  var explicitExtLabels = "(?:e?xt(?:ensi(?:o\u0301?|\xF3))?n?|\uFF45?\uFF58\uFF54\uFF4E?|\u0434\u043E\u0431|anexo)"; // One-character symbols that can be used to indicate an extension, and less
  // commonly used or more ambiguous extension labels.

  /** @type {string} */

  var ambiguousExtLabels = "(?:[x\uFF58#\uFF03~\uFF5E]|int|\uFF49\uFF4E\uFF54)"; // When extension is not separated clearly.

  /** @type {string} */

  var ambiguousSeparator = "[- ]+"; // This is the same as possibleSeparatorsBetweenNumberAndExtLabel, but not matching
  // comma as extension label may have it.

  /** @type {string} */

  var possibleSeparatorsNumberExtLabelNoComma = "[ \xA0\\t]*"; // ",," is commonly used for auto dialling the extension when connected. First
  // comma is matched through possibleSeparatorsBetweenNumberAndExtLabel, so we do
  // not repeat it here. Semi-colon works in Iphone and Android also to pop up a
  // button with the extension number following.

  /** @type {string} */

  var autoDiallingAndExtLabelsFound = "(?:,{2}|;)";
  /** @type {string} */

  var rfcExtn = RFC3966_EXTN_PREFIX + getExtensionDigitsPattern(extLimitAfterExplicitLabel);
  /** @type {string} */

  var explicitExtn = possibleSeparatorsBetweenNumberAndExtLabel + explicitExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterExplicitLabel) + optionalExtnSuffix;
  /** @type {string} */

  var ambiguousExtn = possibleSeparatorsBetweenNumberAndExtLabel + ambiguousExtLabels + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix;
  /** @type {string} */

  var americanStyleExtnWithSuffix = ambiguousSeparator + getExtensionDigitsPattern(extLimitWhenNotSure) + "#";
  /** @type {string} */

  var autoDiallingExtn = possibleSeparatorsNumberExtLabelNoComma + autoDiallingAndExtLabelsFound + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterLikelyLabel) + optionalExtnSuffix;
  /** @type {string} */

  var onlyCommasExtn = possibleSeparatorsNumberExtLabelNoComma + "(?:,)+" + possibleCharsAfterExtLabel + getExtensionDigitsPattern(extLimitAfterAmbiguousChar) + optionalExtnSuffix; // The first regular expression covers RFC 3966 format, where the extension is added
  // using ";ext=". The second more generic where extension is mentioned with explicit
  // labels like "ext:". In both the above cases we allow more numbers in extension than
  // any other extension labels. The third one captures when single character extension
  // labels or less commonly used labels are used. In such cases we capture fewer
  // extension digits in order to reduce the chance of falsely interpreting two
  // numbers beside each other as a number + extension. The fourth one covers the
  // special case of American numbers where the extension is written with a hash
  // at the end, such as "- 503#". The fifth one is exclusively for extension
  // autodialling formats which are used when dialling and in this case we accept longer
  // extensions. The last one is more liberal on the number of commas that acts as
  // extension labels, so we have a strict cap on the number of digits in such extensions.

  return rfcExtn + "|" + explicitExtn + "|" + ambiguousExtn + "|" + americanStyleExtnWithSuffix + "|" + autoDiallingExtn + "|" + onlyCommasExtn;
}
//# sourceMappingURL=createExtensionPattern.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ extractExtension)
/* harmony export */ });
/* harmony import */ var _createExtensionPattern_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createExtensionPattern.js */ "./node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js");
 // Regexp of all known extension prefixes used by different regions followed by
// 1 or more valid digits, for use when parsing.

var EXTN_PATTERN = new RegExp('(?:' + (0,_createExtensionPattern_js__WEBPACK_IMPORTED_MODULE_0__["default"])() + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is
// connected, usually indicated with extn, ext, x or similar) from the end of
// the number, and returns it.

function extractExtension(number) {
  var start = number.search(EXTN_PATTERN);

  if (start < 0) {
    return {};
  } // If we find a potential extension, and the number preceding this is a viable
  // number, we assume it is an extension.


  var numberWithoutExtension = number.slice(0, start);
  var matches = number.match(EXTN_PATTERN);
  var i = 1;

  while (i < matches.length) {
    if (matches[i]) {
      return {
        number: numberWithoutExtension,
        ext: matches[i]
      };
    }

    i++;
  }
}
//# sourceMappingURL=extractExtension.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ extractCountryCallingCode)
/* harmony export */ });
/* harmony import */ var _stripIddPrefix_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./stripIddPrefix.js */ "./node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js");
/* harmony import */ var _extractCountryCallingCodeFromInternationalNumberWithoutPlusSign_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js */ "./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js");
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");




/**
 * Converts a phone number digits (possibly with a `+`)
 * into a calling code and the rest phone number digits.
 * The "rest phone number digits" could include
 * a national prefix, carrier code, and national
 * (significant) number.
 * @param  {string} number — Phone number digits (possibly with a `+`).
 * @param  {string} [country] — Default country.
 * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).
 * @param  {object} metadata
 * @return {object} `{ countryCallingCodeSource: string?, countryCallingCode: string?, number: string }`
 * @example
 * // Returns `{ countryCallingCode: "1", number: "2133734253" }`.
 * extractCountryCallingCode('2133734253', 'US', null, metadata)
 * extractCountryCallingCode('2133734253', null, '1', metadata)
 * extractCountryCallingCode('+12133734253', null, null, metadata)
 * extractCountryCallingCode('+12133734253', 'RU', null, metadata)
 */

function extractCountryCallingCode(number, country, callingCode, metadata) {
  if (!number) {
    return {};
  }

  var isNumberWithIddPrefix; // If this is not an international phone number,
  // then either extract an "IDD" prefix, or extract a
  // country calling code from a number by autocorrecting it
  // by prepending a leading `+` in cases when it starts
  // with the country calling code.
  // https://wikitravel.org/en/International_dialling_prefix
  // https://github.com/catamphetamine/libphonenumber-js/issues/376

  if (number[0] !== '+') {
    // Convert an "out-of-country" dialing phone number
    // to a proper international phone number.
    var numberWithoutIDD = (0,_stripIddPrefix_js__WEBPACK_IMPORTED_MODULE_0__["default"])(number, country, callingCode, metadata); // If an IDD prefix was stripped then
    // convert the number to international one
    // for subsequent parsing.

    if (numberWithoutIDD && numberWithoutIDD !== number) {
      isNumberWithIddPrefix = true;
      number = '+' + numberWithoutIDD;
    } else {
      // Check to see if the number starts with the country calling code
      // for the default country. If so, we remove the country calling code,
      // and do some checks on the validity of the number before and after.
      // https://github.com/catamphetamine/libphonenumber-js/issues/376
      if (country || callingCode) {
        var _extractCountryCallin = (0,_extractCountryCallingCodeFromInternationalNumberWithoutPlusSign_js__WEBPACK_IMPORTED_MODULE_1__["default"])(number, country, callingCode, metadata),
            countryCallingCode = _extractCountryCallin.countryCallingCode,
            shorterNumber = _extractCountryCallin.number;

        if (countryCallingCode) {
          return {
            countryCallingCodeSource: 'FROM_NUMBER_WITHOUT_PLUS_SIGN',
            countryCallingCode: countryCallingCode,
            number: shorterNumber
          };
        }
      }

      return {
        // No need to set it to `UNSPECIFIED`. It can be just `undefined`.
        // countryCallingCodeSource: 'UNSPECIFIED',
        number: number
      };
    }
  } // Fast abortion: country codes do not begin with a '0'


  if (number[1] === '0') {
    return {};
  }

  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_2__["default"](metadata); // The thing with country phone codes
  // is that they are orthogonal to each other
  // i.e. there's no such country phone code A
  // for which country phone code B exists
  // where B starts with A.
  // Therefore, while scanning digits,
  // if a valid country code is found,
  // that means that it is the country code.
  //

  var i = 2;

  while (i - 1 <= _constants_js__WEBPACK_IMPORTED_MODULE_3__.MAX_LENGTH_COUNTRY_CODE && i <= number.length) {
    var _countryCallingCode = number.slice(1, i);

    if (metadata.hasCallingCode(_countryCallingCode)) {
      metadata.selectNumberingPlan(_countryCallingCode);
      return {
        countryCallingCodeSource: isNumberWithIddPrefix ? 'FROM_NUMBER_WITH_IDD' : 'FROM_NUMBER_WITH_PLUS_SIGN',
        countryCallingCode: _countryCallingCode,
        number: number.slice(i)
      };
    }

    i++;
  }

  return {};
} // The possible values for the returned `countryCallingCodeSource` are:
//
// Copy-pasted from:
// https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto
//
// // The source from which the country_code is derived. This is not set in the
// // general parsing method, but in the method that parses and keeps raw_input.
// // New fields could be added upon request.
// enum CountryCodeSource {
//  // Default value returned if this is not set, because the phone number was
//  // created using parse, not parseAndKeepRawInput. hasCountryCodeSource will
//  // return false if this is the case.
//  UNSPECIFIED = 0;
//
//  // The country_code is derived based on a phone number with a leading "+",
//  // e.g. the French number "+33 1 42 68 53 00".
//  FROM_NUMBER_WITH_PLUS_SIGN = 1;
//
//  // The country_code is derived based on a phone number with a leading IDD,
//  // e.g. the French number "011 33 1 42 68 53 00", as it is dialled from US.
//  FROM_NUMBER_WITH_IDD = 5;
//
//  // The country_code is derived based on a phone number without a leading
//  // "+", e.g. the French number "33 1 42 68 53 00" when defaultCountry is
//  // supplied as France.
//  FROM_NUMBER_WITHOUT_PLUS_SIGN = 10;
//
//  // The country_code is derived NOT based on the phone number itself, but
//  // from the defaultCountry parameter provided in the parsing function by the
//  // clients. This happens mostly for numbers written in the national format
//  // (without country code). For example, this would be set when parsing the
//  // French number "01 42 68 53 00", when defaultCountry is supplied as
//  // France.
//  FROM_DEFAULT_COUNTRY = 20;
// }
//# sourceMappingURL=extractCountryCallingCode.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ extractCountryCallingCodeFromInternationalNumberWithoutPlusSign)
/* harmony export */ });
/* harmony import */ var _getCountryCallingCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../getCountryCallingCode.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _matchesEntirely_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./matchesEntirely.js */ "./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js");
/* harmony import */ var _extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extractNationalNumber.js */ "./node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js");
/* harmony import */ var _checkNumberLength_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkNumberLength.js */ "./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js");





/**
 * Sometimes some people incorrectly input international phone numbers
 * without the leading `+`. This function corrects such input.
 * @param  {string} number — Phone number digits.
 * @param  {string?} country
 * @param  {string?} callingCode
 * @param  {object} metadata
 * @return {object} `{ countryCallingCode: string?, number: string }`.
 */

function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {
  var countryCallingCode = country ? (0,_getCountryCallingCode_js__WEBPACK_IMPORTED_MODULE_0__.getCountryCallingCode)(country, metadata) : callingCode;

  if (number.indexOf(countryCallingCode) === 0) {
    metadata = new _getCountryCallingCode_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);
    metadata.selectNumberingPlan(country, callingCode);
    var possibleShorterNumber = number.slice(countryCallingCode.length);

    var _extractNationalNumbe = (0,_extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_1__["default"])(possibleShorterNumber, metadata),
        possibleShorterNationalNumber = _extractNationalNumbe.nationalNumber;

    var _extractNationalNumbe2 = (0,_extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_1__["default"])(number, metadata),
        nationalNumber = _extractNationalNumbe2.nationalNumber; // If the number was not valid before but is valid now,
    // or if it was too long before, we consider the number
    // with the country calling code stripped to be a better result
    // and keep that instead.
    // For example, in Germany (+49), `49` is a valid area code,
    // so if a number starts with `49`, it could be both a valid
    // national German number or an international number without
    // a leading `+`.


    if (!(0,_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_2__["default"])(nationalNumber, metadata.nationalNumberPattern()) && (0,_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_2__["default"])(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || (0,_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_3__["default"])(nationalNumber, metadata) === 'TOO_LONG') {
      return {
        countryCallingCode: countryCallingCode,
        number: possibleShorterNumber
      };
    }
  }

  return {
    number: number
  };
}
//# sourceMappingURL=extractCountryCallingCodeFromInternationalNumberWithoutPlusSign.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js ***!
  \***************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ extractFormattedPhoneNumberFromPossibleRfc3966NumberUri)
/* harmony export */ });
/* harmony import */ var _extractPhoneContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extractPhoneContext.js */ "./node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js");
/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../ParseError.js */ "./node_modules/libphonenumber-js/es6/ParseError.js");


/**
 * @param  {string} numberToParse
 * @param  {string} nationalNumber
 * @return {}
 */

function extractFormattedPhoneNumberFromPossibleRfc3966NumberUri(numberToParse, _ref) {
  var extractFormattedPhoneNumber = _ref.extractFormattedPhoneNumber;
  var phoneContext = (0,_extractPhoneContext_js__WEBPACK_IMPORTED_MODULE_0__["default"])(numberToParse);

  if (!(0,_extractPhoneContext_js__WEBPACK_IMPORTED_MODULE_0__.isPhoneContextValid)(phoneContext)) {
    throw new _ParseError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('NOT_A_NUMBER');
  }

  var phoneNumberString;

  if (phoneContext === null) {
    // Extract a possible number from the string passed in.
    // (this strips leading characters that could not be the start of a phone number)
    phoneNumberString = extractFormattedPhoneNumber(numberToParse) || '';
  } else {
    phoneNumberString = ''; // If the phone context contains a phone number prefix, we need to capture
    // it, whereas domains will be ignored.

    if (phoneContext.charAt(0) === _extractPhoneContext_js__WEBPACK_IMPORTED_MODULE_0__.PLUS_SIGN) {
      phoneNumberString += phoneContext;
    } // Now append everything between the "tel:" prefix and the phone-context.
    // This should include the national number, an optional extension or
    // isdn-subaddress component. Note we also handle the case when "tel:" is
    // missing, as we have seen in some of the phone number inputs.
    // In that case, we append everything from the beginning.


    var indexOfRfc3966Prefix = numberToParse.indexOf(_extractPhoneContext_js__WEBPACK_IMPORTED_MODULE_0__.RFC3966_PREFIX_);
    var indexOfNationalNumber; // RFC 3966 "tel:" prefix is preset at this stage because
    // `isPhoneContextValid()` requires it to be present.

    /* istanbul ignore else */

    if (indexOfRfc3966Prefix >= 0) {
      indexOfNationalNumber = indexOfRfc3966Prefix + _extractPhoneContext_js__WEBPACK_IMPORTED_MODULE_0__.RFC3966_PREFIX_.length;
    } else {
      indexOfNationalNumber = 0;
    }

    var indexOfPhoneContext = numberToParse.indexOf(_extractPhoneContext_js__WEBPACK_IMPORTED_MODULE_0__.RFC3966_PHONE_CONTEXT_);
    phoneNumberString += numberToParse.substring(indexOfNationalNumber, indexOfPhoneContext);
  } // Delete the isdn-subaddress and everything after it if it is present.
  // Note extension won't appear at the same time with isdn-subaddress
  // according to paragraph 5.3 of the RFC3966 spec.


  var indexOfIsdn = phoneNumberString.indexOf(_extractPhoneContext_js__WEBPACK_IMPORTED_MODULE_0__.RFC3966_ISDN_SUBADDRESS_);

  if (indexOfIsdn > 0) {
    phoneNumberString = phoneNumberString.substring(0, indexOfIsdn);
  } // If both phone context and isdn-subaddress are absent but other
  // parameters are present, the parameters are left in nationalNumber.
  // This is because we are concerned about deleting content from a potential
  // number string when there is no strong evidence that the number is
  // actually written in RFC3966.


  if (phoneNumberString !== '') {
    return phoneNumberString;
  }
}
//# sourceMappingURL=extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ extractNationalNumber)
/* harmony export */ });
/* harmony import */ var _extractNationalNumberFromPossiblyIncompleteNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extractNationalNumberFromPossiblyIncompleteNumber.js */ "./node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js");
/* harmony import */ var _matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./matchesEntirely.js */ "./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js");
/* harmony import */ var _checkNumberLength_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./checkNumberLength.js */ "./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js");



/**
 * Strips national prefix and carrier code from a complete phone number.
 * The difference from the non-"FromCompleteNumber" function is that
 * it won't extract national prefix if the resultant number is too short
 * to be a complete number for the selected phone numbering plan.
 * @param  {string} number — Complete phone number digits.
 * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.
 * @return {object} `{ nationalNumber: string, carrierCode: string? }`.
 */

function extractNationalNumber(number, metadata) {
  // Parsing national prefixes and carrier codes
  // is only required for local phone numbers
  // but some people don't understand that
  // and sometimes write international phone numbers
  // with national prefixes (or maybe even carrier codes).
  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html
  // Google's original library forgives such mistakes
  // and so does this library, because it has been requested:
  // https://github.com/catamphetamine/libphonenumber-js/issues/127
  var _extractNationalNumbe = (0,_extractNationalNumberFromPossiblyIncompleteNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"])(number, metadata),
      carrierCode = _extractNationalNumbe.carrierCode,
      nationalNumber = _extractNationalNumbe.nationalNumber;

  if (nationalNumber !== number) {
    if (!shouldHaveExtractedNationalPrefix(number, nationalNumber, metadata)) {
      // Don't strip the national prefix.
      return {
        nationalNumber: number
      };
    } // Check the national (significant) number length after extracting national prefix and carrier code.
    // Legacy generated metadata (before `1.0.18`) didn't support the "possible lengths" feature.


    if (metadata.possibleLengths()) {
      // The number remaining after stripping the national prefix and carrier code
      // should be long enough to have a possible length for the country.
      // Otherwise, don't strip the national prefix and carrier code,
      // since the original number could be a valid number.
      // This check has been copy-pasted "as is" from Google's original library:
      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250
      // It doesn't check for the "possibility" of the original `number`.
      // I guess it's fine not checking that one. It works as is anyway.
      if (!isPossibleIncompleteNationalNumber(nationalNumber, metadata)) {
        // Don't strip the national prefix.
        return {
          nationalNumber: number
        };
      }
    }
  }

  return {
    nationalNumber: nationalNumber,
    carrierCode: carrierCode
  };
} // In some countries, the same digit could be a national prefix
// or a leading digit of a valid phone number.
// For example, in Russia, national prefix is `8`,
// and also `800 555 35 35` is a valid number
// in which `8` is not a national prefix, but the first digit
// of a national (significant) number.
// Same's with Belarus:
// `82004910060` is a valid national (significant) number,
// but `2004910060` is not.
// To support such cases (to prevent the code from always stripping
// national prefix), a condition is imposed: a national prefix
// is not extracted when the original number is "viable" and the
// resultant number is not, a "viable" national number being the one
// that matches `national_number_pattern`.

function shouldHaveExtractedNationalPrefix(nationalNumberBefore, nationalNumberAfter, metadata) {
  // The equivalent in Google's code is:
  // https://github.com/google/libphonenumber/blob/e326fa1fc4283bb05eb35cb3c15c18f98a31af33/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L2969-L3004
  if ((0,_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nationalNumberBefore, metadata.nationalNumberPattern()) && !(0,_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nationalNumberAfter, metadata.nationalNumberPattern())) {
    return false;
  } // This "is possible" national number (length) check has been commented out
  // because it's superceded by the (effectively) same check done in the
  // `extractNationalNumber()` function after it calls `shouldHaveExtractedNationalPrefix()`.
  // In other words, why run the same check twice if it could only be run once.
  // // Check the national (significant) number length after extracting national prefix and carrier code.
  // // Fixes a minor "weird behavior" bug: https://gitlab.com/catamphetamine/libphonenumber-js/-/issues/57
  // // (Legacy generated metadata (before `1.0.18`) didn't support the "possible lengths" feature).
  // if (metadata.possibleLengths()) {
  // 	if (isPossibleIncompleteNationalNumber(nationalNumberBefore, metadata) &&
  // 		!isPossibleIncompleteNationalNumber(nationalNumberAfter, metadata)) {
  // 		return false
  // 	}
  // }


  return true;
}

function isPossibleIncompleteNationalNumber(nationalNumber, metadata) {
  switch ((0,_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_2__["default"])(nationalNumber, metadata)) {
    case 'TOO_SHORT':
    case 'INVALID_LENGTH':
      // This library ignores "local-only" phone numbers (for simplicity).
      // See the readme for more info on what are "local-only" phone numbers.
      // case 'IS_POSSIBLE_LOCAL_ONLY':
      return false;

    default:
      return true;
  }
}
//# sourceMappingURL=extractNationalNumber.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/extractNationalNumberFromPossiblyIncompleteNumber.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ extractNationalNumberFromPossiblyIncompleteNumber)
/* harmony export */ });
/**
 * Strips any national prefix (such as 0, 1) present in a
 * (possibly incomplete) number provided.
 * "Carrier codes" are only used  in Colombia and Brazil,
 * and only when dialing within those countries from a mobile phone to a fixed line number.
 * Sometimes it won't actually strip national prefix
 * and will instead prepend some digits to the `number`:
 * for example, when number `2345678` is passed with `VI` country selected,
 * it will return `{ number: "3402345678" }`, because `340` area code is prepended.
 * @param {string} number — National number digits.
 * @param {object} metadata — Metadata with country selected.
 * @return {object} `{ nationalNumber: string, nationalPrefix: string? carrierCode: string? }`. Even if a national prefix was extracted, it's not necessarily present in the returned object, so don't rely on its presence in the returned object in order to find out whether a national prefix has been extracted or not.
 */
function extractNationalNumberFromPossiblyIncompleteNumber(number, metadata) {
  if (number && metadata.numberingPlan.nationalPrefixForParsing()) {
    // See METADATA.md for the description of
    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.
    // Attempt to parse the first digits as a national prefix.
    var prefixPattern = new RegExp('^(?:' + metadata.numberingPlan.nationalPrefixForParsing() + ')');
    var prefixMatch = prefixPattern.exec(number);

    if (prefixMatch) {
      var nationalNumber;
      var carrierCode; // https://gitlab.com/catamphetamine/libphonenumber-js/-/blob/master/METADATA.md#national_prefix_for_parsing--national_prefix_transform_rule
      // If a `national_prefix_for_parsing` has any "capturing groups"
      // then it means that the national (significant) number is equal to
      // those "capturing groups" transformed via `national_prefix_transform_rule`,
      // and nothing could be said about the actual national prefix:
      // what is it and was it even there.
      // If a `national_prefix_for_parsing` doesn't have any "capturing groups",
      // then everything it matches is a national prefix.
      // To determine whether `national_prefix_for_parsing` matched any
      // "capturing groups", the value of the result of calling `.exec()`
      // is looked at, and if it has non-undefined values where there're
      // "capturing groups" in the regular expression, then it means
      // that "capturing groups" have been matched.
      // It's not possible to tell whether there'll be any "capturing gropus"
      // before the matching process, because a `national_prefix_for_parsing`
      // could exhibit both behaviors.

      var capturedGroupsCount = prefixMatch.length - 1;
      var hasCapturedGroups = capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount];

      if (metadata.nationalPrefixTransformRule() && hasCapturedGroups) {
        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // If there's more than one captured group,
        // then carrier code is the second one.

        if (capturedGroupsCount > 1) {
          carrierCode = prefixMatch[1];
        }
      } // If there're no "capturing groups",
      // or if there're "capturing groups" but no
      // `national_prefix_transform_rule`,
      // then just strip the national prefix from the number,
      // and possibly a carrier code.
      // Seems like there could be more.
      else {
        // `prefixBeforeNationalNumber` is the whole substring matched by
        // the `national_prefix_for_parsing` regular expression.
        // There seem to be no guarantees that it's just a national prefix.
        // For example, if there's a carrier code, it's gonna be a
        // part of `prefixBeforeNationalNumber` too.
        var prefixBeforeNationalNumber = prefixMatch[0];
        nationalNumber = number.slice(prefixBeforeNationalNumber.length); // If there's at least one captured group,
        // then carrier code is the first one.

        if (hasCapturedGroups) {
          carrierCode = prefixMatch[1];
        }
      } // Tries to guess whether a national prefix was present in the input.
      // This is not something copy-pasted from Google's library:
      // they don't seem to have an equivalent for that.
      // So this isn't an "officially approved" way of doing something like that.
      // But since there seems no other existing method, this library uses it.


      var nationalPrefix;

      if (hasCapturedGroups) {
        var possiblePositionOfTheFirstCapturedGroup = number.indexOf(prefixMatch[1]);
        var possibleNationalPrefix = number.slice(0, possiblePositionOfTheFirstCapturedGroup); // Example: an Argentinian (AR) phone number `0111523456789`.
        // `prefixMatch[0]` is `01115`, and `$1` is `11`,
        // and the rest of the phone number is `23456789`.
        // The national number is transformed via `9$1` to `91123456789`.
        // National prefix `0` is detected being present at the start.
        // if (possibleNationalPrefix.indexOf(metadata.numberingPlan.nationalPrefix()) === 0) {

        if (possibleNationalPrefix === metadata.numberingPlan.nationalPrefix()) {
          nationalPrefix = metadata.numberingPlan.nationalPrefix();
        }
      } else {
        nationalPrefix = prefixMatch[0];
      }

      return {
        nationalNumber: nationalNumber,
        nationalPrefix: nationalPrefix,
        carrierCode: carrierCode
      };
    }
  }

  return {
    nationalNumber: number
  };
}
//# sourceMappingURL=extractNationalNumberFromPossiblyIncompleteNumber.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js":
/*!***************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/extractPhoneContext.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PLUS_SIGN: () => (/* binding */ PLUS_SIGN),
/* harmony export */   RFC3966_ISDN_SUBADDRESS_: () => (/* binding */ RFC3966_ISDN_SUBADDRESS_),
/* harmony export */   RFC3966_PHONE_CONTEXT_: () => (/* binding */ RFC3966_PHONE_CONTEXT_),
/* harmony export */   RFC3966_PREFIX_: () => (/* binding */ RFC3966_PREFIX_),
/* harmony export */   "default": () => (/* binding */ extractPhoneContext),
/* harmony export */   isPhoneContextValid: () => (/* binding */ isPhoneContextValid)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");
// When phone numbers are written in `RFC3966` format — `"tel:+12133734253"` —
// they can have their "calling code" part written separately in a `phone-context` parameter.
// Example: `"tel:12133734253;phone-context=+1"`.
// This function parses the full phone number from the local number and the `phone-context`
// when the `phone-context` contains a `+` sign.

var PLUS_SIGN = '+';
var RFC3966_VISUAL_SEPARATOR_ = '[\\-\\.\\(\\)]?';
var RFC3966_PHONE_DIGIT_ = '(' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']' + '|' + RFC3966_VISUAL_SEPARATOR_ + ')';
var RFC3966_GLOBAL_NUMBER_DIGITS_ = '^' + '\\' + PLUS_SIGN + RFC3966_PHONE_DIGIT_ + '*' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']' + RFC3966_PHONE_DIGIT_ + '*' + '$';
/**
 * Regular expression of valid global-number-digits for the phone-context
 * parameter, following the syntax defined in RFC3966.
 */

var RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_ = new RegExp(RFC3966_GLOBAL_NUMBER_DIGITS_, 'g'); // In this port of Google's library, we don't accept alpha characters in phone numbers.
// const ALPHANUM_ = VALID_ALPHA_ + VALID_DIGITS

var ALPHANUM_ = _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS;
var RFC3966_DOMAINLABEL_ = '[' + ALPHANUM_ + ']+((\\-)*[' + ALPHANUM_ + '])*';
var VALID_ALPHA_ = 'a-zA-Z';
var RFC3966_TOPLABEL_ = '[' + VALID_ALPHA_ + ']+((\\-)*[' + ALPHANUM_ + '])*';
var RFC3966_DOMAINNAME_ = '^(' + RFC3966_DOMAINLABEL_ + '\\.)*' + RFC3966_TOPLABEL_ + '\\.?$';
/**
 * Regular expression of valid domainname for the phone-context parameter,
 * following the syntax defined in RFC3966.
 */

var RFC3966_DOMAINNAME_PATTERN_ = new RegExp(RFC3966_DOMAINNAME_, 'g');
var RFC3966_PREFIX_ = 'tel:';
var RFC3966_PHONE_CONTEXT_ = ';phone-context=';
var RFC3966_ISDN_SUBADDRESS_ = ';isub=';
/**
 * Extracts the value of the phone-context parameter of `numberToExtractFrom`,
 * following the syntax defined in RFC3966.
 *
 * @param {string} numberToExtractFrom
 * @return {string|null} the extracted string (possibly empty), or `null` if no phone-context parameter is found.
 */

function extractPhoneContext(numberToExtractFrom) {
  var indexOfPhoneContext = numberToExtractFrom.indexOf(RFC3966_PHONE_CONTEXT_); // If no phone-context parameter is present

  if (indexOfPhoneContext < 0) {
    return null;
  }

  var phoneContextStart = indexOfPhoneContext + RFC3966_PHONE_CONTEXT_.length; // If phone-context parameter is empty

  if (phoneContextStart >= numberToExtractFrom.length) {
    return '';
  }

  var phoneContextEnd = numberToExtractFrom.indexOf(';', phoneContextStart); // If phone-context is not the last parameter

  if (phoneContextEnd >= 0) {
    return numberToExtractFrom.substring(phoneContextStart, phoneContextEnd);
  } else {
    return numberToExtractFrom.substring(phoneContextStart);
  }
}
/**
 * Returns whether the value of phoneContext follows the syntax defined in RFC3966.
 *
 * @param {string|null} phoneContext
 * @return {boolean}
 */

function isPhoneContextValid(phoneContext) {
  if (phoneContext === null) {
    return true;
  }

  if (phoneContext.length === 0) {
    return false;
  } // Does phone-context value match pattern of global-number-digits or domainname.


  return RFC3966_GLOBAL_NUMBER_DIGITS_PATTERN_.test(phoneContext) || RFC3966_DOMAINNAME_PATTERN_.test(phoneContext);
}
//# sourceMappingURL=extractPhoneContext.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/formatNationalNumberUsingFormat.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FIRST_GROUP_PATTERN: () => (/* binding */ FIRST_GROUP_PATTERN),
/* harmony export */   "default": () => (/* binding */ formatNationalNumberUsingFormat)
/* harmony export */ });
/* harmony import */ var _applyInternationalSeparatorStyle_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./applyInternationalSeparatorStyle.js */ "./node_modules/libphonenumber-js/es6/helpers/applyInternationalSeparatorStyle.js");
 // This was originally set to $1 but there are some countries for which the
// first group is not used in the national pattern (e.g. Argentina) so the $1
// group does not match correctly. Therefore, we use `\d`, so that the first
// group actually used in the pattern will be matched.

var FIRST_GROUP_PATTERN = /(\$\d)/;
function formatNationalNumberUsingFormat(number, format, _ref) {
  var useInternationalFormat = _ref.useInternationalFormat,
      withNationalPrefix = _ref.withNationalPrefix,
      carrierCode = _ref.carrierCode,
      metadata = _ref.metadata;
  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalFormat ? format.internationalFormat() : // This library doesn't use `domestic_carrier_code_formatting_rule`,
  // because that one is only used when formatting phone numbers
  // for dialing from a mobile phone, and this is not a dialing library.
  // carrierCode && format.domesticCarrierCodeFormattingRule()
  // 	// First, replace the $CC in the formatting rule with the desired carrier code.
  // 	// Then, replace the $FG in the formatting rule with the first group
  // 	// and the carrier code combined in the appropriate way.
  // 	? format.format().replace(FIRST_GROUP_PATTERN, format.domesticCarrierCodeFormattingRule().replace('$CC', carrierCode))
  // 	: (
  // 		withNationalPrefix && format.nationalPrefixFormattingRule()
  // 			? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())
  // 			: format.format()
  // 	)
  withNationalPrefix && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());

  if (useInternationalFormat) {
    return (0,_applyInternationalSeparatorStyle_js__WEBPACK_IMPORTED_MODULE_0__["default"])(formattedNumber);
  }

  return formattedNumber;
}
//# sourceMappingURL=formatNationalNumberUsingFormat.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCountryByCallingCode)
/* harmony export */ });
/* harmony import */ var _getCountryByNationalNumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getCountryByNationalNumber.js */ "./node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js");

var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false;
function getCountryByCallingCode(callingCode, nationalPhoneNumber, metadata) {
  /* istanbul ignore if */
  if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
    if (metadata.isNonGeographicCallingCode(callingCode)) {
      return '001';
    }
  }

  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);

  if (!possibleCountries) {
    return;
  } // If there's just one country corresponding to the country code,
  // then just return it, without further phone number digits validation.


  if (possibleCountries.length === 1) {
    return possibleCountries[0];
  }

  return (0,_getCountryByNationalNumber_js__WEBPACK_IMPORTED_MODULE_0__["default"])(possibleCountries, nationalPhoneNumber, metadata.metadata);
}
//# sourceMappingURL=getCountryByCallingCode.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/getCountryByNationalNumber.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getCountryByNationalNumber)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _getNumberType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getNumberType.js */ "./node_modules/libphonenumber-js/es6/helpers/getNumberType.js");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



function getCountryByNationalNumber(possibleCountries, nationalPhoneNumber, metadata) {
  // Re-create `metadata` because it will be selecting a `country`.
  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);

  for (var _iterator = _createForOfIteratorHelperLoose(possibleCountries), _step; !(_step = _iterator()).done;) {
    var country = _step.value;
    metadata.country(country); // "Leading digits" patterns are only defined for about 20% of all countries.
    // By definition, matching "leading digits" is a sufficient but not a necessary
    // condition for a phone number to belong to a country.
    // The point of "leading digits" check is that it's the fastest one to get a match.
    // https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md#leading_digits

    if (metadata.leadingDigits()) {
      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {
        return country;
      }
    } // Else perform full validation with all of those
    // fixed-line/mobile/etc regular expressions.
    else if ((0,_getNumberType_js__WEBPACK_IMPORTED_MODULE_1__["default"])({
      phone: nationalPhoneNumber,
      country: country
    }, undefined, metadata.metadata)) {
      return country;
    }
  }
}
//# sourceMappingURL=getCountryByNationalNumber.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js":
/*!********************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/getIddPrefix.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getIddPrefix)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");

/**
 * Pattern that makes it easy to distinguish whether a region has a single
 * international dialing prefix or not. If a region has a single international
 * prefix (e.g. 011 in USA), it will be represented as a string that contains
 * a sequence of ASCII digits, and possibly a tilde, which signals waiting for
 * the tone. If there are multiple available international prefixes in a
 * region, they will be represented as a regex string that always contains one
 * or more characters that are not ASCII digits or a tilde.
 */

var SINGLE_IDD_PREFIX_REG_EXP = /^[\d]+(?:[~\u2053\u223C\uFF5E][\d]+)?$/; // For regions that have multiple IDD prefixes
// a preferred IDD prefix is returned.

function getIddPrefix(country, callingCode, metadata) {
  var countryMetadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);
  countryMetadata.selectNumberingPlan(country, callingCode);

  if (countryMetadata.defaultIDDPrefix()) {
    return countryMetadata.defaultIDDPrefix();
  }

  if (SINGLE_IDD_PREFIX_REG_EXP.test(countryMetadata.IDDPrefix())) {
    return countryMetadata.IDDPrefix();
  }
}
//# sourceMappingURL=getIddPrefix.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/getNumberType.js":
/*!*********************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/getNumberType.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getNumberType),
/* harmony export */   isNumberTypeEqualTo: () => (/* binding */ isNumberTypeEqualTo)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./matchesEntirely.js */ "./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }



var NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)

function getNumberType(input, options, metadata) {
  // If assigning the `{}` default value is moved to the arguments above,
  // code coverage would decrease for some weird reason.
  options = options || {}; // When `parse()` returned `{}`
  // meaning that the phone number is not a valid one.

  if (!input.country) {
    return;
  }

  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);
  metadata.selectNumberingPlan(input.country, input.countryCallingCode);
  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:
  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835
  // Is this national number even valid for this country

  if (!(0,_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nationalNumber, metadata.nationalNumberPattern())) {
    return;
  } // Is it fixed line number


  if (isNumberTypeEqualTo(nationalNumber, 'FIXED_LINE', metadata)) {
    // Because duplicate regular expressions are removed
    // to reduce metadata size, if "mobile" pattern is ""
    // then it means it was removed due to being a duplicate of the fixed-line pattern.
    //
    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {
      return 'FIXED_LINE_OR_MOBILE';
    } // `MOBILE` type pattern isn't included if it matched `FIXED_LINE` one.
    // For example, for "US" country.
    // Old metadata (< `1.0.18`) had a specific "types" data structure
    // that happened to be `undefined` for `MOBILE` in that case.
    // Newer metadata (>= `1.0.18`) has another data structure that is
    // not `undefined` for `MOBILE` in that case (it's just an empty array).
    // So this `if` is just for backwards compatibility with old metadata.


    if (!metadata.type('MOBILE')) {
      return 'FIXED_LINE_OR_MOBILE';
    } // Check if the number happens to qualify as both fixed line and mobile.
    // (no such country in the minimal metadata set)

    /* istanbul ignore if */


    if (isNumberTypeEqualTo(nationalNumber, 'MOBILE', metadata)) {
      return 'FIXED_LINE_OR_MOBILE';
    }

    return 'FIXED_LINE';
  }

  for (var _iterator = _createForOfIteratorHelperLoose(NON_FIXED_LINE_PHONE_TYPES), _step; !(_step = _iterator()).done;) {
    var type = _step.value;

    if (isNumberTypeEqualTo(nationalNumber, type, metadata)) {
      return type;
    }
  }
}
function isNumberTypeEqualTo(nationalNumber, type, metadata) {
  type = metadata.type(type);

  if (!type || !type.pattern()) {
    return false;
  } // Check if any possible number lengths are present;
  // if so, we use them to avoid checking
  // the validation pattern if they don't match.
  // If they are absent, this means they match
  // the general description, which we have
  // already checked before a specific number type.


  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {
    return false;
  }

  return (0,_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nationalNumber, type.pattern());
}
//# sourceMappingURL=getNumberType.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/getPossibleCountriesForNumber.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ getPossibleCountriesForNumber)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");

/**
 * Returns a list of countries that the phone number could potentially belong to.
 * @param  {string} callingCode — Calling code.
 * @param  {string} nationalNumber — National (significant) number.
 * @param  {object} metadata — Metadata.
 * @return {string[]} A list of possible countries.
 */

function getPossibleCountriesForNumber(callingCode, nationalNumber, metadata) {
  var _metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);

  var possibleCountries = _metadata.getCountryCodesForCallingCode(callingCode);

  if (!possibleCountries) {
    return [];
  }

  return possibleCountries.filter(function (country) {
    return couldNationalNumberBelongToCountry(nationalNumber, country, metadata);
  });
}

function couldNationalNumberBelongToCountry(nationalNumber, country, metadata) {
  var _metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);

  _metadata.selectNumberingPlan(country);

  if (_metadata.numberingPlan.possibleLengths().indexOf(nationalNumber.length) >= 0) {
    return true;
  }

  return false;
}
//# sourceMappingURL=getPossibleCountriesForNumber.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js":
/*!***************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   VALID_PHONE_NUMBER: () => (/* binding */ VALID_PHONE_NUMBER),
/* harmony export */   VALID_PHONE_NUMBER_WITH_EXTENSION: () => (/* binding */ VALID_PHONE_NUMBER_WITH_EXTENSION),
/* harmony export */   "default": () => (/* binding */ isViablePhoneNumber),
/* harmony export */   isViablePhoneNumberStart: () => (/* binding */ isViablePhoneNumberStart)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");
/* harmony import */ var _extension_createExtensionPattern_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./extension/createExtensionPattern.js */ "./node_modules/libphonenumber-js/es6/helpers/extension/createExtensionPattern.js");

 //  Regular expression of viable phone numbers. This is location independent.
//  Checks we have at least three leading digits, and only valid punctuation,
//  alpha characters and digits in the phone number. Does not include extension
//  data. The symbol 'x' is allowed here as valid punctuation since it is often
//  used as a placeholder for carrier codes, for example in Brazilian phone
//  numbers. We also allow multiple '+' characters at the start.
//
//  Corresponds to the following:
//  [digits]{minLengthNsn}|
//  plus_sign*
//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*
//
//  The first reg-ex is to allow short numbers (two digits long) to be parsed if
//  they are entered as "15" etc, but only if there is no punctuation in them.
//  The second expression restricts the number of digits to three or more, but
//  then allows them to be in international form, and to have alpha-characters
//  and punctuation. We split up the two reg-exes here and combine them when
//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it
//  with ^ and append $ to each branch.
//
//  "Note VALID_PUNCTUATION starts with a -,
//   so must be the first in the range" (c) Google devs.
//  (wtf did they mean by saying that; probably nothing)
//

var MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']{' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.MIN_LENGTH_FOR_NSN + '}'; //
// And this is the second reg-exp:
// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)
//

var VALID_PHONE_NUMBER = '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PLUS_CHARS + ']{0,1}' + '(?:' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_PUNCTUATION + ']*' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']' + '){3,}' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_PUNCTUATION + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']*'; // This regular expression isn't present in Google's `libphonenumber`
// and is only used to determine whether the phone number being input
// is too short for it to even consider it a "valid" number.
// This is just a way to differentiate between a really invalid phone
// number like "abcde" and a valid phone number that a user has just
// started inputting, like "+1" or "1": both these cases would be
// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this
// library can provide a more detailed error message — whether it's
// really "not a number", or is it just a start of a valid phone number.

var VALID_PHONE_NUMBER_START_REG_EXP = new RegExp('^' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PLUS_CHARS + ']{0,1}' + '(?:' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_PUNCTUATION + ']*' + '[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']' + '){1,2}' + '$', 'i');
var VALID_PHONE_NUMBER_WITH_EXTENSION = VALID_PHONE_NUMBER + // Phone number extensions
'(?:' + (0,_extension_createExtensionPattern_js__WEBPACK_IMPORTED_MODULE_1__["default"])() + ')?'; // The combined regular expression for valid phone numbers:
//

var VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number
'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)
'^' + VALID_PHONE_NUMBER_WITH_EXTENSION + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at
// all. At the moment, checks to see that the string begins with at least 2
// digits, ignoring any punctuation commonly found in phone numbers. This method
// does not require the number to be normalized in advance - but does assume
// that leading non-number symbols have been removed, such as by the method
// `extract_possible_number`.
//

function isViablePhoneNumber(number) {
  return number.length >= _constants_js__WEBPACK_IMPORTED_MODULE_0__.MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);
} // This is just a way to differentiate between a really invalid phone
// number like "abcde" and a valid phone number that a user has just
// started inputting, like "+1" or "1": both these cases would be
// considered `NOT_A_NUMBER` by Google's `libphonenumber`, but this
// library can provide a more detailed error message — whether it's
// really "not a number", or is it just a start of a valid phone number.

function isViablePhoneNumberStart(number) {
  return VALID_PHONE_NUMBER_START_REG_EXP.test(number);
}
//# sourceMappingURL=isViablePhoneNumber.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js":
/*!***********************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ matchesEntirely)
/* harmony export */ });
/**
 * Checks whether the entire input sequence can be matched
 * against the regular expression.
 * @return {boolean}
 */
function matchesEntirely(text, regular_expression) {
  // If assigning the `''` default value is moved to the arguments above,
  // code coverage would decrease for some weird reason.
  text = text || '';
  return new RegExp('^(?:' + regular_expression + ')$').test(text);
}
//# sourceMappingURL=matchesEntirely.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/mergeArrays.js":
/*!*******************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/mergeArrays.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeArrays)
/* harmony export */ });
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/**
 * Merges two arrays.
 * @param  {*} a
 * @param  {*} b
 * @return {*}
 */
function mergeArrays(a, b) {
  var merged = a.slice();

  for (var _iterator = _createForOfIteratorHelperLoose(b), _step; !(_step = _iterator()).done;) {
    var element = _step.value;

    if (a.indexOf(element) < 0) {
      merged.push(element);
    }
  }

  return merged.sort(function (a, b) {
    return a - b;
  }); // ES6 version, requires Set polyfill.
  // let merged = new Set(a)
  // for (const element of b) {
  // 	merged.add(i)
  // }
  // return Array.from(merged).sort((a, b) => a - b)
}
//# sourceMappingURL=mergeArrays.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/parseDigits.js":
/*!*******************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/parseDigits.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   DIGITS: () => (/* binding */ DIGITS),
/* harmony export */   "default": () => (/* binding */ parseDigits),
/* harmony export */   parseDigit: () => (/* binding */ parseDigit)
/* harmony export */ });
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

// These mappings map a character (key) to a specific digit that should
// replace it for normalization purposes. Non-European digits that
// may be used in phone numbers are mapped to a European equivalent.
//
// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.
//
var DIGITS = {
  '0': '0',
  '1': '1',
  '2': '2',
  '3': '3',
  '4': '4',
  '5': '5',
  '6': '6',
  '7': '7',
  '8': '8',
  '9': '9',
  "\uFF10": '0',
  // Fullwidth digit 0
  "\uFF11": '1',
  // Fullwidth digit 1
  "\uFF12": '2',
  // Fullwidth digit 2
  "\uFF13": '3',
  // Fullwidth digit 3
  "\uFF14": '4',
  // Fullwidth digit 4
  "\uFF15": '5',
  // Fullwidth digit 5
  "\uFF16": '6',
  // Fullwidth digit 6
  "\uFF17": '7',
  // Fullwidth digit 7
  "\uFF18": '8',
  // Fullwidth digit 8
  "\uFF19": '9',
  // Fullwidth digit 9
  "\u0660": '0',
  // Arabic-indic digit 0
  "\u0661": '1',
  // Arabic-indic digit 1
  "\u0662": '2',
  // Arabic-indic digit 2
  "\u0663": '3',
  // Arabic-indic digit 3
  "\u0664": '4',
  // Arabic-indic digit 4
  "\u0665": '5',
  // Arabic-indic digit 5
  "\u0666": '6',
  // Arabic-indic digit 6
  "\u0667": '7',
  // Arabic-indic digit 7
  "\u0668": '8',
  // Arabic-indic digit 8
  "\u0669": '9',
  // Arabic-indic digit 9
  "\u06F0": '0',
  // Eastern-Arabic digit 0
  "\u06F1": '1',
  // Eastern-Arabic digit 1
  "\u06F2": '2',
  // Eastern-Arabic digit 2
  "\u06F3": '3',
  // Eastern-Arabic digit 3
  "\u06F4": '4',
  // Eastern-Arabic digit 4
  "\u06F5": '5',
  // Eastern-Arabic digit 5
  "\u06F6": '6',
  // Eastern-Arabic digit 6
  "\u06F7": '7',
  // Eastern-Arabic digit 7
  "\u06F8": '8',
  // Eastern-Arabic digit 8
  "\u06F9": '9' // Eastern-Arabic digit 9

};
function parseDigit(character) {
  return DIGITS[character];
}
/**
 * Parses phone number digits from a string.
 * Drops all punctuation leaving only digits.
 * Also converts wide-ascii and arabic-indic numerals to conventional numerals.
 * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.
 * @param  {string} string
 * @return {string}
 * @example
 * ```js
 * parseDigits('8 (800) 555')
 * // Outputs '8800555'.
 * ```
 */

function parseDigits(string) {
  var result = ''; // Using `.split('')` here instead of normal `for ... of`
  // because the importing application doesn't neccessarily include an ES6 polyfill.
  // The `.split('')` approach discards "exotic" UTF-8 characters
  // (the ones consisting of four bytes) but digits
  // (including non-European ones) don't fall into that range
  // so such "exotic" characters would be discarded anyway.

  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {
    var character = _step.value;
    var digit = parseDigit(character);

    if (digit) {
      result += digit;
    }
  }

  return result;
}
//# sourceMappingURL=parseDigits.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js":
/*!**********************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/helpers/stripIddPrefix.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ stripIddPrefix)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");


var CAPTURING_DIGIT_PATTERN = new RegExp('([' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + '])');
function stripIddPrefix(number, country, callingCode, metadata) {
  if (!country) {
    return;
  } // Check if the number is IDD-prefixed.


  var countryMetadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_1__["default"](metadata);
  countryMetadata.selectNumberingPlan(country, callingCode);
  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());

  if (number.search(IDDPrefixPattern) !== 0) {
    return;
  } // Strip IDD prefix.


  number = number.slice(number.match(IDDPrefixPattern)[0].length); // If there're any digits after an IDD prefix,
  // then those digits are a country calling code.
  // Since no country code starts with a `0`,
  // the code below validates that the next digit (if present) is not `0`.

  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);

  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {
    if (matchedGroups[1] === '0') {
      return;
    }
  }

  return number;
}
//# sourceMappingURL=stripIddPrefix.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/isPossible.js":
/*!**********************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/isPossible.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isPossiblePhoneNumber),
/* harmony export */   isPossibleNumber: () => (/* binding */ isPossibleNumber)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _helpers_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/checkNumberLength.js */ "./node_modules/libphonenumber-js/es6/helpers/checkNumberLength.js");


/**
 * Checks if a phone number is "possible" (basically just checks its length).
 *
 * isPossible(phoneNumberInstance, { ..., v2: true }, metadata)
 *
 * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)
 * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)
 *
 * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.
 * @param  {object} [options]
 * @param  {object} metadata
 * @return {string}
 */

function isPossiblePhoneNumber(input, options, metadata) {
  /* istanbul ignore if */
  if (options === undefined) {
    options = {};
  }

  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);

  if (options.v2) {
    if (!input.countryCallingCode) {
      throw new Error('Invalid phone number object passed');
    }

    metadata.selectNumberingPlan(input.countryCallingCode);
  } else {
    if (!input.phone) {
      return false;
    }

    if (input.country) {
      if (!metadata.hasCountry(input.country)) {
        throw new Error("Unknown country: ".concat(input.country));
      }

      metadata.country(input.country);
    } else {
      if (!input.countryCallingCode) {
        throw new Error('Invalid phone number object passed');
      }

      metadata.selectNumberingPlan(input.countryCallingCode);
    }
  } // Old metadata (< 1.0.18) had no "possible length" data.


  if (metadata.possibleLengths()) {
    return isPossibleNumber(input.phone || input.nationalNumber, metadata);
  } else {
    // There was a bug between `1.7.35` and `1.7.37` where "possible_lengths"
    // were missing for "non-geographical" numbering plans.
    // Just assume the number is possible in such cases:
    // it's unlikely that anyone generated their custom metadata
    // in that short period of time (one day).
    // This code can be removed in some future major version update.
    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {
      // "Non-geographic entities" did't have `possibleLengths`
      // due to a bug in metadata generation process.
      return true;
    } else {
      throw new Error('Missing "possibleLengths" in metadata. Perhaps the metadata has been generated before v1.0.18.');
    }
  }
}
function isPossibleNumber(nationalNumber, metadata) {
  //, isInternational) {
  switch ((0,_helpers_checkNumberLength_js__WEBPACK_IMPORTED_MODULE_1__["default"])(nationalNumber, metadata)) {
    case 'IS_POSSIBLE':
      return true;
    // This library ignores "local-only" phone numbers (for simplicity).
    // See the readme for more info on what are "local-only" phone numbers.
    // case 'IS_POSSIBLE_LOCAL_ONLY':
    // 	return !isInternational

    default:
      return false;
  }
}
//# sourceMappingURL=isPossible.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/isValid.js":
/*!*******************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/isValid.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isValidNumber)
/* harmony export */ });
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _helpers_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers/matchesEntirely.js */ "./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js");
/* harmony import */ var _helpers_getNumberType_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/getNumberType.js */ "./node_modules/libphonenumber-js/es6/helpers/getNumberType.js");



/**
 * Checks if a given phone number is valid.
 *
 * isValid(phoneNumberInstance, { ..., v2: true }, metadata)
 *
 * isPossible({ phone: '8005553535', country: 'RU' }, { ... }, metadata)
 * isPossible({ phone: '8005553535', country: 'RU' }, undefined, metadata)
 *
 * If the `number` is a string, it will be parsed to an object,
 * but only if it contains only valid phone number characters (including punctuation).
 * If the `number` is an object, it is used as is.
 *
 * The optional `defaultCountry` argument is the default country.
 * I.e. it does not restrict to just that country,
 * e.g. in those cases where several countries share
 * the same phone numbering rules (NANPA, Britain, etc).
 * For example, even though the number `07624 369230`
 * belongs to the Isle of Man ("IM" country code)
 * calling `isValidNumber('07624369230', 'GB', metadata)`
 * still returns `true` because the country is not restricted to `GB`,
 * it's just that `GB` is the default one for the phone numbering rules.
 * For restricting the country see `isValidNumberForRegion()`
 * though restricting a country might not be a good idea.
 * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion
 *
 * Examples:
 *
 * ```js
 * isValidNumber('+78005553535', metadata)
 * isValidNumber('8005553535', 'RU', metadata)
 * isValidNumber('88005553535', 'RU', metadata)
 * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)
 * ```
 */

function isValidNumber(input, options, metadata) {
  // If assigning the `{}` default value is moved to the arguments above,
  // code coverage would decrease for some weird reason.
  options = options || {};
  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_0__["default"](metadata);
  /**
   * Checks if a phone number is "possible" (basically just checks its length).
   *
   * @param  {object|PhoneNumber} input — If `options.v2: true` flag is passed, the `input` should be a `PhoneNumber` instance. Otherwise, it should be an object of shape `{ phone: '...', country: '...' }`.
   * @param  {object} [options]
   * @param  {object} metadata
   * @return {string}
   */

  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for
  // distinguishing different countries having the same `countryCallingCode`.

  if (metadata.hasTypes()) {
    return (0,_helpers_getNumberType_js__WEBPACK_IMPORTED_MODULE_1__["default"])(input, options, metadata.metadata) !== undefined;
  } // If there are no type regexps for this country in metadata then use
  // `nationalNumberPattern` as a "better than nothing" replacement.


  var nationalNumber = options.v2 ? input.nationalNumber : input.phone;
  return (0,_helpers_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_2__["default"])(nationalNumber, metadata.nationalNumberPattern());
}
//# sourceMappingURL=isValid.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/isValidPhoneNumber.js":
/*!******************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/isValidPhoneNumber.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isValidPhoneNumber)
/* harmony export */ });
/* harmony import */ var _normalizeArguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./normalizeArguments.js */ "./node_modules/libphonenumber-js/es6/normalizeArguments.js");
/* harmony import */ var _parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsePhoneNumber_.js */ "./node_modules/libphonenumber-js/es6/parsePhoneNumber_.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



function isValidPhoneNumber() {
  var _normalizeArguments = (0,_normalizeArguments_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arguments),
      text = _normalizeArguments.text,
      options = _normalizeArguments.options,
      metadata = _normalizeArguments.metadata;

  options = _objectSpread(_objectSpread({}, options), {}, {
    extract: false
  });
  var phoneNumber = (0,_parsePhoneNumber_js__WEBPACK_IMPORTED_MODULE_1__["default"])(text, options, metadata);
  return phoneNumber && phoneNumber.isValid() || false;
}
//# sourceMappingURL=isValidPhoneNumber.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/metadata.js":
/*!********************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/metadata.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Metadata),
/* harmony export */   getCountryCallingCode: () => (/* binding */ getCountryCallingCode),
/* harmony export */   getExtPrefix: () => (/* binding */ getExtPrefix),
/* harmony export */   isSupportedCountry: () => (/* binding */ isSupportedCountry),
/* harmony export */   validateMetadata: () => (/* binding */ validateMetadata)
/* harmony export */ });
/* harmony import */ var _tools_semver_compare_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tools/semver-compare.js */ "./node_modules/libphonenumber-js/es6/tools/semver-compare.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

 // Added "possibleLengths" and renamed
// "country_phone_code_to_countries" to "country_calling_codes".

var V2 = '1.0.18'; // Added "idd_prefix" and "default_idd_prefix".

var V3 = '1.2.0'; // Moved `001` country code to "nonGeographic" section of metadata.

var V4 = '1.7.35';
var DEFAULT_EXT_PREFIX = ' ext. ';
var CALLING_CODE_REG_EXP = /^\d+$/;
/**
 * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md
 */

var Metadata = /*#__PURE__*/function () {
  function Metadata(metadata) {
    _classCallCheck(this, Metadata);

    validateMetadata(metadata);
    this.metadata = metadata;
    setVersion.call(this, metadata);
  }

  _createClass(Metadata, [{
    key: "getCountries",
    value: function getCountries() {
      return Object.keys(this.metadata.countries).filter(function (_) {
        return _ !== '001';
      });
    }
  }, {
    key: "getCountryMetadata",
    value: function getCountryMetadata(countryCode) {
      return this.metadata.countries[countryCode];
    }
  }, {
    key: "nonGeographic",
    value: function nonGeographic() {
      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.
      // It's present in metadata generated from `1.7.35` to `1.7.37`.
      // The test case could be found by searching for "nonGeographical".

      return this.metadata.nonGeographic || this.metadata.nonGeographical;
    }
  }, {
    key: "hasCountry",
    value: function hasCountry(country) {
      return this.getCountryMetadata(country) !== undefined;
    }
  }, {
    key: "hasCallingCode",
    value: function hasCallingCode(callingCode) {
      if (this.getCountryCodesForCallingCode(callingCode)) {
        return true;
      }

      if (this.nonGeographic()) {
        if (this.nonGeographic()[callingCode]) {
          return true;
        }
      } else {
        // A hacky workaround for old custom metadata (generated before V4).
        var countryCodes = this.countryCallingCodes()[callingCode];

        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {
          return true;
        }
      }
    }
  }, {
    key: "isNonGeographicCallingCode",
    value: function isNonGeographicCallingCode(callingCode) {
      if (this.nonGeographic()) {
        return this.nonGeographic()[callingCode] ? true : false;
      } else {
        return this.getCountryCodesForCallingCode(callingCode) ? false : true;
      }
    } // Deprecated.

  }, {
    key: "country",
    value: function country(countryCode) {
      return this.selectNumberingPlan(countryCode);
    }
  }, {
    key: "selectNumberingPlan",
    value: function selectNumberingPlan(countryCode, callingCode) {
      // Supports just passing `callingCode` as the first argument.
      if (countryCode && CALLING_CODE_REG_EXP.test(countryCode)) {
        callingCode = countryCode;
        countryCode = null;
      }

      if (countryCode && countryCode !== '001') {
        if (!this.hasCountry(countryCode)) {
          throw new Error("Unknown country: ".concat(countryCode));
        }

        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);
      } else if (callingCode) {
        if (!this.hasCallingCode(callingCode)) {
          throw new Error("Unknown calling code: ".concat(callingCode));
        }

        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);
      } else {
        this.numberingPlan = undefined;
      }

      return this;
    }
  }, {
    key: "getCountryCodesForCallingCode",
    value: function getCountryCodesForCallingCode(callingCode) {
      var countryCodes = this.countryCallingCodes()[callingCode];

      if (countryCodes) {
        // Metadata before V4 included "non-geographic entity" calling codes
        // inside `country_calling_codes` (for example, `"881":["001"]`).
        // Now the semantics of `country_calling_codes` has changed:
        // it's specifically for "countries" now.
        // Older versions of custom metadata will simply skip parsing
        // "non-geographic entity" phone numbers with new versions
        // of this library: it's not considered a bug,
        // because such numbers are extremely rare,
        // and developers extremely rarely use custom metadata.
        if (countryCodes.length === 1 && countryCodes[0].length === 3) {
          return;
        }

        return countryCodes;
      }
    }
  }, {
    key: "getCountryCodeForCallingCode",
    value: function getCountryCodeForCallingCode(callingCode) {
      var countryCodes = this.getCountryCodesForCallingCode(callingCode);

      if (countryCodes) {
        return countryCodes[0];
      }
    }
  }, {
    key: "getNumberingPlanMetadata",
    value: function getNumberingPlanMetadata(callingCode) {
      var countryCode = this.getCountryCodeForCallingCode(callingCode);

      if (countryCode) {
        return this.getCountryMetadata(countryCode);
      }

      if (this.nonGeographic()) {
        var metadata = this.nonGeographic()[callingCode];

        if (metadata) {
          return metadata;
        }
      } else {
        // A hacky workaround for old custom metadata (generated before V4).
        // In that metadata, there was no concept of "non-geographic" metadata
        // so metadata for `001` country code was stored along with other countries.
        // The test case can be found by searching for:
        // "should work around `nonGeographic` metadata not existing".
        var countryCodes = this.countryCallingCodes()[callingCode];

        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {
          return this.metadata.countries['001'];
        }
      }
    } // Deprecated.

  }, {
    key: "countryCallingCode",
    value: function countryCallingCode() {
      return this.numberingPlan.callingCode();
    } // Deprecated.

  }, {
    key: "IDDPrefix",
    value: function IDDPrefix() {
      return this.numberingPlan.IDDPrefix();
    } // Deprecated.

  }, {
    key: "defaultIDDPrefix",
    value: function defaultIDDPrefix() {
      return this.numberingPlan.defaultIDDPrefix();
    } // Deprecated.

  }, {
    key: "nationalNumberPattern",
    value: function nationalNumberPattern() {
      return this.numberingPlan.nationalNumberPattern();
    } // Deprecated.

  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      return this.numberingPlan.possibleLengths();
    } // Deprecated.

  }, {
    key: "formats",
    value: function formats() {
      return this.numberingPlan.formats();
    } // Deprecated.

  }, {
    key: "nationalPrefixForParsing",
    value: function nationalPrefixForParsing() {
      return this.numberingPlan.nationalPrefixForParsing();
    } // Deprecated.

  }, {
    key: "nationalPrefixTransformRule",
    value: function nationalPrefixTransformRule() {
      return this.numberingPlan.nationalPrefixTransformRule();
    } // Deprecated.

  }, {
    key: "leadingDigits",
    value: function leadingDigits() {
      return this.numberingPlan.leadingDigits();
    } // Deprecated.

  }, {
    key: "hasTypes",
    value: function hasTypes() {
      return this.numberingPlan.hasTypes();
    } // Deprecated.

  }, {
    key: "type",
    value: function type(_type) {
      return this.numberingPlan.type(_type);
    } // Deprecated.

  }, {
    key: "ext",
    value: function ext() {
      return this.numberingPlan.ext();
    }
  }, {
    key: "countryCallingCodes",
    value: function countryCallingCodes() {
      if (this.v1) return this.metadata.country_phone_code_to_countries;
      return this.metadata.country_calling_codes;
    } // Deprecated.

  }, {
    key: "chooseCountryByCountryCallingCode",
    value: function chooseCountryByCountryCallingCode(callingCode) {
      return this.selectNumberingPlan(callingCode);
    }
  }, {
    key: "hasSelectedNumberingPlan",
    value: function hasSelectedNumberingPlan() {
      return this.numberingPlan !== undefined;
    }
  }]);

  return Metadata;
}();



var NumberingPlan = /*#__PURE__*/function () {
  function NumberingPlan(metadata, globalMetadataObject) {
    _classCallCheck(this, NumberingPlan);

    this.globalMetadataObject = globalMetadataObject;
    this.metadata = metadata;
    setVersion.call(this, globalMetadataObject.metadata);
  }

  _createClass(NumberingPlan, [{
    key: "callingCode",
    value: function callingCode() {
      return this.metadata[0];
    } // Formatting information for regions which share
    // a country calling code is contained by only one region
    // for performance reasons. For example, for NANPA region
    // ("North American Numbering Plan Administration",
    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)
    // it will be contained in the metadata for `US`.

  }, {
    key: "getDefaultCountryMetadataForRegion",
    value: function getDefaultCountryMetadataForRegion() {
      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());
    } // Is always present.

  }, {
    key: "IDDPrefix",
    value: function IDDPrefix() {
      if (this.v1 || this.v2) return;
      return this.metadata[1];
    } // Is only present when a country supports multiple IDD prefixes.

  }, {
    key: "defaultIDDPrefix",
    value: function defaultIDDPrefix() {
      if (this.v1 || this.v2) return;
      return this.metadata[12];
    }
  }, {
    key: "nationalNumberPattern",
    value: function nationalNumberPattern() {
      if (this.v1 || this.v2) return this.metadata[1];
      return this.metadata[2];
    } // "possible length" data is always present in Google's metadata.

  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      if (this.v1) return;
      return this.metadata[this.v2 ? 2 : 3];
    }
  }, {
    key: "_getFormats",
    value: function _getFormats(metadata) {
      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];
    } // For countries of the same region (e.g. NANPA)
    // formats are all stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".

  }, {
    key: "formats",
    value: function formats() {
      var _this = this;

      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];
      return formats.map(function (_) {
        return new Format(_, _this);
      });
    }
  }, {
    key: "nationalPrefix",
    value: function nationalPrefix() {
      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];
    }
  }, {
    key: "_getNationalPrefixFormattingRule",
    value: function _getNationalPrefixFormattingRule(metadata) {
      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];
    } // For countries of the same region (e.g. NANPA)
    // national prefix formatting rule is stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".

  }, {
    key: "nationalPrefixFormattingRule",
    value: function nationalPrefixFormattingRule() {
      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());
    }
  }, {
    key: "_nationalPrefixForParsing",
    value: function _nationalPrefixForParsing() {
      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];
    }
  }, {
    key: "nationalPrefixForParsing",
    value: function nationalPrefixForParsing() {
      // If `national_prefix_for_parsing` is not set explicitly,
      // then infer it from `national_prefix` (if any)
      return this._nationalPrefixForParsing() || this.nationalPrefix();
    }
  }, {
    key: "nationalPrefixTransformRule",
    value: function nationalPrefixTransformRule() {
      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];
    }
  }, {
    key: "_getNationalPrefixIsOptionalWhenFormatting",
    value: function _getNationalPrefixIsOptionalWhenFormatting() {
      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];
    } // For countries of the same region (e.g. NANPA)
    // "national prefix is optional when formatting" flag is
    // stored in the "main" country for that region.
    // E.g. "RU" and "KZ", "US" and "CA".

  }, {
    key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());
    }
  }, {
    key: "leadingDigits",
    value: function leadingDigits() {
      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];
    }
  }, {
    key: "types",
    value: function types() {
      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];
    }
  }, {
    key: "hasTypes",
    value: function hasTypes() {
      // Versions 1.2.0 - 1.2.4: can be `[]`.

      /* istanbul ignore next */
      if (this.types() && this.types().length === 0) {
        return false;
      } // Versions <= 1.2.4: can be `undefined`.
      // Version >= 1.2.5: can be `0`.


      return !!this.types();
    }
  }, {
    key: "type",
    value: function type(_type2) {
      if (this.hasTypes() && getType(this.types(), _type2)) {
        return new Type(getType(this.types(), _type2), this);
      }
    }
  }, {
    key: "ext",
    value: function ext() {
      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;
      return this.metadata[13] || DEFAULT_EXT_PREFIX;
    }
  }]);

  return NumberingPlan;
}();

var Format = /*#__PURE__*/function () {
  function Format(format, metadata) {
    _classCallCheck(this, Format);

    this._format = format;
    this.metadata = metadata;
  }

  _createClass(Format, [{
    key: "pattern",
    value: function pattern() {
      return this._format[0];
    }
  }, {
    key: "format",
    value: function format() {
      return this._format[1];
    }
  }, {
    key: "leadingDigitsPatterns",
    value: function leadingDigitsPatterns() {
      return this._format[2] || [];
    }
  }, {
    key: "nationalPrefixFormattingRule",
    value: function nationalPrefixFormattingRule() {
      return this._format[3] || this.metadata.nationalPrefixFormattingRule();
    }
  }, {
    key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
    }
  }, {
    key: "nationalPrefixIsMandatoryWhenFormattingInNationalFormat",
    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {
      // National prefix is omitted if there's no national prefix formatting rule
      // set for this country, or when the national prefix formatting rule
      // contains no national prefix itself, or when this rule is set but
      // national prefix is optional for this phone number format
      // (and it is not enforced explicitly)
      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
    } // Checks whether national prefix formatting rule contains national prefix.

  }, {
    key: "usesNationalPrefix",
    value: function usesNationalPrefix() {
      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a "dummy" one.
      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()) // In compressed metadata, `this.nationalPrefixFormattingRule()` is `0`
      // when `national_prefix_formatting_rule` is not present.
      // So, `true` or `false` are returned explicitly here, so that
      // `0` number isn't returned.
      ? true : false;
    }
  }, {
    key: "internationalFormat",
    value: function internationalFormat() {
      return this._format[5] || this.format();
    }
  }]);

  return Format;
}();
/**
 * A pattern that is used to determine if the national prefix formatting rule
 * has the first group only, i.e., does not start with the national prefix.
 * Note that the pattern explicitly allows for unbalanced parentheses.
 */


var FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\(?\$1\)?$/;

var Type = /*#__PURE__*/function () {
  function Type(type, metadata) {
    _classCallCheck(this, Type);

    this.type = type;
    this.metadata = metadata;
  }

  _createClass(Type, [{
    key: "pattern",
    value: function pattern() {
      if (this.metadata.v1) return this.type;
      return this.type[0];
    }
  }, {
    key: "possibleLengths",
    value: function possibleLengths() {
      if (this.metadata.v1) return;
      return this.type[1] || this.metadata.possibleLengths();
    }
  }]);

  return Type;
}();

function getType(types, type) {
  switch (type) {
    case 'FIXED_LINE':
      return types[0];

    case 'MOBILE':
      return types[1];

    case 'TOLL_FREE':
      return types[2];

    case 'PREMIUM_RATE':
      return types[3];

    case 'PERSONAL_NUMBER':
      return types[4];

    case 'VOICEMAIL':
      return types[5];

    case 'UAN':
      return types[6];

    case 'PAGER':
      return types[7];

    case 'VOIP':
      return types[8];

    case 'SHARED_COST':
      return types[9];
  }
}

function validateMetadata(metadata) {
  if (!metadata) {
    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');
  } // `country_phone_code_to_countries` was renamed to
  // `country_calling_codes` in `1.0.18`.


  if (!is_object(metadata) || !is_object(metadata.countries)) {
    throw new Error("[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got ".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, "."));
  }
} // Babel transforms `typeof` into some "branches"
// so istanbul will show this as "branch not covered".

/* istanbul ignore next */

var is_object = function is_object(_) {
  return _typeof(_) === 'object';
}; // Babel transforms `typeof` into some "branches"
// so istanbul will show this as "branch not covered".

/* istanbul ignore next */


var type_of = function type_of(_) {
  return _typeof(_);
};
/**
 * Returns extension prefix for a country.
 * @param  {string} country
 * @param  {object} metadata
 * @return {string?}
 * @example
 * // Returns " ext. "
 * getExtPrefix("US")
 */


function getExtPrefix(country, metadata) {
  metadata = new Metadata(metadata);

  if (metadata.hasCountry(country)) {
    return metadata.country(country).ext();
  }

  return DEFAULT_EXT_PREFIX;
}
/**
 * Returns "country calling code" for a country.
 * Throws an error if the country doesn't exist or isn't supported by this library.
 * @param  {string} country
 * @param  {object} metadata
 * @return {string}
 * @example
 * // Returns "44"
 * getCountryCallingCode("GB")
 */

function getCountryCallingCode(country, metadata) {
  metadata = new Metadata(metadata);

  if (metadata.hasCountry(country)) {
    return metadata.country(country).countryCallingCode();
  }

  throw new Error("Unknown country: ".concat(country));
}
function isSupportedCountry(country, metadata) {
  // metadata = new Metadata(metadata)
  // return metadata.hasCountry(country)
  return metadata.countries[country] !== undefined;
}

function setVersion(metadata) {
  var version = metadata.version;

  if (typeof version === 'number') {
    this.v1 = version === 1;
    this.v2 = version === 2;
    this.v3 = version === 3;
    this.v4 = version === 4;
  } else {
    if (!version) {
      this.v1 = true;
    } else if ((0,_tools_semver_compare_js__WEBPACK_IMPORTED_MODULE_0__["default"])(version, V3) === -1) {
      this.v2 = true;
    } else if ((0,_tools_semver_compare_js__WEBPACK_IMPORTED_MODULE_0__["default"])(version, V4) === -1) {
      this.v3 = true;
    } else {
      this.v4 = true;
    }
  }
} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/
// function isCountryCode(countryCode) {
// 	return ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)
// }
//# sourceMappingURL=metadata.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/normalizeArguments.js":
/*!******************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/normalizeArguments.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ normalizeArguments)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

// Extracts the following properties from function arguments:
// * input `text`
// * `options` object
// * `metadata` JSON
function normalizeArguments(args) {
  var _Array$prototype$slic = Array.prototype.slice.call(args),
      _Array$prototype$slic2 = _slicedToArray(_Array$prototype$slic, 4),
      arg_1 = _Array$prototype$slic2[0],
      arg_2 = _Array$prototype$slic2[1],
      arg_3 = _Array$prototype$slic2[2],
      arg_4 = _Array$prototype$slic2[3];

  var text;
  var options;
  var metadata; // If the phone number is passed as a string.
  // `parsePhoneNumber('88005553535', ...)`.

  if (typeof arg_1 === 'string') {
    text = arg_1;
  } else throw new TypeError('A text for parsing must be a string.'); // If "default country" argument is being passed then move it to `options`.
  // `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.


  if (!arg_2 || typeof arg_2 === 'string') {
    if (arg_4) {
      options = arg_3;
      metadata = arg_4;
    } else {
      options = undefined;
      metadata = arg_3;
    }

    if (arg_2) {
      options = _objectSpread({
        defaultCountry: arg_2
      }, options);
    }
  } // `defaultCountry` is not passed.
  // Example: `parsePhoneNumber('+78005553535', [options], metadata)`.
  else if (isObject(arg_2)) {
    if (arg_3) {
      options = arg_2;
      metadata = arg_3;
    } else {
      metadata = arg_2;
    }
  } else throw new Error("Invalid second argument: ".concat(arg_2));

  return {
    text: text,
    options: options,
    metadata: metadata
  };
} // Otherwise istanbul would show this as "branch not covered".

/* istanbul ignore next */

var isObject = function isObject(_) {
  return _typeof(_) === 'object';
};
//# sourceMappingURL=normalizeArguments.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/parse.js":
/*!*****************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/parse.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var _constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants.js */ "./node_modules/libphonenumber-js/es6/constants.js");
/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ParseError.js */ "./node_modules/libphonenumber-js/es6/ParseError.js");
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getCountryCallingCode.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
/* harmony import */ var _helpers_isViablePhoneNumber_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./helpers/isViablePhoneNumber.js */ "./node_modules/libphonenumber-js/es6/helpers/isViablePhoneNumber.js");
/* harmony import */ var _helpers_extension_extractExtension_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./helpers/extension/extractExtension.js */ "./node_modules/libphonenumber-js/es6/helpers/extension/extractExtension.js");
/* harmony import */ var _parseIncompletePhoneNumber_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./parseIncompletePhoneNumber.js */ "./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js");
/* harmony import */ var _isPossible_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isPossible.js */ "./node_modules/libphonenumber-js/es6/isPossible.js");
/* harmony import */ var _PhoneNumber_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PhoneNumber.js */ "./node_modules/libphonenumber-js/es6/PhoneNumber.js");
/* harmony import */ var _helpers_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./helpers/matchesEntirely.js */ "./node_modules/libphonenumber-js/es6/helpers/matchesEntirely.js");
/* harmony import */ var _helpers_extractCountryCallingCode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./helpers/extractCountryCallingCode.js */ "./node_modules/libphonenumber-js/es6/helpers/extractCountryCallingCode.js");
/* harmony import */ var _helpers_extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./helpers/extractNationalNumber.js */ "./node_modules/libphonenumber-js/es6/helpers/extractNationalNumber.js");
/* harmony import */ var _helpers_getCountryByCallingCode_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/getCountryByCallingCode.js */ "./node_modules/libphonenumber-js/es6/helpers/getCountryByCallingCode.js");
/* harmony import */ var _helpers_extractFormattedPhoneNumberFromPossibleRfc3966NumberUri_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js */ "./node_modules/libphonenumber-js/es6/helpers/extractFormattedPhoneNumberFromPossibleRfc3966NumberUri.js");
// This is a port of Google Android `libphonenumber`'s
// `phonenumberutil.js` of December 31th, 2018.
//
// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js







 // import { parseRFC3966 } from './helpers/RFC3966.js'







 // We don't allow input strings for parsing to be longer than 250 chars.
// This prevents malicious input from consuming CPU.

var MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.

var PHONE_NUMBER_START_PATTERN = new RegExp('[' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.PLUS_CHARS + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.
// A trailing `#` is sometimes used when writing phone numbers with extensions in US.
// Example: "+1 (645) 123 1234-910#" number has extension "910".

var AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + _constants_js__WEBPACK_IMPORTED_MODULE_0__.VALID_DIGITS + '#' + ']+$');
var USE_NON_GEOGRAPHIC_COUNTRY_CODE = false; // Examples:
//
// ```js
// parse('8 (800) 555-35-35', 'RU')
// parse('8 (800) 555-35-35', 'RU', metadata)
// parse('8 (800) 555-35-35', { country: { default: 'RU' } })
// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)
// parse('+7 800 555 35 35')
// parse('+7 800 555 35 35', metadata)
// ```
//

/**
 * Parses a phone number.
 *
 * parse('123456789', { defaultCountry: 'RU', v2: true }, metadata)
 * parse('123456789', { defaultCountry: 'RU' }, metadata)
 * parse('123456789', undefined, metadata)
 *
 * @param  {string} input
 * @param  {object} [options]
 * @param  {object} metadata
 * @return {object|PhoneNumber?} If `options.v2: true` flag is passed, it returns a `PhoneNumber?` instance. Otherwise, returns an object of shape `{ phone: '...', country: '...' }` (or just `{}` if no phone number was parsed).
 */

function parse(text, options, metadata) {
  // If assigning the `{}` default value is moved to the arguments above,
  // code coverage would decrease for some weird reason.
  options = options || {};
  metadata = new _metadata_js__WEBPACK_IMPORTED_MODULE_1__["default"](metadata); // Validate `defaultCountry`.

  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {
    if (options.v2) {
      throw new _ParseError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('INVALID_COUNTRY');
    }

    throw new Error("Unknown country: ".concat(options.defaultCountry));
  } // Parse the phone number.


  var _parseInput = parseInput(text, options.v2, options.extract),
      formattedPhoneNumber = _parseInput.number,
      ext = _parseInput.ext,
      error = _parseInput.error; // If the phone number is not viable then return nothing.


  if (!formattedPhoneNumber) {
    if (options.v2) {
      if (error === 'TOO_SHORT') {
        throw new _ParseError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('TOO_SHORT');
      }

      throw new _ParseError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('NOT_A_NUMBER');
    }

    return {};
  }

  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),
      country = _parsePhoneNumber.country,
      nationalNumber = _parsePhoneNumber.nationalNumber,
      countryCallingCode = _parsePhoneNumber.countryCallingCode,
      countryCallingCodeSource = _parsePhoneNumber.countryCallingCodeSource,
      carrierCode = _parsePhoneNumber.carrierCode;

  if (!metadata.hasSelectedNumberingPlan()) {
    if (options.v2) {
      throw new _ParseError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('INVALID_COUNTRY');
    }

    return {};
  } // Validate national (significant) number length.


  if (!nationalNumber || nationalNumber.length < _constants_js__WEBPACK_IMPORTED_MODULE_0__.MIN_LENGTH_FOR_NSN) {
    // Won't throw here because the regexp already demands length > 1.

    /* istanbul ignore if */
    if (options.v2) {
      throw new _ParseError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('TOO_SHORT');
    } // Google's demo just throws an error in this case.


    return {};
  } // Validate national (significant) number length.
  //
  // A sidenote:
  //
  // They say that sometimes national (significant) numbers
  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).
  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36
  // Such numbers will just be discarded.
  //


  if (nationalNumber.length > _constants_js__WEBPACK_IMPORTED_MODULE_0__.MAX_LENGTH_FOR_NSN) {
    if (options.v2) {
      throw new _ParseError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('TOO_LONG');
    } // Google's demo just throws an error in this case.


    return {};
  }

  if (options.v2) {
    var phoneNumber = new _PhoneNumber_js__WEBPACK_IMPORTED_MODULE_3__["default"](countryCallingCode, nationalNumber, metadata.metadata);

    if (country) {
      phoneNumber.country = country;
    }

    if (carrierCode) {
      phoneNumber.carrierCode = carrierCode;
    }

    if (ext) {
      phoneNumber.ext = ext;
    }

    phoneNumber.__countryCallingCodeSource = countryCallingCodeSource;
    return phoneNumber;
  } // Check if national phone number pattern matches the number.
  // National number pattern is different for each country,
  // even for those ones which are part of the "NANPA" group.


  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? (0,_helpers_matchesEntirely_js__WEBPACK_IMPORTED_MODULE_4__["default"])(nationalNumber, metadata.nationalNumberPattern()) : false;

  if (!options.extended) {
    return valid ? result(country, nationalNumber, ext) : {};
  } // isInternational: countryCallingCode !== undefined


  return {
    country: country,
    countryCallingCode: countryCallingCode,
    carrierCode: carrierCode,
    valid: valid,
    possible: valid ? true : options.extended === true && metadata.possibleLengths() && (0,_isPossible_js__WEBPACK_IMPORTED_MODULE_5__.isPossibleNumber)(nationalNumber, metadata) ? true : false,
    phone: nationalNumber,
    ext: ext
  };
}
/**
 * Extracts a formatted phone number from text.
 * Doesn't guarantee that the extracted phone number
 * is a valid phone number (for example, doesn't validate its length).
 * @param  {string} text
 * @param  {boolean} [extract] — If `false`, then will parse the entire `text` as a phone number.
 * @param  {boolean} [throwOnError] — By default, it won't throw if the text is too long.
 * @return {string}
 * @example
 * // Returns "(213) 373-4253".
 * extractFormattedPhoneNumber("Call (213) 373-4253 for assistance.")
 */

function _extractFormattedPhoneNumber(text, extract, throwOnError) {
  if (!text) {
    return;
  }

  if (text.length > MAX_INPUT_STRING_LENGTH) {
    if (throwOnError) {
      throw new _ParseError_js__WEBPACK_IMPORTED_MODULE_2__["default"]('TOO_LONG');
    }

    return;
  }

  if (extract === false) {
    return text;
  } // Attempt to extract a possible number from the string passed in


  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);

  if (startsAt < 0) {
    return;
  }

  return text // Trim everything to the left of the phone number
  .slice(startsAt) // Remove trailing non-numerical characters
  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');
}
/**
 * @param  {string} text - Input.
 * @param  {boolean} v2 - Legacy API functions don't pass `v2: true` flag.
 * @param  {boolean} [extract] - Whether to extract a phone number from `text`, or attempt to parse the entire text as a phone number.
 * @return {object} `{ ?number, ?ext }`.
 */


function parseInput(text, v2, extract) {
  // // Parse RFC 3966 phone number URI.
  // if (text && text.indexOf('tel:') === 0) {
  // 	return parseRFC3966(text)
  // }
  // let number = extractFormattedPhoneNumber(text, extract, v2)
  var number = (0,_helpers_extractFormattedPhoneNumberFromPossibleRfc3966NumberUri_js__WEBPACK_IMPORTED_MODULE_6__["default"])(text, {
    extractFormattedPhoneNumber: function extractFormattedPhoneNumber(text) {
      return _extractFormattedPhoneNumber(text, extract, v2);
    }
  }); // If the phone number is not viable, then abort.

  if (!number) {
    return {};
  }

  if (!(0,_helpers_isViablePhoneNumber_js__WEBPACK_IMPORTED_MODULE_7__["default"])(number)) {
    if ((0,_helpers_isViablePhoneNumber_js__WEBPACK_IMPORTED_MODULE_7__.isViablePhoneNumberStart)(number)) {
      return {
        error: 'TOO_SHORT'
      };
    }

    return {};
  } // Attempt to parse extension first, since it doesn't require region-specific
  // data and we want to have the non-normalised number here.


  var withExtensionStripped = (0,_helpers_extension_extractExtension_js__WEBPACK_IMPORTED_MODULE_8__["default"])(number);

  if (withExtensionStripped.ext) {
    return withExtensionStripped;
  }

  return {
    number: number
  };
}
/**
 * Creates `parse()` result object.
 */


function result(country, nationalNumber, ext) {
  var result = {
    country: country,
    phone: nationalNumber
  };

  if (ext) {
    result.ext = ext;
  }

  return result;
}
/**
 * Parses a viable phone number.
 * @param {string} formattedPhoneNumber — Example: "(213) 373-4253".
 * @param {string} [defaultCountry]
 * @param {string} [defaultCallingCode]
 * @param {Metadata} metadata
 * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.
 */


function parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {
  // Extract calling code from phone number.
  var _extractCountryCallin = (0,_helpers_extractCountryCallingCode_js__WEBPACK_IMPORTED_MODULE_9__["default"])((0,_parseIncompletePhoneNumber_js__WEBPACK_IMPORTED_MODULE_10__["default"])(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),
      countryCallingCodeSource = _extractCountryCallin.countryCallingCodeSource,
      countryCallingCode = _extractCountryCallin.countryCallingCode,
      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.


  var country;

  if (countryCallingCode) {
    metadata.selectNumberingPlan(countryCallingCode);
  } // If `formattedPhoneNumber` is passed in "national" format
  // then `number` is defined and `countryCallingCode` is `undefined`.
  else if (number && (defaultCountry || defaultCallingCode)) {
    metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);

    if (defaultCountry) {
      country = defaultCountry;
    } else {
      /* istanbul ignore if */
      if (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {
        if (metadata.isNonGeographicCallingCode(defaultCallingCode)) {
          country = '001';
        }
      }
    }

    countryCallingCode = defaultCallingCode || (0,_metadata_js__WEBPACK_IMPORTED_MODULE_1__.getCountryCallingCode)(defaultCountry, metadata.metadata);
  } else return {};

  if (!number) {
    return {
      countryCallingCodeSource: countryCallingCodeSource,
      countryCallingCode: countryCallingCode
    };
  }

  var _extractNationalNumbe = (0,_helpers_extractNationalNumber_js__WEBPACK_IMPORTED_MODULE_11__["default"])((0,_parseIncompletePhoneNumber_js__WEBPACK_IMPORTED_MODULE_10__["default"])(number), metadata),
      nationalNumber = _extractNationalNumbe.nationalNumber,
      carrierCode = _extractNationalNumbe.carrierCode; // Sometimes there are several countries
  // corresponding to the same country phone code
  // (e.g. NANPA countries all having `1` country phone code).
  // Therefore, to reliably determine the exact country,
  // national (significant) number should have been parsed first.
  //
  // When `metadata.json` is generated, all "ambiguous" country phone codes
  // get their countries populated with the full set of
  // "phone number type" regular expressions.
  //


  var exactCountry = (0,_helpers_getCountryByCallingCode_js__WEBPACK_IMPORTED_MODULE_12__["default"])(countryCallingCode, nationalNumber, metadata);

  if (exactCountry) {
    country = exactCountry;
    /* istanbul ignore if */

    if (exactCountry === '001') {// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.
      // If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,
      // then remove the "istanbul ignore if".
    } else {
      metadata.country(country);
    }
  }

  return {
    country: country,
    countryCallingCode: countryCallingCode,
    countryCallingCodeSource: countryCallingCodeSource,
    nationalNumber: nationalNumber,
    carrierCode: carrierCode
  };
}
//# sourceMappingURL=parse.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js":
/*!**************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/parseIncompletePhoneNumber.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parseIncompletePhoneNumber),
/* harmony export */   parsePhoneNumberCharacter: () => (/* binding */ parsePhoneNumberCharacter)
/* harmony export */ });
/* harmony import */ var _helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/parseDigits.js */ "./node_modules/libphonenumber-js/es6/helpers/parseDigits.js");
function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


/**
 * Parses phone number characters from a string.
 * Drops all punctuation leaving only digits and the leading `+` sign (if any).
 * Also converts wide-ascii and arabic-indic numerals to conventional numerals.
 * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.
 * @param  {string} string
 * @return {string}
 * @example
 * ```js
 * // Outputs '8800555'.
 * parseIncompletePhoneNumber('8 (800) 555')
 * // Outputs '+7800555'.
 * parseIncompletePhoneNumber('+7 800 555')
 * ```
 */

function parseIncompletePhoneNumber(string) {
  var result = ''; // Using `.split('')` here instead of normal `for ... of`
  // because the importing application doesn't neccessarily include an ES6 polyfill.
  // The `.split('')` approach discards "exotic" UTF-8 characters
  // (the ones consisting of four bytes) but digits
  // (including non-European ones) don't fall into that range
  // so such "exotic" characters would be discarded anyway.

  for (var _iterator = _createForOfIteratorHelperLoose(string.split('')), _step; !(_step = _iterator()).done;) {
    var character = _step.value;
    result += parsePhoneNumberCharacter(character, result) || '';
  }

  return result;
}
/**
 * Parses next character while parsing phone number digits (including a `+`)
 * from text: discards everything except `+` and digits, and `+` is only allowed
 * at the start of a phone number.
 * For example, is used in `react-phone-number-input` where it uses
 * [`input-format`](https://gitlab.com/catamphetamine/input-format).
 * @param  {string} character - Yet another character from raw input string.
 * @param  {string?} prevParsedCharacters - Previous parsed characters.
 * @param  {object} meta - Optional custom use-case-specific metadata.
 * @return {string?} The parsed character.
 */

function parsePhoneNumberCharacter(character, prevParsedCharacters) {
  // Only allow a leading `+`.
  if (character === '+') {
    // If this `+` is not the first parsed character
    // then discard it.
    if (prevParsedCharacters) {
      return;
    }

    return '+';
  } // Allow digits.


  return (0,_helpers_parseDigits_js__WEBPACK_IMPORTED_MODULE_0__.parseDigit)(character);
}
//# sourceMappingURL=parseIncompletePhoneNumber.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js":
/*!**************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parsePhoneNumberWithError)
/* harmony export */ });
/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parse.js */ "./node_modules/libphonenumber-js/es6/parse.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


function parsePhoneNumberWithError(text, options, metadata) {
  return (0,_parse_js__WEBPACK_IMPORTED_MODULE_0__["default"])(text, _objectSpread(_objectSpread({}, options), {}, {
    v2: true
  }), metadata);
}
//# sourceMappingURL=parsePhoneNumberWithError_.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/parsePhoneNumber_.js":
/*!*****************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/parsePhoneNumber_.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parsePhoneNumber)
/* harmony export */ });
/* harmony import */ var _parsePhoneNumberWithError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parsePhoneNumberWithError_.js */ "./node_modules/libphonenumber-js/es6/parsePhoneNumberWithError_.js");
/* harmony import */ var _ParseError_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ParseError.js */ "./node_modules/libphonenumber-js/es6/ParseError.js");
/* harmony import */ var _metadata_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./metadata.js */ "./node_modules/libphonenumber-js/es6/metadata.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




function parsePhoneNumber(text, options, metadata) {
  // Validate `defaultCountry`.
  if (options && options.defaultCountry && !(0,_metadata_js__WEBPACK_IMPORTED_MODULE_0__.isSupportedCountry)(options.defaultCountry, metadata)) {
    options = _objectSpread(_objectSpread({}, options), {}, {
      defaultCountry: undefined
    });
  } // Parse phone number.


  try {
    return (0,_parsePhoneNumberWithError_js__WEBPACK_IMPORTED_MODULE_1__["default"])(text, options, metadata);
  } catch (error) {
    /* istanbul ignore else */
    if (error instanceof _ParseError_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {//
    } else {
      throw error;
    }
  }
}
//# sourceMappingURL=parsePhoneNumber_.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/es6/tools/semver-compare.js":
/*!********************************************************************!*\
  !*** ./node_modules/libphonenumber-js/es6/tools/semver-compare.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Copy-pasted from:
// https://github.com/substack/semver-compare/blob/master/index.js
//
// Inlining this function because some users reported issues with
// importing from `semver-compare` in a browser with ES6 "native" modules.
//
// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc "tags".
// https://github.com/catamphetamine/libphonenumber-js/issues/381
/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(a, b) {
  a = a.split('-');
  b = b.split('-');
  var pa = a[0].split('.');
  var pb = b[0].split('.');

  for (var i = 0; i < 3; i++) {
    var na = Number(pa[i]);
    var nb = Number(pb[i]);
    if (na > nb) return 1;
    if (nb > na) return -1;
    if (!isNaN(na) && isNaN(nb)) return 1;
    if (isNaN(na) && !isNaN(nb)) return -1;
  }

  if (a[1] && b[1]) {
    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;
  }

  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;
}
//# sourceMappingURL=semver-compare.js.map

/***/ }),

/***/ "./node_modules/libphonenumber-js/metadata.min.json.js":
/*!*************************************************************!*\
  !*** ./node_modules/libphonenumber-js/metadata.min.json.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// This file is a workaround for a bug in web browsers' "native"
// ES6 importing system which is uncapable of importing "*.json" files.
// https://github.com/catamphetamine/libphonenumber-js/issues/239
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({"version":4,"country_calling_codes":{},"countries":{"AC":["247","00","(?:[01589]\\d|[46])\\d{4}",[5,6]],"AD":["376","00","(?:1|6\\d)\\d{7}|[135-9]\\d{5}",[6,8,9],[["(\\d{3})(\\d{3})","$1 $2",["[135-9]"]],["(\\d{4})(\\d{4})","$1 $2",["1"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]]]],"AE":["971","00","(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}",[5,6,7,8,9,10,11,12],[["(\\d{3})(\\d{2,9})","$1 $2",["60|8"]],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[236]|[479][2-8]"],"0$1"],["(\\d{3})(\\d)(\\d{5})","$1 $2 $3",["[479]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["5"],"0$1"]],"0"],"AF":["93","00","[2-7]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[2-7]"],"0$1"]],"0"],"AG":["1","011","(?:268|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([457]\\d{6})$|1","268$1",0,"268"],"AI":["1","011","(?:264|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([2457]\\d{6})$|1","264$1",0,"264"],"AL":["355","00","(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}",[6,7,8,9],[["(\\d{3})(\\d{3,4})","$1 $2",["80|9"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["4[2-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2358][2-5]|4"],"0$1"],["(\\d{3})(\\d{5})","$1 $2",["[23578]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["6"],"0$1"]],"0"],"AM":["374","00","(?:[1-489]\\d|55|60|77)\\d{6}",[8],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[89]0"],"0 $1"],["(\\d{3})(\\d{5})","$1 $2",["2|3[12]"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["1|47"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["[3-9]"],"0$1"]],"0"],"AO":["244","00","[29]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[29]"]]]],"AR":["54","00","(?:11|[89]\\d\\d)\\d{8}|[2368]\\d{9}",[10,11],[["(\\d{4})(\\d{2})(\\d{4})","$1 $2-$3",["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])","2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)","2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]","2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"],"0$1",1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2-$3",["1"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["[68]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2-$3",["[23]"],"0$1",1],["(\\d)(\\d{4})(\\d{2})(\\d{4})","$2 15-$3-$4",["9(?:2[2-469]|3[3-578])","9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))","9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)","9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]","9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"],"0$1",0,"$1 $2 $3-$4"],["(\\d)(\\d{2})(\\d{4})(\\d{4})","$2 15-$3-$4",["91"],"0$1",0,"$1 $2 $3-$4"],["(\\d{3})(\\d{3})(\\d{5})","$1-$2-$3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{4})","$2 15-$3-$4",["9"],"0$1",0,"$1 $2 $3-$4"]],"0",0,"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?","9$1"],"AS":["1","011","(?:[58]\\d\\d|684|900)\\d{7}",[10],0,"1",0,"([267]\\d{6})$|1","684$1",0,"684"],"AT":["43","00","1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}",[4,5,6,7,8,9,10,11,12,13],[["(\\d)(\\d{3,12})","$1 $2",["1(?:11|[2-9])"],"0$1"],["(\\d{3})(\\d{2})","$1 $2",["517"],"0$1"],["(\\d{2})(\\d{3,5})","$1 $2",["5[079]"],"0$1"],["(\\d{3})(\\d{3,10})","$1 $2",["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"],"0$1"],["(\\d{4})(\\d{3,9})","$1 $2",["[2-467]|5[2-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["5"],"0$1"],["(\\d{2})(\\d{4})(\\d{4,7})","$1 $2 $3",["5"],"0$1"]],"0"],"AU":["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{7}(?:\\d(?:\\d{2})?)?|8[0-24-9]\\d{7})|[2-478]\\d{8}|1\\d{4,7}",[5,6,7,8,9,10,12],[["(\\d{2})(\\d{3,4})","$1 $2",["16"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,4})","$1 $2 $3",["16"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["14|4"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["[2378]"],"(0$1)"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1(?:30|[89])"]]],"0",0,"(183[12])|0",0,0,0,[["(?:(?:2(?:[0-26-9]\\d|3[0-8]|4[02-9]|5[0135-9])|3(?:[0-3589]\\d|4[0-578]|6[1-9]|7[0-35-9])|7(?:[013-57-9]\\d|2[0-8]))\\d{3}|8(?:51(?:0(?:0[03-9]|[12479]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-7])|1(?:[0235689]\\d|1[0-69]|4[0-589]|7[0-47-9])|2(?:0[0-79]|[18][13579]|2[14-9]|3[0-46-9]|[4-6]\\d|7[89]|9[0-4]))|(?:6[0-8]|[78]\\d)\\d{3}|9(?:[02-9]\\d{3}|1(?:(?:[0-58]\\d|6[0135-9])\\d|7(?:0[0-24-9]|[1-9]\\d)|9(?:[0-46-9]\\d|5[0-79])))))\\d{3}",[9]],["4(?:(?:79|94)[01]|83[0-389])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,["163\\d{2,6}",[5,6,7,8,9]],["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],"AW":["297","00","(?:[25-79]\\d\\d|800)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[25-9]"]]]],"AX":["358","00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))","2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}",[5,6,7,8,9,10,11,12],0,"0",0,0,0,0,"18",0,"00"],"AZ":["994","00","365\\d{6}|(?:[124579]\\d|60|88)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["90"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[28]|2|365|46","1[28]|2|365[45]|46","1[28]|2|365(?:4|5[02])|46"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[13-9]"],"0$1"]],"0"],"BA":["387","00","6\\d{8}|(?:[35689]\\d|49|70)\\d{6}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["6[1-3]|[7-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2-$3",["[3-5]|6[56]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["6"],"0$1"]],"0"],"BB":["1","011","(?:246|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([2-9]\\d{6})$|1","246$1",0,"246"],"BD":["880","00","[1-469]\\d{9}|8[0-79]\\d{7,8}|[2-79]\\d{8}|[2-9]\\d{7}|[3-9]\\d{6}|[57-9]\\d{5}",[6,7,8,9,10],[["(\\d{2})(\\d{4,6})","$1-$2",["31[5-8]|[459]1"],"0$1"],["(\\d{3})(\\d{3,7})","$1-$2",["3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]"],"0$1"],["(\\d{4})(\\d{3,6})","$1-$2",["[13-9]|22"],"0$1"],["(\\d)(\\d{7,8})","$1-$2",["2"],"0$1"]],"0"],"BE":["32","00","4\\d{8}|[1-9]\\d{7}",[8,9],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["(?:80|9)0"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[239]|4[23]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[15-8]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["4"],"0$1"]],"0"],"BF":["226","00","[025-7]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[025-7]"]]]],"BG":["359","00","00800\\d{7}|[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}",[6,7,8,9,12],[["(\\d)(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["2"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["43[1-6]|70[1-9]"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["(?:70|8)0"],"0$1"],["(\\d{3})(\\d{3})(\\d{2})","$1 $2 $3",["43[1-7]|7"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[48]|9[08]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1"]],"0"],"BH":["973","00","[136-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[13679]|8[047]"]]]],"BI":["257","00","(?:[267]\\d|31)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2367]"]]]],"BJ":["229","00","[24-689]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24-689]"]]]],"BL":["590","00","590\\d{6}|(?:69|80|9\\d)\\d{7}",[9],0,"0",0,0,0,0,0,[["590(?:2[7-9]|5[12]|87)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["9(?:(?:395|76[018])\\d|475[0-2])\\d{4}"]]],"BM":["1","011","(?:441|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([2-9]\\d{6})$|1","441$1",0,"441"],"BN":["673","00","[2-578]\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-578]"]]]],"BO":["591","00(?:1\\d)?","(?:[2-467]\\d\\d|8001)\\d{5}",[8,9],[["(\\d)(\\d{7})","$1 $2",["[23]|4[46]"]],["(\\d{8})","$1",["[67]"]],["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["8"]]],"0",0,"0(1\\d)?"],"BQ":["599","00","(?:[34]1|7\\d)\\d{5}",[7],0,0,0,0,0,0,"[347]"],"BR":["55","00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)","(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-46-9]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}",[8,9,10,11],[["(\\d{4})(\\d{4})","$1-$2",["300|4(?:0[02]|37)","4(?:02|37)0|[34]00"]],["(\\d{3})(\\d{2,3})(\\d{4})","$1 $2 $3",["(?:[358]|90)0"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2-$3",["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"],"($1)"],["(\\d{2})(\\d{5})(\\d{4})","$1 $2-$3",["[16][1-9]|[2-57-9]"],"($1)"]],"0",0,"(?:0|90)(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?","$2"],"BS":["1","011","(?:242|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([3-8]\\d{6})$|1","242$1",0,"242"],"BT":["975","00","[17]\\d{7}|[2-8]\\d{6}",[7,8],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[2-68]|7[246]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[67]|7"]]]],"BW":["267","00","(?:0800|(?:[37]|800)\\d)\\d{6}|(?:[2-6]\\d|90)\\d{5}",[7,8,10],[["(\\d{2})(\\d{5})","$1 $2",["90"]],["(\\d{3})(\\d{4})","$1 $2",["[24-6]|3[15-79]"]],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[37]"]],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["0"]],["(\\d{3})(\\d{4})(\\d{3})","$1 $2 $3",["8"]]]],"BY":["375","810","(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}",[6,7,8,9,10,11],[["(\\d{3})(\\d{3})","$1 $2",["800"],"8 $1"],["(\\d{3})(\\d{2})(\\d{2,4})","$1 $2 $3",["800"],"8 $1"],["(\\d{4})(\\d{2})(\\d{3})","$1 $2-$3",["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])","1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"],"8 0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2-$3-$4",["1(?:[56]|7[467])|2[1-3]"],"8 0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2-$3-$4",["[1-4]"],"8 0$1"],["(\\d{3})(\\d{3,4})(\\d{4})","$1 $2 $3",["[89]"],"8 $1"]],"8",0,"0|80?",0,0,0,0,"8~10"],"BZ":["501","00","(?:0800\\d|[2-8])\\d{6}",[7,11],[["(\\d{3})(\\d{4})","$1-$2",["[2-8]"]],["(\\d)(\\d{3})(\\d{4})(\\d{3})","$1-$2-$3-$4",["0"]]]],"CA":["1","011","(?:[2-8]\\d|90)\\d{8}|3\\d{6}",[7,10],0,"1",0,0,0,0,0,[["(?:2(?:04|[23]6|[48]9|50|63)|3(?:06|43|54|6[578]|82)|4(?:03|1[68]|[26]8|3[178]|50|74)|5(?:06|1[49]|48|79|8[147])|6(?:04|[18]3|39|47|72)|7(?:0[59]|42|53|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}",[10]],["",[10]],["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}",[10]],["900[2-9]\\d{6}",[10]],["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|(?:5(?:00|2[125-9]|33|44|66|77|88)|622)[2-9]\\d{6}",[10]],0,["310\\d{4}",[7]],0,["600[2-9]\\d{6}",[10]]]],"CC":["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}",[6,7,8,9,10,12],0,"0",0,"([59]\\d{7})$|0","8$1",0,0,[["8(?:51(?:0(?:02|31|60|89)|1(?:18|76)|223)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}",[9]],["4(?:(?:79|94)[01]|83[0-389])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,0,["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],"CD":["243","00","[189]\\d{8}|[1-68]\\d{6}",[7,9],[["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["88"],"0$1"],["(\\d{2})(\\d{5})","$1 $2",["[1-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[89]"],"0$1"]],"0"],"CF":["236","00","(?:[27]\\d{3}|8776)\\d{4}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[278]"]]]],"CG":["242","00","222\\d{6}|(?:0\\d|80)\\d{7}",[9],[["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["8"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[02]"]]]],"CH":["41","00","8\\d{11}|[2-9]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8[047]|90"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-79]|81"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["8"],"0$1"]],"0"],"CI":["225","00","[02]\\d{9}",[10],[["(\\d{2})(\\d{2})(\\d)(\\d{5})","$1 $2 $3 $4",["2"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3 $4",["0"]]]],"CK":["682","00","[2-578]\\d{4}",[5],[["(\\d{2})(\\d{3})","$1 $2",["[2-578]"]]]],"CL":["56","(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0","12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}",[9,10,11],[["(\\d{5})(\\d{4})","$1 $2",["219","2196"],"($1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["44"]],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2[1-36]"],"($1)"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["9[2-9]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"],"($1)"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["60|8"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]],["(\\d{3})(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3 $4",["60"]]]],"CM":["237","00","[26]\\d{8}|88\\d{6,7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["88"]],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["[26]|88"]]]],"CN":["86","00|1(?:[12]\\d|79)\\d\\d00","1[127]\\d{8,9}|2\\d{9}(?:\\d{2})?|[12]\\d{6,7}|86\\d{6}|(?:1[03-689]\\d|6)\\d{7,9}|(?:[3-579]\\d|8[0-57-9])\\d{6,9}",[7,8,9,10,11,12],[["(\\d{2})(\\d{5,6})","$1 $2",["(?:10|2[0-57-9])[19]","(?:10|2[0-57-9])(?:10|9[56])","10(?:10|9[56])|2[0-57-9](?:100|9[56])"],"0$1"],["(\\d{3})(\\d{5,6})","$1 $2",["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]","(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]","85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])","85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["(?:4|80)0"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["10|2(?:[02-57-9]|1[1-9])","10|2(?:[02-57-9]|1[1-9])","10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"],"0$1",1],["(\\d{3})(\\d{7,8})","$1 $2",["9"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["80"],"0$1",1],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["[3-578]"],"0$1",1],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["1[3-9]"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3 $4",["[12]"],"0$1",1]],"0",0,"(1(?:[12]\\d|79)\\d\\d)|0",0,0,0,0,"00"],"CO":["57","00(?:4(?:[14]4|56)|[579])","(?:60\\d\\d|9101)\\d{6}|(?:1\\d|3)\\d{9}",[10,11],[["(\\d{3})(\\d{7})","$1 $2",["6"],"($1)"],["(\\d{3})(\\d{7})","$1 $2",["3[0-357]|91"]],["(\\d)(\\d{3})(\\d{7})","$1-$2-$3",["1"],"0$1",0,"$1 $2 $3"]],"0",0,"0(4(?:[14]4|56)|[579])?"],"CR":["506","00","(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}",[8,10],[["(\\d{4})(\\d{4})","$1 $2",["[2-7]|8[3-9]"]],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["[89]"]]],0,0,"(19(?:0[0-2468]|1[09]|20|66|77|99))"],"CU":["53","119","[27]\\d{6,7}|[34]\\d{5,7}|(?:5|8\\d\\d)\\d{7}",[6,7,8,10],[["(\\d{2})(\\d{4,6})","$1 $2",["2[1-4]|[34]"],"(0$1)"],["(\\d)(\\d{6,7})","$1 $2",["7"],"(0$1)"],["(\\d)(\\d{7})","$1 $2",["5"],"0$1"],["(\\d{3})(\\d{7})","$1 $2",["8"],"0$1"]],"0"],"CV":["238","0","(?:[2-59]\\d\\d|800)\\d{4}",[7],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[2-589]"]]]],"CW":["599","00","(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[3467]"]],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["9[4-8]"]]],0,0,0,0,0,"[69]"],"CX":["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{8}(?:\\d{2})?|8[0-24-9]\\d{7})|[148]\\d{8}|1\\d{5,7}",[6,7,8,9,10,12],0,"0",0,"([59]\\d{7})$|0","8$1",0,0,[["8(?:51(?:0(?:01|30|59|88)|1(?:17|46|75)|2(?:22|35))|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}",[9]],["4(?:(?:79|94)[01]|83[0-389])\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[016-9]|7[02-8]|8[0-24-9]|9[0-37-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,0,["14(?:5(?:1[0458]|[23][458])|71\\d)\\d{4}",[9]],["13(?:00\\d{6}(?:\\d{2})?|45[0-4]\\d{3})|13\\d{4}",[6,8,10,12]]],"0011"],"CY":["357","00","(?:[279]\\d|[58]0)\\d{6}",[8],[["(\\d{2})(\\d{6})","$1 $2",["[257-9]"]]]],"CZ":["420","00","(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[2-8]|9[015-7]"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{2})","$1 $2 $3 $4",["96"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]]]],"DE":["49","00","[2579]\\d{5,14}|49(?:[34]0|69|8\\d)\\d\\d?|49(?:37|49|60|7[089]|9\\d)\\d{1,3}|49(?:2[024-9]|3[2-689]|7[1-7])\\d{1,8}|(?:1|[368]\\d|4[0-8])\\d{3,13}|49(?:[015]\\d|2[13]|31|[46][1-8])\\d{1,9}",[4,5,6,7,8,9,10,11,12,13,14,15],[["(\\d{2})(\\d{3,13})","$1 $2",["3[02]|40|[68]9"],"0$1"],["(\\d{3})(\\d{3,12})","$1 $2",["2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1","2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1"],"0$1"],["(\\d{4})(\\d{2,11})","$1 $2",["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]","[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["138"],"0$1"],["(\\d{5})(\\d{2,10})","$1 $2",["3"],"0$1"],["(\\d{3})(\\d{5,11})","$1 $2",["181"],"0$1"],["(\\d{3})(\\d)(\\d{4,10})","$1 $2 $3",["1(?:3|80)|9"],"0$1"],["(\\d{3})(\\d{7,8})","$1 $2",["1[67]"],"0$1"],["(\\d{3})(\\d{7,12})","$1 $2",["8"],"0$1"],["(\\d{5})(\\d{6})","$1 $2",["185","1850","18500"],"0$1"],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{4})(\\d{7})","$1 $2",["18[68]"],"0$1"],["(\\d{5})(\\d{6})","$1 $2",["15[0568]"],"0$1"],["(\\d{4})(\\d{7})","$1 $2",["15[1279]"],"0$1"],["(\\d{3})(\\d{8})","$1 $2",["18"],"0$1"],["(\\d{3})(\\d{2})(\\d{7,8})","$1 $2 $3",["1(?:6[023]|7)"],"0$1"],["(\\d{4})(\\d{2})(\\d{7})","$1 $2 $3",["15[279]"],"0$1"],["(\\d{3})(\\d{2})(\\d{8})","$1 $2 $3",["15"],"0$1"]],"0"],"DJ":["253","00","(?:2\\d|77)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[27]"]]]],"DK":["45","00","[2-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-9]"]]]],"DM":["1","011","(?:[58]\\d\\d|767|900)\\d{7}",[10],0,"1",0,"([2-7]\\d{6})$|1","767$1",0,"767"],"DO":["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,0,0,0,"8001|8[024]9"],"DZ":["213","00","(?:[1-4]|[5-79]\\d|80)\\d{7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[1-4]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["9"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-8]"],"0$1"]],"0"],"EC":["593","00","1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}",[8,9,10,11],[["(\\d)(\\d{3})(\\d{4})","$1 $2-$3",["[2-7]"],"(0$1)",0,"$1-$2-$3"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["9"],"0$1"],["(\\d{4})(\\d{3})(\\d{3,4})","$1 $2 $3",["1"]]],"0"],"EE":["372","00","8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}",[7,8,10],[["(\\d{3})(\\d{4})","$1 $2",["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88","[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88"]],["(\\d{4})(\\d{3,4})","$1 $2",["[45]|8(?:00|[1-49])","[45]|8(?:00[1-9]|[1-49])"]],["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["7"]],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["8"]]]],"EG":["20","00","[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}",[8,9,10],[["(\\d)(\\d{7,8})","$1 $2",["[23]"],"0$1"],["(\\d{2})(\\d{6,7})","$1 $2",["1[35]|[4-6]|8[2468]|9[235-7]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[189]"],"0$1"]],"0"],"EH":["212","00","[5-8]\\d{8}",[9],0,"0",0,0,0,0,"528[89]"],"ER":["291","00","[178]\\d{6}",[7],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[178]"],"0$1"]],"0"],"ES":["34","00","[5-9]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[89]00"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-9]"]]]],"ET":["251","00","(?:11|[2-579]\\d)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-579]"],"0$1"]],"0"],"FI":["358","00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))","[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}",[5,6,7,8,9,10,11,12],[["(\\d)(\\d{4,9})","$1 $2",["[2568][1-8]|3(?:0[1-9]|[1-9])|9"],"0$1"],["(\\d{3})(\\d{3,7})","$1 $2",["[12]00|[368]|70[07-9]"],"0$1"],["(\\d{2})(\\d{4,8})","$1 $2",["[1245]|7[135]"],"0$1"],["(\\d{2})(\\d{6,10})","$1 $2",["7"],"0$1"]],"0",0,0,0,0,"1[03-79]|[2-9]",0,"00"],"FJ":["679","0(?:0|52)","45\\d{5}|(?:0800\\d|[235-9])\\d{6}",[7,11],[["(\\d{3})(\\d{4})","$1 $2",["[235-9]|45"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["0"]]],0,0,0,0,0,0,0,"00"],"FK":["500","00","[2-7]\\d{4}",[5]],"FM":["691","00","(?:[39]\\d\\d|820)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[389]"]]]],"FO":["298","00","[2-9]\\d{5}",[6],[["(\\d{6})","$1",["[2-9]"]]],0,0,"(10(?:01|[12]0|88))"],"FR":["33","00","[1-9]\\d{8}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0 $1"],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["[1-79]"],"0$1"]],"0"],"GA":["241","00","(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}",[7,8],[["(\\d)(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-7]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["0"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["11|[67]"],"0$1"]],0,0,"0(11\\d{6}|60\\d{6}|61\\d{6}|6[256]\\d{6}|7[467]\\d{6})","$1"],"GB":["44","00","[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}",[7,9,10],[["(\\d{3})(\\d{4})","$1 $2",["800","8001","80011","800111","8001111"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["845","8454","84546","845464"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["800"],"0$1"],["(\\d{5})(\\d{4,5})","$1 $2",["1(?:38|5[23]|69|76|94)","1(?:(?:38|69)7|5(?:24|39)|768|946)","1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"],"0$1"],["(\\d{4})(\\d{5,6})","$1 $2",["1(?:[2-69][02-9]|[78])"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["[25]|7(?:0|6[02-9])","[25]|7(?:0|6(?:[03-9]|2[356]))"],"0$1"],["(\\d{4})(\\d{6})","$1 $2",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[1389]"],"0$1"]],"0",0,0,0,0,0,[["(?:1(?:1(?:3(?:[0-58]\\d\\d|73[0235])|4(?:[0-5]\\d\\d|69[7-9]|70[0-579])|(?:(?:5[0-26-9]|[78][0-49])\\d|6(?:[0-4]\\d|50))\\d)|(?:2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)\\d|1(?:[0-7]\\d|8[0-2]))|(?:3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\d)\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d{3})\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d{3}",[9,10]],["7(?:457[0-57-9]|700[01]|911[028])\\d{5}|7(?:[1-3]\\d\\d|4(?:[0-46-9]\\d|5[0-689])|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[024-9]\\d|1[02-9]|3[0-689]))\\d{6}",[10]],["80[08]\\d{7}|800\\d{6}|8001111"],["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d",[7,10]],["70\\d{8}",[10]],0,["(?:3[0347]|55)\\d{8}",[10]],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",[10]],["56\\d{8}",[10]]],0," x"],"GD":["1","011","(?:473|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([2-9]\\d{6})$|1","473$1",0,"473"],"GE":["995","00","(?:[3-57]\\d\\d|800)\\d{6}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["70"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["32"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[57]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[348]"],"0$1"]],"0"],"GF":["594","00","[56]94\\d{6}|(?:80|9\\d)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[56]|9[47]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[89]"],"0$1"]],"0"],"GG":["44","00","(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?",[7,9,10],0,"0",0,"([25-9]\\d{5})$|0","1481$1",0,0,[["1481[25-9]\\d{5}",[10]],["7(?:(?:781|839)\\d|911[17])\\d{5}",[10]],["80[08]\\d{7}|800\\d{6}|8001111"],["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d",[7,10]],["70\\d{8}",[10]],0,["(?:3[0347]|55)\\d{8}",[10]],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}",[10]],["56\\d{8}",[10]]]],"GH":["233","00","(?:[235]\\d{3}|800)\\d{5}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["8"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[235]"],"0$1"]],"0"],"GI":["350","00","(?:[25]\\d|60)\\d{6}",[8],[["(\\d{3})(\\d{5})","$1 $2",["2"]]]],"GL":["299","00","(?:19|[2-689]\\d|70)\\d{4}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["19|[2-9]"]]]],"GM":["220","00","[2-9]\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-9]"]]]],"GN":["224","00","722\\d{6}|(?:3|6\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["3"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[67]"]]]],"GP":["590","00","590\\d{6}|(?:69|80|9\\d)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0",0,0,0,0,0,[["590(?:0[1-68]|[14][0-24-9]|2[0-68]|3[1289]|5[3-579]|[68][0-689]|7[08]|9\\d)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["9(?:(?:395|76[018])\\d|475[0-2])\\d{4}"]]],"GQ":["240","00","222\\d{6}|(?:3\\d|55|[89]0)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[235]"]],["(\\d{3})(\\d{6})","$1 $2",["[89]"]]]],"GR":["30","00","5005000\\d{3}|8\\d{9,11}|(?:[269]\\d|70)\\d{8}",[10,11,12],[["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["21|7"]],["(\\d{4})(\\d{6})","$1 $2",["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[2689]"]],["(\\d{3})(\\d{3,4})(\\d{5})","$1 $2 $3",["8"]]]],"GT":["502","00","(?:1\\d{3}|[2-7])\\d{7}",[8,11],[["(\\d{4})(\\d{4})","$1 $2",["[2-7]"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]]]],"GU":["1","011","(?:[58]\\d\\d|671|900)\\d{7}",[10],0,"1",0,"([3-9]\\d{6})$|1","671$1",0,"671"],"GW":["245","00","[49]\\d{8}|4\\d{6}",[7,9],[["(\\d{3})(\\d{4})","$1 $2",["40"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[49]"]]]],"GY":["592","001","9008\\d{3}|(?:[2-467]\\d\\d|862)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-46-9]"]]]],"HK":["852","00(?:30|5[09]|[126-9]?)","8[0-46-9]\\d{6,7}|9\\d{4,7}|(?:[2-7]|9\\d{3})\\d{7}",[5,6,7,8,9,11],[["(\\d{3})(\\d{2,5})","$1 $2",["900","9003"]],["(\\d{4})(\\d{4})","$1 $2",["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]],["(\\d{3})(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]]],0,0,0,0,0,0,0,"00"],"HN":["504","00","8\\d{10}|[237-9]\\d{7}",[8,11],[["(\\d{4})(\\d{4})","$1-$2",["[237-9]"]]]],"HR":["385","00","(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}",[6,7,8,9],[["(\\d{2})(\\d{2})(\\d{2,3})","$1 $2 $3",["6[01]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{4})(\\d{3})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[67]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["9"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-5]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"],"0$1"]],"0"],"HT":["509","00","(?:[2-489]\\d|55)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[2-589]"]]]],"HU":["36","00","[235-7]\\d{8}|[1-9]\\d{7}",[8,9],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["1"],"(06 $1)"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]"],"(06 $1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-9]"],"06 $1"]],"06"],"ID":["62","00[89]","(?:(?:00[1-9]|8\\d)\\d{4}|[1-36])\\d{6}|00\\d{10}|[1-9]\\d{8,10}|[2-9]\\d{7}",[7,8,9,10,11,12,13],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["15"]],["(\\d{2})(\\d{5,9})","$1 $2",["2[124]|[36]1"],"(0$1)"],["(\\d{3})(\\d{5,7})","$1 $2",["800"],"0$1"],["(\\d{3})(\\d{5,8})","$1 $2",["[2-79]"],"(0$1)"],["(\\d{3})(\\d{3,4})(\\d{3})","$1-$2-$3",["8[1-35-9]"],"0$1"],["(\\d{3})(\\d{6,8})","$1 $2",["1"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["804"],"0$1"],["(\\d{3})(\\d)(\\d{3})(\\d{3})","$1 $2 $3 $4",["80"],"0$1"],["(\\d{3})(\\d{4})(\\d{4,5})","$1-$2-$3",["8"],"0$1"]],"0"],"IE":["353","00","(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}",[7,8,9,10],[["(\\d{2})(\\d{5})","$1 $2",["2[24-9]|47|58|6[237-9]|9[35-9]"],"(0$1)"],["(\\d{3})(\\d{5})","$1 $2",["[45]0"],"(0$1)"],["(\\d)(\\d{3,4})(\\d{4})","$1 $2 $3",["1"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2569]|4[1-69]|7[14]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["70"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["81"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[78]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["4"],"(0$1)"],["(\\d{2})(\\d)(\\d{3})(\\d{4})","$1 $2 $3 $4",["8"],"0$1"]],"0"],"IL":["972","0(?:0|1[2-9])","1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}",[7,8,9,10,11,12],[["(\\d{4})(\\d{3})","$1-$2",["125"]],["(\\d{4})(\\d{2})(\\d{2})","$1-$2-$3",["121"]],["(\\d)(\\d{3})(\\d{4})","$1-$2-$3",["[2-489]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["[57]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1-$2-$3",["12"]],["(\\d{4})(\\d{6})","$1-$2",["159"]],["(\\d)(\\d{3})(\\d{3})(\\d{3})","$1-$2-$3-$4",["1[7-9]"]],["(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})","$1-$2 $3-$4",["15"]]],"0"],"IM":["44","00","1624\\d{6}|(?:[3578]\\d|90)\\d{8}",[10],0,"0",0,"([25-8]\\d{5})$|0","1624$1",0,"74576|(?:16|7[56])24"],"IN":["91","00","(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}",[8,9,10,11,12,13],[["(\\d{8})","$1",["5(?:0|2[23]|3[03]|[67]1|88)","5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)","5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"],0,1],["(\\d{4})(\\d{4,5})","$1 $2",["180","1800"],0,1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["140"],0,1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["11|2[02]|33|4[04]|79[1-7]|80[2-46]","11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])","11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]","1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]","1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"],"0$1",1],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807","1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]","1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"],"0$1",1],["(\\d{5})(\\d{5})","$1 $2",["[6-9]"],"0$1",1],["(\\d{4})(\\d{2,4})(\\d{4})","$1 $2 $3",["1(?:6|8[06])","1(?:6|8[06]0)"],0,1],["(\\d{4})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["18"],0,1]],"0"],"IO":["246","00","3\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["3"]]]],"IQ":["964","00","(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-6]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"]],"0"],"IR":["98","00","[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}",[4,5,6,7,10],[["(\\d{4,5})","$1",["96"],"0$1"],["(\\d{2})(\\d{4,5})","$1 $2",["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["9"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["[1-8]"],"0$1"]],"0"],"IS":["354","00|1(?:0(?:01|[12]0)|100)","(?:38\\d|[4-9])\\d{6}",[7,9],[["(\\d{3})(\\d{4})","$1 $2",["[4-9]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["3"]]],0,0,0,0,0,0,0,"00"],"IT":["39","00","0\\d{5,10}|1\\d{8,10}|3(?:[0-8]\\d{7,10}|9\\d{7,8})|(?:55|70)\\d{8}|8\\d{5}(?:\\d{2,4})?",[6,7,8,9,10,11],[["(\\d{2})(\\d{4,6})","$1 $2",["0[26]"]],["(\\d{3})(\\d{3,6})","$1 $2",["0[13-57-9][0159]|8(?:03|4[17]|9[2-5])","0[13-57-9][0159]|8(?:03|4[17]|9(?:2|3[04]|[45][0-4]))"]],["(\\d{4})(\\d{2,6})","$1 $2",["0(?:[13-579][2-46-8]|8[236-8])"]],["(\\d{4})(\\d{4})","$1 $2",["894"]],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["0[26]|5"]],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["1(?:44|[679])|[378]"]],["(\\d{3})(\\d{3,4})(\\d{4})","$1 $2 $3",["0[13-57-9][0159]|14"]],["(\\d{2})(\\d{4})(\\d{5})","$1 $2 $3",["0[26]"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["0"]],["(\\d{3})(\\d{4})(\\d{4,5})","$1 $2 $3",["3"]]],0,0,0,0,0,0,[["0669[0-79]\\d{1,6}|0(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\d|6[0-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d{2,7}"],["3[1-9]\\d{8}|3[2-9]\\d{7}",[9,10]],["80(?:0\\d{3}|3)\\d{3}",[6,9]],["(?:0878\\d{3}|89(?:2\\d|3[04]|4(?:[0-4]|[5-9]\\d\\d)|5[0-4]))\\d\\d|(?:1(?:44|6[346])|89(?:38|5[5-9]|9))\\d{6}",[6,8,9,10]],["1(?:78\\d|99)\\d{6}",[9,10]],0,0,0,["55\\d{8}",[10]],["84(?:[08]\\d{3}|[17])\\d{3}",[6,9]]]],"JE":["44","00","1534\\d{6}|(?:[3578]\\d|90)\\d{8}",[10],0,"0",0,"([0-24-8]\\d{5})$|0","1534$1",0,0,[["1534[0-24-8]\\d{5}"],["7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97[7-9]))\\d{5}"],["80(?:07(?:35|81)|8901)\\d{4}"],["(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}"],["701511\\d{4}"],0,["(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}"],["76(?:464|652)\\d{5}|76(?:0[0-28]|2[356]|34|4[01347]|5[49]|6[0-369]|77|8[14]|9[139])\\d{6}"],["56\\d{8}"]]],"JM":["1","011","(?:[58]\\d\\d|658|900)\\d{7}",[10],0,"1",0,0,0,0,"658|876"],"JO":["962","00","(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}",[8,9],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2356]|87"],"(0$1)"],["(\\d{3})(\\d{5,6})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["70"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["7"],"0$1"]],"0"],"JP":["81","010","00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}",[8,9,10,11,12,13,14,15,16,17],[["(\\d{3})(\\d{3})(\\d{3})","$1-$2-$3",["(?:12|57|99)0"],"0$1"],["(\\d{4})(\\d)(\\d{4})","$1-$2-$3",["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:80|9[16])","1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[7-9]|96)|477|51[2-9]|636)|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]","1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[7-9]|96[2457-9])|477|51[2-9]|636[457-9])|9(?:802|9(?:1[23]|69))|1(?:45|58)[67]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["60"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1-$2-$3",["[36]|4(?:2[09]|7[01])","[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[27-9]|49|51|6|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|51|6(?:[0-24]|36|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:25[0468]|422|838)[01]|(?:47[59]|59[89]|8(?:6[68]|9))[019]","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|51|6(?:[0-24]|36[23]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:25[0468]|422|838)[01]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"],"0$1"],["(\\d{3})(\\d{2})(\\d{4})","$1-$2-$3",["[14]|[289][2-9]|5[3-9]|7[2-4679]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["800"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2-$3",["[257-9]"],"0$1"]],"0"],"KE":["254","000","(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}",[7,8,9,10],[["(\\d{2})(\\d{5,7})","$1 $2",["[24-6]"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["[17]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[89]"],"0$1"]],"0"],"KG":["996","00","8\\d{9}|(?:[235-8]\\d|99)\\d{7}",[9,10],[["(\\d{4})(\\d{5})","$1 $2",["3(?:1[346]|[24-79])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[235-79]|88"],"0$1"],["(\\d{3})(\\d{3})(\\d)(\\d{2,3})","$1 $2 $3 $4",["8"],"0$1"]],"0"],"KH":["855","00[14-9]","1\\d{9}|[1-9]\\d{7,8}",[8,9,10],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-9]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],"KI":["686","00","(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}",[5,8],0,"0"],"KM":["269","00","[3478]\\d{6}",[7],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[3478]"]]]],"KN":["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([2-7]\\d{6})$|1","869$1",0,"869"],"KP":["850","00|99","85\\d{6}|(?:19\\d|[2-7])\\d{7}",[8,10],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2-7]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"]],"0"],"KR":["82","00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))","00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}",[5,6,8,9,10,11,12,13,14],[["(\\d{2})(\\d{3,4})","$1-$2",["(?:3[1-3]|[46][1-4]|5[1-5])1"],"0$1"],["(\\d{4})(\\d{4})","$1-$2",["1"]],["(\\d)(\\d{3,4})(\\d{4})","$1-$2-$3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["60|8"],"0$1"],["(\\d{2})(\\d{3,4})(\\d{4})","$1-$2-$3",["[1346]|5[1-5]"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2-$3",["[57]"],"0$1"],["(\\d{2})(\\d{5})(\\d{4})","$1-$2-$3",["5"],"0$1"]],"0",0,"0(8(?:[1-46-8]|5\\d\\d))?"],"KW":["965","00","18\\d{5}|(?:[2569]\\d|41)\\d{6}",[7,8],[["(\\d{4})(\\d{3,4})","$1 $2",["[169]|2(?:[235]|4[1-35-9])|52"]],["(\\d{3})(\\d{5})","$1 $2",["[245]"]]]],"KY":["1","011","(?:345|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([2-9]\\d{6})$|1","345$1",0,"345"],"KZ":["7","810","(?:33622|8\\d{8})\\d{5}|[78]\\d{9}",[10,14],0,"8",0,0,0,0,"33|7",0,"8~10"],"LA":["856","00","[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}",[8,9,10],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["2[13]|3[14]|[4-8]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["30[013-9]"],"0$1"],["(\\d{2})(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[23]"],"0$1"]],"0"],"LB":["961","00","[27-9]\\d{7}|[13-9]\\d{6}",[7,8],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[27-9]"]]],"0"],"LC":["1","011","(?:[58]\\d\\d|758|900)\\d{7}",[10],0,"1",0,"([2-8]\\d{6})$|1","758$1",0,"758"],"LI":["423","00","[68]\\d{8}|(?:[2378]\\d|90)\\d{5}",[7,9],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[2379]|8(?:0[09]|7)","[2379]|8(?:0(?:02|9)|7)"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["69"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]]],"0",0,"(1001)|0"],"LK":["94","00","[1-9]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[1-689]"],"0$1"]],"0"],"LR":["231","00","(?:[25]\\d|33|77|88)\\d{7}|(?:2\\d|[4-6])\\d{6}",[7,8,9],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[4-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[23578]"],"0$1"]],"0"],"LS":["266","00","(?:[256]\\d\\d|800)\\d{5}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[2568]"]]]],"LT":["370","00","(?:[3469]\\d|52|[78]0)\\d{6}",[8],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["52[0-7]"],"(8-$1)",1],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[7-9]"],"8 $1",1],["(\\d{2})(\\d{6})","$1 $2",["37|4(?:[15]|6[1-8])"],"(8-$1)",1],["(\\d{3})(\\d{5})","$1 $2",["[3-6]"],"(8-$1)",1]],"8",0,"[08]"],"LU":["352","00","35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}",[4,5,6,7,8,9,10,11],[["(\\d{2})(\\d{3})","$1 $2",["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]],["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["20[2-689]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})","$1 $2 $3 $4",["2(?:[0367]|4[3-8])"]],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["80[01]|90[015]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["20"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})","$1 $2 $3 $4 $5",["2(?:[0367]|4[3-8])"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})","$1 $2 $3 $4",["[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]"]]],0,0,"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)"],"LV":["371","00","(?:[268]\\d|90)\\d{6}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[269]|8[01]"]]]],"LY":["218","00","[2-9]\\d{8}",[9],[["(\\d{2})(\\d{7})","$1-$2",["[2-9]"],"0$1"]],"0"],"MA":["212","00","[5-8]\\d{8}",[9],[["(\\d{5})(\\d{4})","$1-$2",["5(?:29|38)","5(?:29[1289]|389)","529(?:1[1-46-9]|2[013-8]|90)|5(?:298|389)[0-46-9]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["5[45]"],"0$1"],["(\\d{4})(\\d{5})","$1-$2",["5(?:2[2-489]|3[5-9]|9)|892","5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892"],"0$1"],["(\\d{2})(\\d{7})","$1-$2",["8"],"0$1"],["(\\d{3})(\\d{6})","$1-$2",["[5-7]"],"0$1"]],"0",0,0,0,0,0,[["5293[01]\\d{4}|5(?:2(?:[0-25-7]\\d|3[1-578]|4[02-46-8]|8[0235-7]|9[0-289])|3(?:[0-47]\\d|5[02-9]|6[02-8]|8[0189]|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}"],["(?:6(?:[0-79]\\d|8[0-247-9])|7(?:[017]\\d|2[0-2]|6[0-8]|8[0-3]))\\d{6}"],["80\\d{7}"],["89\\d{7}"],0,0,0,0,["592(?:4[0-2]|93)\\d{4}"]]],"MC":["377","00","(?:[3489]|6\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["4"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[389]"]],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["6"],"0$1"]],"0"],"MD":["373","00","(?:[235-7]\\d|[89]0)\\d{6}",[8],[["(\\d{3})(\\d{5})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["22|3"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[25-7]"],"0$1"]],"0"],"ME":["382","00","(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-9]"],"0$1"]],"0"],"MF":["590","00","590\\d{6}|(?:69|80|9\\d)\\d{7}",[9],0,"0",0,0,0,0,0,[["590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\d{4}"],["69(?:0\\d\\d|1(?:2[2-9]|3[0-5]))\\d{4}"],["80[0-5]\\d{6}"],0,0,0,0,0,["9(?:(?:395|76[018])\\d|475[0-2])\\d{4}"]]],"MG":["261","00","[23]\\d{8}",[9],[["(\\d{2})(\\d{2})(\\d{3})(\\d{2})","$1 $2 $3 $4",["[23]"],"0$1"]],"0",0,"([24-9]\\d{6})$|0","20$1"],"MH":["692","011","329\\d{4}|(?:[256]\\d|45)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1-$2",["[2-6]"]]],"1"],"MK":["389","00","[2-578]\\d{7}",[8],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2|34[47]|4(?:[37]7|5[47]|64)"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[347]"],"0$1"],["(\\d{3})(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["[58]"],"0$1"]],"0"],"ML":["223","00","[24-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24-9]"]]]],"MM":["95","00","1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}",[6,7,8,9,10],[["(\\d)(\\d{2})(\\d{3})","$1 $2 $3",["16|2"],"0$1"],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[12]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[4-7]|8[1-35]"],"0$1"],["(\\d)(\\d{3})(\\d{4,6})","$1 $2 $3",["9(?:2[0-4]|[35-9]|4[137-9])"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["92"],"0$1"],["(\\d)(\\d{5})(\\d{4})","$1 $2 $3",["9"],"0$1"]],"0"],"MN":["976","001","[12]\\d{7,9}|[5-9]\\d{7}",[8,9,10],[["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[12]1"],"0$1"],["(\\d{4})(\\d{4})","$1 $2",["[5-9]"]],["(\\d{3})(\\d{5,6})","$1 $2",["[12]2[1-3]"],"0$1"],["(\\d{4})(\\d{5,6})","$1 $2",["[12](?:27|3[2-8]|4[2-68]|5[1-4689])","[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"],"0$1"],["(\\d{5})(\\d{4,5})","$1 $2",["[12]"],"0$1"]],"0"],"MO":["853","00","0800\\d{3}|(?:28|[68]\\d)\\d{6}",[7,8],[["(\\d{4})(\\d{3})","$1 $2",["0"]],["(\\d{4})(\\d{4})","$1 $2",["[268]"]]]],"MP":["1","011","[58]\\d{9}|(?:67|90)0\\d{7}",[10],0,"1",0,"([2-9]\\d{6})$|1","670$1",0,"670"],"MQ":["596","00","596\\d{6}|(?:69|80|9\\d)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0"],"MR":["222","00","(?:[2-4]\\d\\d|800)\\d{5}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-48]"]]]],"MS":["1","011","(?:[58]\\d\\d|664|900)\\d{7}",[10],0,"1",0,"([34]\\d{6})$|1","664$1",0,"664"],"MT":["356","00","3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[2357-9]"]]]],"MU":["230","0(?:0|[24-7]0|3[03])","(?:[57]|8\\d\\d)\\d{7}|[2-468]\\d{6}",[7,8,10],[["(\\d{3})(\\d{4})","$1 $2",["[2-46]|8[013]"]],["(\\d{4})(\\d{4})","$1 $2",["[57]"]],["(\\d{5})(\\d{5})","$1 $2",["8"]]],0,0,0,0,0,0,0,"020"],"MV":["960","0(?:0|19)","(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}",[7,10],[["(\\d{3})(\\d{4})","$1-$2",["[34679]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[89]"]]],0,0,0,0,0,0,0,"00"],"MW":["265","00","(?:[1289]\\d|31|77)\\d{7}|1\\d{6}",[7,9],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["1[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["2"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[137-9]"],"0$1"]],"0"],"MX":["52","0[09]","1(?:(?:[27]2|44|99)[1-9]|65[0-689])\\d{7}|(?:1(?:[01]\\d|2[13-9]|[35][1-9]|4[0-35-9]|6[0-46-9]|7[013-9]|8[1-79]|9[1-8])|[2-9]\\d)\\d{8}",[10,11],[["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["33|5[56]|81"],0,1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[2-9]"],0,1],["(\\d)(\\d{2})(\\d{4})(\\d{4})","$2 $3 $4",["1(?:33|5[56]|81)"],0,1],["(\\d)(\\d{3})(\\d{3})(\\d{4})","$2 $3 $4",["1"],0,1]],"01",0,"0(?:[12]|4[45])|1",0,0,0,0,"00"],"MY":["60","00","1\\d{8,9}|(?:3\\d|[4-9])\\d{7}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1-$2 $3",["[4-79]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1-$2 $3",["1(?:[02469]|[378][1-9]|53)|8","1(?:[02469]|[37][1-9]|53|8(?:[1-46-9]|5[7-9]))|8"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1-$2 $3",["3"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{4})","$1-$2-$3-$4",["1(?:[367]|80)"]],["(\\d{3})(\\d{3})(\\d{4})","$1-$2 $3",["15"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2 $3",["1"],"0$1"]],"0"],"MZ":["258","00","(?:2|8\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["2|8[2-79]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]]]],"NA":["264","00","[68]\\d{7,8}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["88"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["6"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["87"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"]],"0"],"NC":["687","00","(?:050|[2-57-9]\\d\\d)\\d{3}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1.$2.$3",["[02-57-9]"]]]],"NE":["227","00","[027-9]\\d{7}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["08"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[089]|2[013]|7[04]"]]]],"NF":["672","00","[13]\\d{5}",[6],[["(\\d{2})(\\d{4})","$1 $2",["1[0-3]"]],["(\\d)(\\d{5})","$1 $2",["[13]"]]],0,0,"([0-258]\\d{4})$","3$1"],"NG":["234","009","(?:[124-7]|9\\d{3})\\d{6}|[1-9]\\d{7}|[78]\\d{9,13}",[7,8,10,11,12,13,14],[["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["78"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[12]|9(?:0[3-9]|[1-9])"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["[3-7]|8[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[7-9]"],"0$1"],["(\\d{3})(\\d{4})(\\d{4,5})","$1 $2 $3",["[78]"],"0$1"],["(\\d{3})(\\d{5})(\\d{5,6})","$1 $2 $3",["[78]"],"0$1"]],"0"],"NI":["505","00","(?:1800|[25-8]\\d{3})\\d{4}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[125-8]"]]]],"NL":["31","00","(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|8\\d{6,9}|9\\d{6,10}|1\\d{4,5}",[5,6,7,8,9,10,11],[["(\\d{3})(\\d{4,7})","$1 $2",["[89]0"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["66"],"0$1"],["(\\d)(\\d{8})","$1 $2",["6"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-578]|91"],"0$1"],["(\\d{3})(\\d{3})(\\d{5})","$1 $2 $3",["9"],"0$1"]],"0"],"NO":["47","00","(?:0|[2-9]\\d{3})\\d{4}",[5,8],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["8"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-79]"]]],0,0,0,0,0,"[02-689]|7[0-8]"],"NP":["977","00","(?:1\\d|9)\\d{9}|[1-9]\\d{7}",[8,10,11],[["(\\d)(\\d{7})","$1-$2",["1[2-6]"],"0$1"],["(\\d{2})(\\d{6})","$1-$2",["1[01]|[2-8]|9(?:[1-59]|[67][2-6])"],"0$1"],["(\\d{3})(\\d{7})","$1-$2",["9"]]],"0"],"NR":["674","00","(?:444|(?:55|8\\d)\\d|666)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[4-68]"]]]],"NU":["683","00","(?:[47]|888\\d)\\d{3}",[4,7],[["(\\d{3})(\\d{4})","$1 $2",["8"]]]],"NZ":["64","0(?:0|161)","[29]\\d{7,9}|50\\d{5}(?:\\d{2,3})?|6[0-35-9]\\d{6}|7\\d{7,8}|8\\d{4,9}|(?:11\\d|[34])\\d{7}",[5,6,7,8,9,10],[["(\\d{2})(\\d{3,8})","$1 $2",["8[1-579]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["50[036-8]|[89]0","50(?:[0367]|88)|[89]0"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["24|[346]|7[2-57-9]|9[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["2(?:10|74)|[59]|80"],"0$1"],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["1|2[028]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,5})","$1 $2 $3",["2(?:[169]|7[0-35-9])|7|86"],"0$1"]],"0",0,0,0,0,0,0,"00"],"OM":["968","00","(?:1505|[279]\\d{3}|500)\\d{4}|800\\d{5,6}",[7,8,9],[["(\\d{3})(\\d{4,6})","$1 $2",["[58]"]],["(\\d{2})(\\d{6})","$1 $2",["2"]],["(\\d{4})(\\d{4})","$1 $2",["[179]"]]]],"PA":["507","00","(?:00800|8\\d{3})\\d{6}|[68]\\d{7}|[1-57-9]\\d{6}",[7,8,10,11],[["(\\d{3})(\\d{4})","$1-$2",["[1-57-9]"]],["(\\d{4})(\\d{4})","$1-$2",["[68]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]]]],"PE":["51","00|19(?:1[124]|77|90)00","(?:[14-8]|9\\d)\\d{7}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["80"],"(0$1)"],["(\\d)(\\d{7})","$1 $2",["1"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["[4-8]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"]]],"0",0,0,0,0,0,0,"00"," Anexo "],"PF":["689","00","4\\d{5}(?:\\d{2})?|8\\d{7,8}",[6,8,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["44"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["4|8[7-9]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]]]],"PG":["675","00|140[1-3]","(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["18|[2-69]|85"]],["(\\d{4})(\\d{4})","$1 $2",["[78]"]]],0,0,0,0,0,0,0,"00"],"PH":["63","00","(?:[2-7]|9\\d)\\d{8}|2\\d{5}|(?:1800|8)\\d{7,9}",[6,8,9,10,11,12,13],[["(\\d)(\\d{5})","$1 $2",["2"],"(0$1)"],["(\\d{4})(\\d{4,6})","$1 $2",["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2","3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"],"(0$1)"],["(\\d{5})(\\d{4})","$1 $2",["346|4(?:27|9[35])|883","3469|4(?:279|9(?:30|56))|8834"],"(0$1)"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[3-7]|8[2-8]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[89]"],"0$1"],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]],["(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})","$1 $2 $3 $4",["1"]]],"0"],"PK":["92","00","122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}",[8,9,10,11,12],[["(\\d{3})(\\d{3})(\\d{2,7})","$1 $2 $3",["[89]0"],"0$1"],["(\\d{4})(\\d{5})","$1 $2",["1"]],["(\\d{3})(\\d{6,7})","$1 $2",["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])","9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]"],"(0$1)"],["(\\d{2})(\\d{7,8})","$1 $2",["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"],"(0$1)"],["(\\d{5})(\\d{5})","$1 $2",["58"],"(0$1)"],["(\\d{3})(\\d{7})","$1 $2",["3"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[24-9]"],"(0$1)"]],"0"],"PL":["48","00","(?:6|8\\d\\d)\\d{7}|[1-9]\\d{6}(?:\\d{2})?|[26]\\d{5}",[6,7,8,9,10],[["(\\d{5})","$1",["19"]],["(\\d{3})(\\d{3})","$1 $2",["11|20|64"]],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1","(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["64"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["21|39|45|5[0137]|6[0469]|7[02389]|8(?:0[14]|8)"]],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[2-8]|[2-7]|8[1-79]|9[145]"]],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["8"]]]],"PM":["508","00","[45]\\d{5}|(?:708|80\\d)\\d{6}",[6,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["[45]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["7"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0$1"]],"0"],"PR":["1","011","(?:[589]\\d\\d|787)\\d{7}",[10],0,"1",0,0,0,0,"787|939"],"PS":["970","00","[2489]2\\d{6}|(?:1\\d|5)\\d{8}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2489]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["5"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],"PT":["351","00","1693\\d{5}|(?:[26-9]\\d|30)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["2[12]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["16|[236-9]"]]]],"PW":["680","01[12]","(?:[24-8]\\d\\d|345|900)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-9]"]]]],"PY":["595","00","59\\d{4,6}|9\\d{5,10}|(?:[2-46-8]\\d|5[0-8])\\d{4,7}",[6,7,8,9,10,11],[["(\\d{3})(\\d{3,6})","$1 $2",["[2-9]0"],"0$1"],["(\\d{2})(\\d{5})","$1 $2",["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"],"(0$1)"],["(\\d{3})(\\d{4,5})","$1 $2",["2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["87"]],["(\\d{3})(\\d{6})","$1 $2",["9(?:[5-79]|8[1-6])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[2-8]"],"0$1"],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["9"]]],"0"],"QA":["974","00","800\\d{4}|(?:2|800)\\d{6}|(?:0080|[3-7])\\d{7}",[7,8,9,11],[["(\\d{3})(\\d{4})","$1 $2",["2[16]|8"]],["(\\d{4})(\\d{4})","$1 $2",["[3-7]"]]]],"RE":["262","00","(?:26|[689]\\d)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2689]"],"0$1"]],"0",0,0,0,0,0,[["26(?:2\\d\\d|3(?:0\\d|1[0-3]))\\d{4}"],["(?:69(?:2\\d\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\d|5[0-5]|6[0-6]|7[0-27]|8[0-8]|9[0-479]))|9(?:399[0-3]|479[0-2]|76(?:2[27]|3[0-37]|9\\d)))\\d{4}"],["80\\d{7}"],["89[1-37-9]\\d{6}"],0,0,0,0,0,["8(?:1[019]|2[0156]|84|90)\\d{6}"]]],"RO":["40","00","(?:[2378]\\d|90)\\d{7}|[23]\\d{5}",[6,9],[["(\\d{3})(\\d{3})","$1 $2",["2[3-6]","2[3-6]\\d9"],"0$1"],["(\\d{2})(\\d{4})","$1 $2",["219|31"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[23]1"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[237-9]"],"0$1"]],"0",0,0,0,0,0,0,0," int "],"RS":["381","00","38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}",[6,7,8,9,10,11,12],[["(\\d{3})(\\d{3,9})","$1 $2",["(?:2[389]|39)0|[7-9]"],"0$1"],["(\\d{2})(\\d{5,10})","$1 $2",["[1-36]"],"0$1"]],"0"],"RU":["7","810","8\\d{13}|[347-9]\\d{9}",[10,14],[["(\\d{4})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["7(?:1[0-8]|2[1-9])","7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:1[23]|[2-9]2))","7(?:1(?:[0-356]2|4[29]|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"],"8 ($1)",1],["(\\d{5})(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["7(?:1[0-68]|2[1-9])","7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))","7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"],"8 ($1)",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"8 ($1)",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2-$3-$4",["[349]|8(?:[02-7]|1[1-8])"],"8 ($1)",1],["(\\d{4})(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3 $4",["8"],"8 ($1)"]],"8",0,0,0,0,"3[04-689]|[489]",0,"8~10"],"RW":["250","00","(?:06|[27]\\d\\d|[89]00)\\d{6}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["0"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[7-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["2"]]],"0"],"SA":["966","00","92\\d{7}|(?:[15]|8\\d)\\d{8}",[9,10],[["(\\d{4})(\\d{5})","$1 $2",["9"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["5"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["81"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]]],"0"],"SB":["677","0[01]","(?:[1-6]|[7-9]\\d\\d)\\d{4}",[5,7],[["(\\d{2})(\\d{5})","$1 $2",["7|8[4-9]|9(?:[1-8]|9[0-8])"]]]],"SC":["248","010|0[0-2]","800\\d{4}|(?:[249]\\d|64)\\d{5}",[7],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[246]|9[57]"]]],0,0,0,0,0,0,0,"00"],"SD":["249","00","[19]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[19]"],"0$1"]],"0"],"SE":["46","00","(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}",[6,7,8,9,10],[["(\\d{2})(\\d{2,3})(\\d{2})","$1-$2 $3",["20"],"0$1",0,"$1 $2 $3"],["(\\d{3})(\\d{4})","$1-$2",["9(?:00|39|44|9)"],"0$1",0,"$1 $2"],["(\\d{2})(\\d{3})(\\d{2})","$1-$2 $3",["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"],"0$1",0,"$1 $2 $3"],["(\\d)(\\d{2,3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["8"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2,3})(\\d{2})","$1-$2 $3",["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"],"0$1",0,"$1 $2 $3"],["(\\d{3})(\\d{2,3})(\\d{3})","$1-$2 $3",["9(?:00|39|44)"],"0$1",0,"$1 $2 $3"],["(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"],"0$1",0,"$1 $2 $3 $4"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["10|7"],"0$1",0,"$1 $2 $3 $4"],["(\\d)(\\d{3})(\\d{3})(\\d{2})","$1-$2 $3 $4",["8"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1-$2 $3 $4",["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{2})(\\d{3})","$1-$2 $3 $4",["9"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1-$2 $3 $4 $5",["[26]"],"0$1",0,"$1 $2 $3 $4 $5"]],"0"],"SG":["65","0[0-3]\\d","(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}",[8,10,11],[["(\\d{4})(\\d{4})","$1 $2",["[369]|8(?:0[1-6]|[1-9])"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]],["(\\d{4})(\\d{4})(\\d{3})","$1 $2 $3",["7"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]]]],"SH":["290","00","(?:[256]\\d|8)\\d{3}",[4,5],0,0,0,0,0,0,"[256]"],"SI":["386","00|10(?:22|66|88|99)","[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}",[5,6,7,8],[["(\\d{2})(\\d{3,6})","$1 $2",["8[09]|9"],"0$1"],["(\\d{3})(\\d{5})","$1 $2",["59|8"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[37][01]|4[0139]|51|6"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[1-57]"],"(0$1)"]],"0",0,0,0,0,0,0,"00"],"SJ":["47","00","0\\d{4}|(?:[489]\\d|[57]9)\\d{6}",[5,8],0,0,0,0,0,0,"79"],"SK":["421","00","[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}",[6,7,9],[["(\\d)(\\d{2})(\\d{3,4})","$1 $2 $3",["21"],"0$1"],["(\\d{2})(\\d{2})(\\d{2,3})","$1 $2 $3",["[3-5][1-8]1","[3-5][1-8]1[67]"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{2})","$1/$2 $3 $4",["2"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[689]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1/$2 $3 $4",["[3-5]"],"0$1"]],"0"],"SL":["232","00","(?:[237-9]\\d|66)\\d{6}",[8],[["(\\d{2})(\\d{6})","$1 $2",["[236-9]"],"(0$1)"]],"0"],"SM":["378","00","(?:0549|[5-7]\\d)\\d{6}",[8,10],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-7]"]],["(\\d{4})(\\d{6})","$1 $2",["0"]]],0,0,"([89]\\d{5})$","0549$1"],"SN":["221","00","(?:[378]\\d|93)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[379]"]]]],"SO":["252","00","[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}",[6,7,8,9],[["(\\d{2})(\\d{4})","$1 $2",["8[125]"]],["(\\d{6})","$1",["[134]"]],["(\\d)(\\d{6})","$1 $2",["[15]|2[0-79]|3[0-46-8]|4[0-7]"]],["(\\d)(\\d{7})","$1 $2",["(?:2|90)4|[67]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[3478]|64|90"]],["(\\d{2})(\\d{5,7})","$1 $2",["1|28|6(?:0[5-7]|[1-35-9])|9[2-9]"]]],"0"],"SR":["597","00","(?:[2-5]|68|[78]\\d)\\d{5}",[6,7],[["(\\d{2})(\\d{2})(\\d{2})","$1-$2-$3",["56"]],["(\\d{3})(\\d{3})","$1-$2",["[2-5]"]],["(\\d{3})(\\d{4})","$1-$2",["[6-8]"]]]],"SS":["211","00","[19]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[19]"],"0$1"]],"0"],"ST":["239","00","(?:22|9\\d)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[29]"]]]],"SV":["503","00","[267]\\d{7}|[89]00\\d{4}(?:\\d{4})?",[7,8,11],[["(\\d{3})(\\d{4})","$1 $2",["[89]"]],["(\\d{4})(\\d{4})","$1 $2",["[267]"]],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["[89]"]]]],"SX":["1","011","7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"(5\\d{6})$|1","721$1",0,"721"],"SY":["963","00","[1-39]\\d{8}|[1-5]\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-5]"],"0$1",1],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1",1]],"0"],"SZ":["268","00","0800\\d{4}|(?:[237]\\d|900)\\d{6}",[8,9],[["(\\d{4})(\\d{4})","$1 $2",["[0237]"]],["(\\d{5})(\\d{4})","$1 $2",["9"]]]],"TA":["290","00","8\\d{3}",[4],0,0,0,0,0,0,"8"],"TC":["1","011","(?:[58]\\d\\d|649|900)\\d{7}",[10],0,"1",0,"([2-479]\\d{6})$|1","649$1",0,"649"],"TD":["235","00|16","(?:22|[69]\\d|77)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2679]"]]],0,0,0,0,0,0,0,"00"],"TG":["228","00","[279]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[279]"]]]],"TH":["66","00[1-9]","(?:001800|[2-57]|[689]\\d)\\d{7}|1\\d{7,9}",[8,9,10,13],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[13-9]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],"TJ":["992","810","[0-57-9]\\d{8}",[9],[["(\\d{6})(\\d)(\\d{2})","$1 $2 $3",["331","3317"]],["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["[34]7|91[78]"]],["(\\d{4})(\\d)(\\d{4})","$1 $2 $3",["3[1-5]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[0-57-9]"]]],0,0,0,0,0,0,0,"8~10"],"TK":["690","00","[2-47]\\d{3,6}",[4,5,6,7]],"TL":["670","00","7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[2-489]|70"]],["(\\d{4})(\\d{4})","$1 $2",["7"]]]],"TM":["993","810","[1-6]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2-$3-$4",["12"],"(8 $1)"],["(\\d{3})(\\d)(\\d{2})(\\d{2})","$1 $2-$3-$4",["[1-5]"],"(8 $1)"],["(\\d{2})(\\d{6})","$1 $2",["6"],"8 $1"]],"8",0,0,0,0,0,0,"8~10"],"TN":["216","00","[2-57-9]\\d{7}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2-57-9]"]]]],"TO":["676","00","(?:0800|(?:[5-8]\\d\\d|999)\\d)\\d{3}|[2-8]\\d{4}",[5,7],[["(\\d{2})(\\d{3})","$1-$2",["[2-4]|50|6[09]|7[0-24-69]|8[05]"]],["(\\d{4})(\\d{3})","$1 $2",["0"]],["(\\d{3})(\\d{4})","$1 $2",["[5-9]"]]]],"TR":["90","00","4\\d{6}|8\\d{11,12}|(?:[2-58]\\d\\d|900)\\d{7}",[7,10,12,13],[["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["512|8[01589]|90"],"0$1",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["5(?:[0-59]|61)","5(?:[0-59]|616)","5(?:[0-59]|6161)"],"0$1",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24][1-8]|3[1-9]"],"(0$1)",1],["(\\d{3})(\\d{3})(\\d{6,7})","$1 $2 $3",["80"],"0$1",1]],"0"],"TT":["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([2-46-8]\\d{6})$|1","868$1",0,"868"],"TV":["688","00","(?:2|7\\d\\d|90)\\d{4}",[5,6,7],[["(\\d{2})(\\d{3})","$1 $2",["2"]],["(\\d{2})(\\d{4})","$1 $2",["90"]],["(\\d{2})(\\d{5})","$1 $2",["7"]]]],"TW":["886","0(?:0[25-79]|19)","[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}",[7,8,9,10,11],[["(\\d{2})(\\d)(\\d{4})","$1 $2 $3",["202"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[258]0"],"0$1"],["(\\d)(\\d{3,4})(\\d{4})","$1 $2 $3",["[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]","[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[49]"],"0$1"],["(\\d{2})(\\d{4})(\\d{4,5})","$1 $2 $3",["7"],"0$1"]],"0",0,0,0,0,0,0,0,"#"],"TZ":["255","00[056]","(?:[25-8]\\d|41|90)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[24]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["5"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[67]"],"0$1"]],"0"],"UA":["380","00","[89]\\d{9}|[3-9]\\d{8}",[9,10],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]","6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]"],"0$1"],["(\\d{4})(\\d{5})","$1 $2",["3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6[0135689]|7[4-6])|6(?:[12][3-7]|[459])","3[1-8]|4(?:[1367]|[45][6-9]|8[4-6])|5(?:[1-5]|6(?:[015689]|3[02389])|7[4-6])|6(?:[12][3-7]|[459])"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[3-7]|89|9[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[89]"],"0$1"]],"0",0,0,0,0,0,0,"0~0"],"UG":["256","00[057]","800\\d{6}|(?:[29]0|[347]\\d)\\d{7}",[9],[["(\\d{4})(\\d{5})","$1 $2",["202","2024"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["[27-9]|4(?:6[45]|[7-9])"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["[34]"],"0$1"]],"0"],"US":["1","011","[2-9]\\d{9}|3\\d{6}",[10],[["(\\d{3})(\\d{4})","$1-$2",["310"],0,1],["(\\d{3})(\\d{3})(\\d{4})","($1) $2-$3",["[2-9]"],0,1,"$1-$2-$3"]],"1",0,0,0,0,0,[["5056(?:[0-35-9]\\d|4[46])\\d{4}|(?:4722|505[2-57-9])\\d{6}|(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[01356]|3[0-24679]|4[167]|5[0-2]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[023578]|58|6[349]|7[0589]|8[04])|5(?:0[1-47-9]|1[0235-8]|20|3[0149]|4[01]|5[179]|6[1-47]|7[0-5]|8[0256])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[01679]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[0-59]|8[156])|8(?:0[1-68]|1[02-8]|2[068]|3[0-2589]|4[03578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[01357-9]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}"],[""],["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"],["900[2-9]\\d{6}"],["52(?:3(?:[2-46-9][02-9]\\d|5(?:[02-46-9]\\d|5[0-46-9]))|4(?:[2-478][02-9]\\d|5(?:[034]\\d|2[024-9]|5[0-46-9])|6(?:0[1-9]|[2-9]\\d)|9(?:[05-9]\\d|2[0-5]|49)))\\d{4}|52[34][2-9]1[02-9]\\d{4}|5(?:00|2[125-9]|33|44|66|77|88)[2-9]\\d{6}"]]],"UY":["598","0(?:0|1[3-9]\\d)","(?:0004|4)\\d{9}|[1249]\\d{7}|(?:[49]\\d|80)\\d{5}",[7,8,10,13],[["(\\d{3})(\\d{4})","$1 $2",["405|8|90"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1"],["(\\d{4})(\\d{4})","$1 $2",["[124]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["4"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3 $4",["0"]]],"0",0,0,0,0,0,0,"00"," int. "],"UZ":["998","810","(?:33|[5-79]\\d|88)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[35-9]"],"8 $1"]],"8",0,0,0,0,0,0,"8~10"],"VA":["39","00","0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}",[6,7,8,9,10,11],0,0,0,0,0,0,"06698"],"VC":["1","011","(?:[58]\\d\\d|784|900)\\d{7}",[10],0,"1",0,"([2-7]\\d{6})$|1","784$1",0,"784"],"VE":["58","00","[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}",[10],[["(\\d{3})(\\d{7})","$1-$2",["[24-689]"],"0$1"]],"0"],"VG":["1","011","(?:284|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"([2-578]\\d{6})$|1","284$1",0,"284"],"VI":["1","011","[58]\\d{9}|(?:34|90)0\\d{7}",[10],0,"1",0,"([2-9]\\d{6})$|1","340$1",0,"340"],"VN":["84","00","[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}",[7,8,9,10],[["(\\d{2})(\\d{5})","$1 $2",["80"],"0$1",1],["(\\d{4})(\\d{4,6})","$1 $2",["1"],0,1],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[69]"],"0$1",1],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[3578]"],"0$1",1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["2[48]"],"0$1",1],["(\\d{3})(\\d{4})(\\d{3})","$1 $2 $3",["2"],"0$1",1]],"0"],"VU":["678","00","[57-9]\\d{6}|(?:[238]\\d|48)\\d{3}",[5,7],[["(\\d{3})(\\d{4})","$1 $2",["[57-9]"]]]],"WF":["681","00","(?:40|72)\\d{4}|8\\d{5}(?:\\d{3})?",[6,9],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["[478]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]]]],"WS":["685","0","(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}",[5,6,7,10],[["(\\d{5})","$1",["[2-5]|6[1-9]"]],["(\\d{3})(\\d{3,7})","$1 $2",["[68]"]],["(\\d{2})(\\d{5})","$1 $2",["7"]]]],"XK":["383","00","[23]\\d{7,8}|(?:4\\d\\d|[89]00)\\d{5}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2-4]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[23]"],"0$1"]],"0"],"YE":["967","00","(?:1|7\\d)\\d{7}|[1-7]\\d{6}",[7,8,9],[["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-6]|7(?:[24-6]|8[0-7])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["7"],"0$1"]],"0"],"YT":["262","00","(?:(?:(?:26|63)9|80\\d)\\d|9398)\\d{5}",[9],0,"0",0,0,0,0,"269|63|9398"],"ZA":["27","00","[1-79]\\d{8}|8\\d{4,9}",[5,6,7,8,9,10],[["(\\d{2})(\\d{3,4})","$1 $2",["8[1-4]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["8[1-4]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["860"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"]],"0"],"ZM":["260","00","800\\d{6}|(?:21|63|[79]\\d)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[28]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["[79]"],"0$1"]],"0"],"ZW":["263","00","2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}",[5,6,7,8,9,10],[["(\\d{3})(\\d{3,5})","$1 $2",["2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]"],"0$1"],["(\\d)(\\d{3})(\\d{2,4})","$1 $2 $3",["[49]"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["80"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2","2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)","2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"],"0$1"],["(\\d{4})(\\d{6})","$1 $2",["8"],"0$1"],["(\\d{2})(\\d{3,5})","$1 $2",["1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["29[013-9]|39|54"],"0$1"],["(\\d{4})(\\d{3,5})","$1 $2",["(?:25|54)8","258|5483"],"0$1"]],"0"]},"nonGeographic":{"800":["800",0,"(?:00|[1-9]\\d)\\d{6}",[8],[["(\\d{4})(\\d{4})","$1 $2",["\\d"]]],0,0,0,0,0,0,[0,0,["(?:00|[1-9]\\d)\\d{6}"]]],"808":["808",0,"[1-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[1-9]"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,["[1-9]\\d{7}"]]],"870":["870",0,"7\\d{11}|[35-7]\\d{8}",[9,12],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[35-7]"]]],0,0,0,0,0,0,[0,["(?:[356]|774[45])\\d{8}|7[6-8]\\d{7}"]]],"878":["878",0,"10\\d{10}",[12],[["(\\d{2})(\\d{5})(\\d{5})","$1 $2 $3",["1"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,["10\\d{10}"]]],"881":["881",0,"[0-36-9]\\d{8}",[9],[["(\\d)(\\d{3})(\\d{5})","$1 $2 $3",["[0-36-9]"]]],0,0,0,0,0,0,[0,["[0-36-9]\\d{8}"]]],"882":["882",0,"[13]\\d{6}(?:\\d{2,5})?|[19]\\d{7}|(?:[25]\\d\\d|4)\\d{7}(?:\\d{2})?",[7,8,9,10,11,12],[["(\\d{2})(\\d{5})","$1 $2",["16|342"]],["(\\d{2})(\\d{6})","$1 $2",["49"]],["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["1[36]|9"]],["(\\d{2})(\\d{4})(\\d{3})","$1 $2 $3",["3[23]"]],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["16"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["10|23|3(?:[15]|4[57])|4|51"]],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["34"]],["(\\d{2})(\\d{4,5})(\\d{5})","$1 $2 $3",["[1-35]"]]],0,0,0,0,0,0,[0,["342\\d{4}|(?:337|49)\\d{6}|(?:3(?:2|47|7\\d{3})|50\\d{3})\\d{7}",[7,8,9,10,12]],0,0,0,0,0,0,["1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\d{4}|6\\d{5,10})|(?:345\\d|9[89])\\d{6}|(?:10|2(?:3|85\\d)|3(?:[15]|[69]\\d\\d)|4[15-8]|51)\\d{8}"]]],"883":["883",0,"(?:[1-4]\\d|51)\\d{6,10}",[8,9,10,11,12],[["(\\d{3})(\\d{3})(\\d{2,8})","$1 $2 $3",["[14]|2[24-689]|3[02-689]|51[24-9]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["510"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["21"]],["(\\d{4})(\\d{4})(\\d{4})","$1 $2 $3",["51[13]"]],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[235]"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,["(?:2(?:00\\d\\d|10)|(?:370[1-9]|51\\d0)\\d)\\d{7}|51(?:00\\d{5}|[24-9]0\\d{4,7})|(?:1[013-79]|2[24-689]|3[02-689]|4[0-4])0\\d{5,9}"]]],"888":["888",0,"\\d{11}",[11],[["(\\d{3})(\\d{3})(\\d{5})","$1 $2 $3"]],0,0,0,0,0,0,[0,0,0,0,0,0,["\\d{11}"]]],"979":["979",0,"[1359]\\d{8}",[9],[["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["[1359]"]]],0,0,0,0,0,0,[0,0,0,["[1359]\\d{8}"]]]}});

/***/ }),

/***/ "./node_modules/libphonenumber-js/min/exports/AsYouType.js":
/*!*****************************************************************!*\
  !*** ./node_modules/libphonenumber-js/min/exports/AsYouType.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AsYouType: () => (/* binding */ AsYouType)
/* harmony export */ });
/* harmony import */ var _metadata_min_json_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../metadata.min.json.js */ "./node_modules/libphonenumber-js/metadata.min.json.js");
/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core/index.js */ "./node_modules/libphonenumber-js/es6/AsYouType.js");
// Importing from a ".js" file is a workaround for Node.js "ES Modules"
// importing system which is even uncapable of importing "*.json" files.




function AsYouType(country) {
	return _core_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(this, country, _metadata_min_json_js__WEBPACK_IMPORTED_MODULE_1__["default"])
}

AsYouType.prototype = Object.create(_core_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].prototype, {})
AsYouType.prototype.constructor = AsYouType

/***/ }),

/***/ "./node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js":
/*!**************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isValidPhoneNumber: () => (/* binding */ isValidPhoneNumber)
/* harmony export */ });
/* harmony import */ var _withMetadataArgument_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./withMetadataArgument.js */ "./node_modules/libphonenumber-js/min/exports/withMetadataArgument.js");
/* harmony import */ var _core_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core/index.js */ "./node_modules/libphonenumber-js/es6/isValidPhoneNumber.js");



function isValidPhoneNumber() {
	return (0,_withMetadataArgument_js__WEBPACK_IMPORTED_MODULE_0__["default"])(_core_index_js__WEBPACK_IMPORTED_MODULE_1__["default"], arguments)
}

/***/ }),

/***/ "./node_modules/libphonenumber-js/min/exports/withMetadataArgument.js":
/*!****************************************************************************!*\
  !*** ./node_modules/libphonenumber-js/min/exports/withMetadataArgument.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ withMetadataArgument)
/* harmony export */ });
/* harmony import */ var _metadata_min_json_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../metadata.min.json.js */ "./node_modules/libphonenumber-js/metadata.min.json.js");
// Importing from a ".js" file is a workaround for Node.js "ES Modules"
// importing system which is even uncapable of importing "*.json" files.


function withMetadataArgument(func, _arguments) {
	var args = Array.prototype.slice.call(_arguments)
	args.push(_metadata_min_json_js__WEBPACK_IMPORTED_MODULE_0__["default"])
	return func.apply(this, args)
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!***************************!*\
  !*** ./src/myfiwidget.ts ***!
  \***************************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ createMYFIWidget)
/* harmony export */ });
/* harmony import */ var libphonenumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! libphonenumber-js */ "./node_modules/libphonenumber-js/min/exports/AsYouType.js");
/* harmony import */ var libphonenumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! libphonenumber-js */ "./node_modules/libphonenumber-js/min/exports/isValidPhoneNumber.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};

function numberWithSpaces(x) {
    return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, " ");
}
function setInputFilter(textbox, inputFilter, errMsg) {
    ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop", "focusout"].forEach(function (event) {
        textbox.addEventListener(event, function (e) {
            if (inputFilter(this.value)) {
                // Accepted value.
                if (["keydown", "mousedown", "focusout"].indexOf(e.type) >= 0) {
                    this.classList.remove("input-error");
                    this.setCustomValidity("");
                }
                this.oldValue = this.value;
                this.oldSelectionStart = this.selectionStart;
                this.oldSelectionEnd = this.selectionEnd;
            }
            else if (this.hasOwnProperty("oldValue")) {
                // Rejected value: restore the previous one.
                this.classList.add("input-error");
                this.setCustomValidity(errMsg);
                this.reportValidity();
                this.value = this.oldValue;
                this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
            }
            else {
                // Rejected value: nothing to restore.
                this.value = "";
            }
        });
    });
}
function setInputFilterWithWhitespaces(textbox, inputFilter, errMsg) {
    ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop", "focusout"].forEach(function (event) {
        textbox.addEventListener(event, function (e) {
            if (inputFilter(this.value)) {
                // Accepted value.
                if (["keydown", "mousedown", "focusout"].indexOf(e.type) >= 0) {
                    this.classList.remove("input-error");
                    this.setCustomValidity("");
                }
                this.value = numberWithSpaces(this.value.replaceAll(" ", ""));
                this.oldValue = numberWithSpaces(this.value.replaceAll(" ", ""));
                this.oldSelectionStart = this.selectionStart;
                this.oldSelectionEnd = this.selectionEnd;
            }
            else if (this.hasOwnProperty("oldValue")) {
                // Rejected value: restore the previous one.
                this.classList.add("input-error");
                this.setCustomValidity(errMsg);
                this.reportValidity();
                this.value = this.oldValue;
                this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
            }
            else {
                // Rejected value: nothing to restore.
                this.value = "";
            }
        });
    });
}
function createMYFIWidget(params) {
    var container = params.container || ".w-wrap";
    var inn = params.inn || "";
    var partnerCompanyId = params.partnerCompanyId;
    var partnerUserId = params.partnerUserId;
    var fontFamily = params.fontFamily || "Roboto";
    var style = params.style || "";
    var markerStyle = params.markerStyle || "";
    var apiUrl = params.apiUrl || "https://api.mirmyfi.ru/v3";
    var css = "\n  :root {\n    --bg-gray: #ecf1f7;\n    --bg-active: #ffffff;\n    --border: #000;\n    --main-gray: #828282;\n    --text: #333333;\n    --error-bg: #ffd9d9;\n    --error-main: #eb5757;\n    --main-yellow: #f2c94c;\n    --secondary-yellow: #caa536;\n    --checkbox: #27ae60;\n  }\n  \n  .w-container * {\n    box-sizing: border-box;\n  }\n  \n  .test {\n    font-size: 16px;\n    color: salmon;\n  }\n  \n  .w-container {\n    width: 100%;\n    height: 100%;\n  \n    border-radius: 15px;\n  }\n  \n  .w-grid {\n    display: grid;\n    gap: 10px;\n    grid-template-columns: 1fr 1fr;\n  }\n  \n  .w-field-wrap {\n    display: flex;\n    flex-direction: column;\n    height: 80px;\n    background-color: var(--bg-gray);\n    border-radius: 10px;\n    padding: 12px 26px;\n    position: relative;\n    width: 100%;\n    transition: all 0.2s;\n  }\n  \n  .w-field-wrap.w-focused {\n    /* border: 1px solid black; */\n  }\n  \n  .w-field-name {\n    font-size: 18px;\n    color: var(--main-gray);\n    transition: all 0.2s;\n    position: relative;\n    top: 15px;\n    pointer-events: none;\n    z-index: 10;\n  }\n  \n  .w-field-name.w-active {\n    font-size: 14px;\n    transition: all 0.2s;\n    top: 0;\n  }\n  \n  .w-input {\n    border-width: 0;\n    /* height: 30px; */\n    background-color: var(--bg-gray);\n    border-radius: 5px;\n    transition: all 0.2s;\n    margin-top: 9px;\n    font-size: 24px;\n    position: absolute;\n    height: 58px;\n    width: calc(100% - 30px);\n  }\n  \n  input:focus {\n    outline: none;\n    transition: all 0.2s;\n  }\n  \n  .w-input.w-term {\n    pointer-events: none;\n  }\n  \n  .w-slider {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 100%;\n    height: 1px;\n    border-radius: 10px;\n    background: var(--bg-gray);\n    outline: none;\n    opacity: 0.8;\n    -webkit-transition: 0.2s;\n    transition: opacity 0.2s;\n  \n    position: absolute;\n    bottom: -1px;\n    left: 5px;\n    width: calc(100% - 14px);\n    margin: 2px;\n  }\n\n\n  .w-slider-active-portion {\n    border-bottom: 2px var(--main-yellow) solid;\n    height: 2px;\n    /* background-color: #000; */\n    position: absolute;\n    bottom: 0px;\n    left: 7px;\n    z-index: 1111;\n    width: 0;\n    max-width: calc(100% - 14px);\n  }\n  \n  .w-slider:hover {\n    opacity: 1;\n  }\n  \n  .w-slider::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    appearance: none;\n    width: 14px;\n    height: 14px;\n    border-radius: 50%;\n    background: var(--main-yellow);\n    border-color: var(--main-yellow);\n    cursor: pointer;\n\n  }\n\n  \n  .w-slider::-moz-range-thumb {\n    width: 14px;\n    height: 14px;\n    background: var(--main-yellow);\n    cursor: pointer;\n    border-radius: 50%;\n    border-color: var(--main-yellow);\n  }\n  \n  .w-submit {\n    background-color: var(--main-yellow);\n    border-width: 0;\n    height: 60px;\n    width: 240px;\n    border-radius: 10px;\n    font-size: 24px;\n    cursor: pointer;\n    transition: all 0.2s;\n    margin: 0 auto;\n    display: block;\n  }\n  \n  .w-submit.disabled {\n    pointer-events: none;\n    opacity: 0.5;\n  }\n  \n  .w-agreement-wrap {\n    grid-column: span 2;\n    // width: 80%;\n    margin: 30px auto;\n  }\n  \n  .w-checkbox {\n    position: absolute;\n    z-index: -1;\n    opacity: 0;\n  }\n  \n  .w-checkbox + label {\n    user-select: none;\n  }\n  .w-checkbox + label::before {\n    content: \"\";\n    display: inline-block;\n    width: 1em;\n    height: 1em;\n    flex-shrink: 0;\n    flex-grow: 0;\n    border: 1px solid var(--secondary-yellow);\n    border-radius: 0.25em;\n    margin-right: 0.5em;\n    background-repeat: no-repeat;\n    background-position: center center;\n    background-size: 50% 50%;\n    cursor: pointer;\n  }\n  \n  .w-checkbox:checked + label::before {\n    border-color: var(--main-yellow);\n    background-color: var(--main-yellow);\n    background-image: url(\"data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'%3e%3cpath fill='%23fff' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26 2.974 7.25 8 2.193z'/%3e%3c/svg%3e\");\n  }\n  \n  /* \u0441\u0442\u0438\u043B\u0438 \u043F\u0440\u0438 \u043D\u0430\u0432\u0435\u0434\u0435\u043D\u0438\u0438 \u043A\u0443\u0440\u0441\u043E\u0440\u0430 \u043D\u0430 checkbox */\n  .w-checkbox:not(:disabled):not(:checked) + label:hover::before {\n    border-color: var(--secondary-yellow);\n  }\n  /* \u0441\u0442\u0438\u043B\u0438 \u0434\u043B\u044F \u0430\u043A\u0442\u0438\u0432\u043D\u043E\u0433\u043E \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u044F \u0447\u0435\u043A\u0431\u043E\u043A\u0441\u0430 (\u043F\u0440\u0438 \u043D\u0430\u0436\u0430\u0442\u0438\u0438 \u043D\u0430 \u043D\u0435\u0433\u043E) */\n  .w-checkbox:not(:disabled):active + label::before {\n    background-color: var(--secondary-yellow);\n    border-color: var(--secondary-yellow);\n  }\n  /* \u0441\u0442\u0438\u043B\u0438 \u0434\u043B\u044F \u0447\u0435\u043A\u0431\u043E\u043A\u0441\u0430, \u043D\u0430\u0445\u043E\u0434\u044F\u0449\u0435\u0433\u043E\u0441\u044F \u0432 \u0444\u043E\u043A\u0443\u0441\u0435 */\n  .w-checkbox:focus + label::before {\n    box-shadow: 0 0 0 0.2rem #caa53630;\n  }\n  /* \u0441\u0442\u0438\u043B\u0438 \u0434\u043B\u044F \u0447\u0435\u043A\u0431\u043E\u043A\u0441\u0430, \u043D\u0430\u0445\u043E\u0434\u044F\u0449\u0435\u0433\u043E\u0441\u044F \u0432 \u0444\u043E\u043A\u0443\u0441\u0435 \u0438 \u043D\u0435 \u043D\u0430\u0445\u043E\u0434\u044F\u0449\u0435\u0433\u043E\u0441\u044F \u0432 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0438 checked */\n  .w-checkbox:focus:not(:checked) + label::before {\n    border-color: var(--secondary-yellow);\n  }\n  /* \u0441\u0442\u0438\u043B\u0438 \u0434\u043B\u044F \u0447\u0435\u043A\u0431\u043E\u043A\u0441\u0430, \u043D\u0430\u0445\u043E\u0434\u044F\u0449\u0435\u0433\u043E\u0441\u044F \u0432 \u0441\u043E\u0441\u0442\u043E\u044F\u043D\u0438\u0438 disabled */\n  .w-checkbox:disabled + label::before {\n    background-color: red;\n  }\n  \n  .w-agreement {\n    font-size: 16px;\n    color: var(--main-gray);\n    display: flex;\n    align-items: baseline;\n    padding: 3px 0;\n  }\n  \n  .w-link {\n    color: var(--main-gray);\n    transition: all 0.2s;\n  }\n  \n  .w-link:hover {\n    color: var(--main-yellow);\n    transition: all 0.2s;\n  }\n  \n  .w-submit:hover {\n    background-color: #fcc319;\n    transition: all 0.2s;\n  }\n\n  ul .w-bank-item::marker {\n    color: var(--main-yellow);\n    ".concat(markerStyle, "\n  }\n\n  ");
    var html = "\n<div class=\"w-container\">\n<div class=\"w-grid\">\n\n<!-- <div class=\"w-field-wrap\">\n  <span class=\"w-field-name w-active\">\u041F\u0440\u043E\u0434\u0443\u043A\u0442</span>\n  <span class=\"w-selected\">\u041A\u0440\u0435\u0434\u0438\u0442</span>\n  <ul class=\"w-dropdown\">\n    <li>\u041A\u0440\u0435\u0434\u0438\u0442</li>\n    <li>\u0424\u0430\u043A\u0442\u043E\u0440\u0438\u043D\u0433</li>\n    <li>\u041B\u0438\u0437\u0438\u043D\u0433</li>\n    <li>\u0411\u0430\u043D\u043A\u043E\u0432\u0441\u043A\u0438\u0435 \u0433\u0430\u0440\u0430\u043D\u0442\u0438\u0438</li>\n  </ul>\n</div>\n<span></span> -->\n<div class=\"w-field-wrap w-term\">\n  <span class=\"w-field-name w-active\">\u0421\u0440\u043E\u043A</span>\n  <input type=\"text\" class=\"w-input w-term\" value=\"3 \u043C\u0435\u0441\u044F\u0446\u0430\" />\n  <input type=\"range\" min=\"3\" max=\"36\" value=\"3\" class=\"w-slider w-term\" id=\"myRange\" />\n  <div class=\"w-term w-slider-active-portion\"></div>\n</div>\n<div class=\"w-field-wrap w-sum\">\n  <span class=\"w-field-name w-active\">\u0421\u0443\u043C\u043C\u0430, \u20BD</span>\n  <input type=\"text\" class=\"w-input w-sum\" value=\"10 000\" />\n  <input type=\"range\" min=\"1\" max=\"50000\" value=\"1\" class=\"w-slider w-sum\" id=\"myRange\" />\n  <div class=\"w-sum w-slider-active-portion\"></div>\n</div>\n\n<ul>\n<li class='w-bank-item'>test</li><li class='w-bank-item'>test</li>\n</ul>\n\n\n<div class=\"w-field-wrap\">\n  <span class=\"w-field-name\">\u0424\u0430\u043C\u0438\u043B\u0438\u044F*</span>\n  <input type=\"text\" class=\"w-input w-lastname\" />\n</div>\n<div class=\"w-field-wrap\">\n  <span class=\"w-field-name\">\u0418\u043C\u044F*</span>\n  <input type=\"text\" class=\"w-input w-1stname\" />\n</div>\n<div class=\"w-field-wrap\">\n  <span class=\"w-field-name\">\u041E\u0442\u0447\u0435\u0441\u0442\u0432\u043E</span>\n  <input type=\"text\" class=\"w-input w-2ndname\" />\n</div>\n<div class=\"w-field-wrap\">\n  <span class=\"w-field-name  ".concat(!!inn ? "w-active" : "", "\">\u0418\u041D\u041D*</span>\n  <input type=\"text\" class=\"w-input w-inn\" />\n</div>\n\n<div class=\"w-field-wrap\">\n  <span class=\"w-field-name w-active\">\u0422\u0435\u043B\u0435\u0444\u043E\u043D*</span>\n  <input type=\"text\" class=\"w-input w-phone\" value=\"+\" />\n</div>\n<div class=\"w-field-wrap\">\n  <span class=\"w-field-name\">\u042D\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u043D\u0430\u044F \u043F\u043E\u0447\u0442\u0430*</span>\n  <input type=\"text\" class=\"w-input w-email\" />\n</div>\n</div>\n<div class=\"w-agreement-wrap\">\n\n<input type=\"checkbox\" class=\"w-checkbox\" id=\"agree2\" name=\"agree2\" value=\"true\" />\n<label class=\"w-agreement\" for=\"agree2\"\n  ><span\n    >\u041D\u0430\u0441\u0442\u043E\u044F\u0449\u0438\u043C, \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043E \u0441\u0442. 9 \u0424\u0435\u0434\u0435\u0440\u0430\u043B\u044C\u043D\u043E\u0433\u043E \u0437\u0430\u043A\u043E\u043D\u0430 \u043E\u0442 27.07.2006 \u2116 152-\u0424\u0417 \u00AB\u041E \u043F\u0435\u0440\u0441\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0445 \u0434\u0430\u043D\u043D\u044B\u0445\u00BB, \u042F \u0432\u044B\u0440\u0430\u0436\u0430\u044E \u0441\u0432\u043E\u0435 \u0441\u043E\u0433\u043B\u0430\u0441\u0438\u0435 \u041E\u041E\u041E \u00AB\u041C\u0430\u0439\u0444\u0438\u00BB, \u0418\u041D\u041D 7702454664, \u043D\u0430 \u043E\u0431\u0440\u0430\u0431\u043E\u0442\u043A\u0443 \u0438 \u0434\u0430\u043B\u044C\u043D\u0435\u0439\u0448\u0443\u044E \u043F\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0432 \u0430\u0434\u0440\u0435\u0441 \u043A\u0440\u0435\u0434\u0438\u0442\u043D\u044B\u0445 \u043E\u0440\u0433\u0430\u043D\u0438\u0437\u0430\u0446\u0438\u0439, \u0443\u043A\u0430\u0437\u0430\u043D\u043D\u044B\u0445 \u0432 \u044D\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u043D\u043E\u0439 \u0437\u0430\u044F\u0432\u043A\u0435 \u043F\u0435\u0440\u0441\u043E\u043D\u0430\u043B\u044C\u043D\u044B\u0445 \u0434\u0430\u043D\u043D\u044B\u0445 \u0438 \u043D\u0430\u043F\u0440\u0430\u0432\u043B\u044F\u0435\u043C\u044B\u0445 \u043C\u043D\u043E\u044E \u0432 \u043F\u0440\u043E\u0446\u0435\u0441\u0441\u0435 \u0440\u0430\u0441\u0441\u043C\u043E\u0442\u0440\u0435\u043D\u0438\u044F \u044D\u043B\u0435\u043A\u0442\u0440\u043E\u043D\u043D\u043E\u0439 \u0437\u0430\u044F\u0432\u043A\u0438 \u0434\u043E\u043A\u0443\u043C\u0435\u043D\u0442\u0430\u0445 \u043F\u043E\u0434\u0442\u0432\u0435\u0440\u0436\u0434\u0430\u044E, \u0447\u0442\u043E \u0434\u0430\u044E \u0442\u0430\u043A\u043E\u0435 \u0441\u043E\u0433\u043B\u0430\u0441\u0438\u0435 \u0441\u0432\u043E\u0431\u043E\u0434\u043D\u043E, \u0441\u0432\u043E\u0435\u0439 \u0432\u043E\u043B\u0435\u0439 \u0438 \u0432 \u0441\u0432\u043E\u0435\u043C \u0438\u043D\u0442\u0435\u0440\u0435\u0441\u0435. \u0421\u043E\u0433\u043B\u0430\u0441\u0438\u0435 \u0434\u0430\u0435\u0442\u0441\u044F \u043C\u043D\u043E\u0439, \u0434\u043B\u044F \u0446\u0435\u043B\u0435\u0439 \u0440\u0430\u0441\u0441\u043C\u043E\u0442\u0440\u0435\u043D\u0438\u044F \u043A\u0440\u0435\u0434\u0438\u0442\u043D\u043E\u0439 \u043E\u0440\u0433\u0430\u043D\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0432\u043E\u043F\u0440\u043E\u0441\u043E\u0432 \u043E \u0432\u043E\u0437\u043C\u043E\u0436\u043D\u043E\u0441\u0442\u0438 \u043F\u0440\u0435\u0434\u043E\u0441\u0442\u0430\u0432\u043B\u0435\u043D\u0438\u044F \u043C\u043D\u0435 \u043A\u0440\u0435\u0434\u0438\u0442\u043D\u044B\u0445 \u043F\u0440\u043E\u0434\u0443\u043A\u0442\u043E\u0432.</label\n>\n<input type=\"checkbox\" class=\"w-checkbox\" id=\"agree3\" name=\"agree3\" value=\"true\" />\n<label class=\"w-agreement\" for=\"agree3\"\n  ><span\n    >\u042F \u0434\u0430\u044E \u0441\u0432\u043E\u0435 \u0441\u043E\u0433\u043B\u0430\u0441\u0438\u0435 \u043D\u0430\n    <a class=\"w-link\" href=\"\" target=\"_blank\">\u043F\u0435\u0440\u0435\u0434\u0430\u0447\u0443 \u0441\u0432\u0435\u0434\u0435\u043D\u0438\u0439 \u043E\u0442 \u041F\u0430\u0440\u0442\u043D\u0451\u0440\u0430 \u0411\u0430\u043D\u043A\u0443</a>.</span\n  ></label\n>\n\n\n</div>\n<button class=\"w-submit disabled\">\u041E\u0442\u043F\u0440\u0430\u0432\u0438\u0442\u044C</button>\n\n<link href=\"https://fonts.cdnfonts.com/css/roboto\" rel=\"stylesheet\" />\n\n                \n<style>.w-container {\n").concat(style, ";\n}\n\n.w-container * {\n  box-sizing: border-box;\n  font-family: ").concat(fontFamily, ";\n}\n\n").concat(css, "\n\n</style></div>\n");
    var wrapper = document.querySelector(container);
    if (!wrapper) {
        console.log("Нет контейнера");
        return;
    }
    if (!partnerUserId || !partnerCompanyId) {
        console.log("Не переданы обязательные параметры");
        return;
    }
    wrapper.innerHTML = html;
    var wcontainer = document.querySelector(".w-container");
    var wgrid = wcontainer.querySelector(".w-grid");
    var phoneInput = wcontainer.querySelector(".w-phone");
    var select = wcontainer.querySelector(".w-selected");
    var dropdown = wcontainer.querySelector(".w-dropdown");
    // let selectActive: boolean = true;
    ["DOMContentLoaded", "resize", "load"].forEach(function (item) {
        return window.addEventListener(item, function () {
            var width = wcontainer.offsetWidth;
            if (width < 480) {
                wgrid.style["grid-template-columns"] = "1fr";
            }
            else {
                wgrid.style["grid-template-columns"] = "1fr 1fr";
            }
        });
    });
    phoneInput.addEventListener("input", function () {
        var value = this.value.replaceAll(" ", "");
        if (value.length < 15) {
            this.value = new libphonenumber_js__WEBPACK_IMPORTED_MODULE_0__.AsYouType().input(this.value);
        }
        else
            this.value = value.substring(0, value.length - 1);
        if (!this.value) {
            this.value = "+";
        }
    });
    // select.addEventListener("click", function () {
    //   console.log("selectActive", selectActive);
    //   if (selectActive) {
    //     dropdown.classList.add("w-active");
    //     select.classList.add("w-active");
    //   } else {
    //     dropdown.classList.remove("w-active");
    //     select.classList.remove("w-active");
    //   }
    //   selectActive = !selectActive;
    // });
    // dropdown.addEventListener("click", function (e: MouseEvent) {
    //   const value = (e.target as HTMLSpanElement).innerHTML;
    //   console.log("value", value);
    //   select.innerText = value;
    //   selectActive = !selectActive;
    //   dropdown.classList.remove("w-active");
    //   select.classList.remove("w-active");
    // });
    // document.addEventListener("click", function (e: MouseEvent) {
    //   const target = e.target as HTMLElement;
    //   const clickAway = target !== dropdown && target !== select;
    //   if (!!selectActive && clickAway) {
    //     console.log("selectActive", selectActive);
    //     console.log("fired");
    //   }
    // });
    var digitsWithWhitespace = /^[0-9\b]|\t+$/;
    var digits = /^[0-9\b]+$/;
    var email = /.+@.+\.[A-Za-z]+$/;
    var multiplier = 1e3;
    var termSlider = wcontainer.querySelector(".w-slider.w-term");
    !!termSlider && termSlider.addEventListener("input", handleTermSliderChange);
    var termSliderActivePart = wcontainer.querySelector(".w-term .w-slider-active-portion");
    var termInput = wcontainer.querySelector(".w-input.w-term");
    termInput.value = "3 месяца";
    var sumSlider = wcontainer.querySelector(".w-slider.w-sum");
    !!sumSlider && sumSlider.addEventListener("input", handleSumSliderChange);
    var sumSliderActivePart = wcontainer.querySelector(".w-sum .w-slider-active-portion");
    var firstnameInput = wcontainer.querySelector(".w-1stname");
    var secondnameInput = wcontainer.querySelector(".w-2ndname");
    var lastnameInput = wcontainer.querySelector(".w-lastname");
    var innInput = wcontainer.querySelector(".w-inn");
    innInput.value = inn;
    var emailInput = wcontainer.querySelector(".w-email");
    var sumInput = wcontainer.querySelector(".w-input.w-sum");
    !!sumInput && sumInput.addEventListener("input", handleSumInputChange);
    [sumInput, firstnameInput, secondnameInput, lastnameInput, innInput, phoneInput, emailInput].forEach(function (item) {
        return item.addEventListener("focus", handleFocusChange);
    });
    [sumInput, firstnameInput, secondnameInput, lastnameInput, innInput, phoneInput, emailInput].forEach(function (item) {
        return item.addEventListener("blur", handleFocusChange);
    });
    var submitBtn = wcontainer.querySelector(".w-submit");
    var agreements = Array.from(wcontainer.querySelectorAll(".w-checkbox"));
    agreements.forEach(function (el) {
        return el.addEventListener("change", function () {
            var hasAgreedToAll = agreements[0].checked && agreements[1].checked;
            if (!hasAgreedToAll) {
                submitBtn.classList.add("disabled");
            }
            else {
                submitBtn.classList.remove("disabled");
            }
        });
    });
    submitBtn.addEventListener("click", handleSubmit);
    setInputFilterWithWhitespaces(sumInput, function (value) {
        return (digits.test(value.replaceAll(" ", "")) && parseInt(value.replaceAll(" ", "")) < 1e9) || !value.length;
    }, "Разрешены только числовые символы. Вручную можно ввести сумму до 1 млрд.");
    setInputFilter(innInput, function (value) {
        return (digits.test(value) && value.replaceAll(" ", "").length < 13) || !value.length;
    }, "Разрешены только числовые символы. Длина ИНН 10 или 12 цифр.");
    function handleTermSliderChange(e) {
        var value = e.target.value;
        var min = parseInt(e.target.getAttribute("min"));
        var max = parseInt(e.target.getAttribute("max"));
        var steps = max - min;
        var valueStep = 1;
        var percentageStep = 100 / steps;
        var fraction = percentageStep * ((value - min) * valueStep);
        var suffix = "";
        if (value % 10 > 1 && value % 10 < 5)
            suffix = "а";
        if (value % 10 >= 5 || value % 10 === 0 || (value > 10 && value < 15))
            suffix = "ев";
        termInput.value = value + " месяц" + suffix;
        termSliderActivePart.style.width = "calc(".concat(fraction, "% - ").concat(fraction / 100, " * 14px)");
    }
    function handleSumSliderChange(e) {
        var value = e.target.value;
        var steps = parseInt(e.target.getAttribute("max")) - parseInt(e.target.getAttribute("min"));
        var valueStep = (parseInt(e.target.getAttribute("max")) - 1) / steps;
        var percentageStep = 100 / steps;
        var fraction = percentageStep * ((parseInt(value) - 1) * valueStep);
        sumSliderActivePart.style.width = "calc(".concat(fraction, "% - ").concat(fraction / 100, " * 14px)");
        sumInput.value = "".concat(numberWithSpaces(parseInt(value) * multiplier));
    }
    function handleSumInputChange(e) {
        var value = e.target.value.replaceAll(" ", "");
        var steps = parseInt(sumSlider.getAttribute("max")) - parseInt(sumSlider.getAttribute("min"));
        var valueStep = (parseInt(sumSlider.getAttribute("max")) - 1) / steps;
        var percentageStep = 100 / steps;
        var fraction = (percentageStep * (parseInt(value) - 1) * valueStep) / multiplier;
        sumSliderActivePart.style.width = "calc(".concat(fraction, "% - ").concat(fraction / 100, " * 14px)");
        var sliderValue = parseInt(value) / multiplier + 1;
        sumSlider.value = "".concat(sliderValue);
    }
    function handleFocusChange(e) {
        var isFocused = document.activeElement === e.target;
        var parent = e.target.parentElement;
        if (!__spreadArray([], parent.classList, true).includes("w-field-wrap"))
            parent = parent.parentElement.parentElement;
        if (isFocused) {
            parent.classList.add("w-focused");
            parent.querySelector(".w-field-name").classList.add("w-active");
        }
        else {
            parent.classList.remove("w-focused");
            if (!parent.querySelector(".w-input").value) {
                parent.querySelector(".w-field-name").classList.remove("w-active");
            }
        }
    }
    function resetForm() {
        termInput.value = "3 месяца";
        sumInput.value = "10 000";
        firstnameInput.value = "";
        secondnameInput.value = "";
        lastnameInput.value = "";
        innInput.value = "";
        phoneInput.value = "+";
        emailInput.value = "";
    }
    function handleSubmit() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function () {
            var trimmedInn, values, res, detail, error_1, data, banks, banksUl, e_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 5, , 6]);
                        if (!lastnameInput.value) {
                            throw new Error("Заполните поле фамилии");
                        }
                        if (!firstnameInput.value) {
                            throw new Error("Заполните поле имени");
                        }
                        if (!innInput.value) {
                            throw new Error("Заполните поле ИНН");
                        }
                        if (!sumInput.value) {
                            throw new Error("Заполните поле суммы");
                        }
                        if (parseInt(sumInput.value.replaceAll(" ", "")) < 1e4) {
                            throw new Error("Сумма должна быть не менее 10 000 ₽");
                        }
                        trimmedInn = innInput.value.toString().replaceAll(" ", "");
                        if (!(trimmedInn.length === 10 || trimmedInn.length === 12)) {
                            throw new Error("ИНН должен состоять из 10 или 12 цифр");
                        }
                        if (phoneInput.value === "+") {
                            throw new Error("Заполните поле телефона");
                        }
                        if (!(0,libphonenumber_js__WEBPACK_IMPORTED_MODULE_1__.isValidPhoneNumber)(phoneInput.value)) {
                            throw new Error("Некорректный формат номера телефона");
                        }
                        if (!emailInput.value) {
                            throw new Error("Заполните поле электронной почты");
                        }
                        if (!email.test(emailInput.value)) {
                            throw new Error("Некорректный формат электронной почты");
                        }
                        values = {
                            agreements: {
                                bki: false,
                                personal: !!agreements[0].checked,
                                sharing: !!agreements[1].checked,
                            },
                            amount: parseInt(sumInput.value.replaceAll(" ", "")),
                            email: emailInput.value,
                            inn: trimmedInn,
                            first_name: firstnameInput.value,
                            second_name: secondnameInput.value,
                            last_name: lastnameInput.value,
                            partner_user_id: partnerUserId,
                            partner_company_id: partnerCompanyId,
                            phone: phoneInput.value.replaceAll(" ", ""),
                            service_code: "CREDIT",
                            term: parseInt(termInput.value),
                        };
                        return [4 /*yield*/, fetch("".concat(apiUrl, "/widget/request/"), {
                                method: "POST",
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify(values),
                            })];
                    case 1:
                        res = _d.sent();
                        if (!(res.status !== 200)) return [3 /*break*/, 3];
                        return [4 /*yield*/, res.json()];
                    case 2:
                        detail = (_d.sent()).detail;
                        error_1 = "";
                        if (Array.isArray(detail)) {
                            detail.forEach(function (item) { return (error_1 += item.msg + "\n"); });
                        }
                        else {
                            error_1 = detail;
                        }
                        throw new Error(error_1);
                    case 3: return [4 /*yield*/, res.json()];
                    case 4:
                        data = _d.sent();
                        banks = data.map(function (item) { return item.to_company.name_clear; });
                        resetForm();
                        banksUl = banks.map(function (item) { return "<li class=\"w-bank-item\">".concat(item, "</li>"); }).join("");
                        wrapper.querySelector(".w-agreement-wrap").innerHTML = "<p>\u0412\u0430\u0448\u0430 \u0437\u0430\u044F\u0432\u043A\u0430 \u043E\u0442\u043F\u0440\u0430\u0432\u043B\u0435\u043D\u0430 \u0432: <ul>".concat(banksUl, "</ul> \u0412 \u0431\u043B\u0438\u0436\u0430\u0439\u0448\u0435\u0435 \u0432\u0440\u0435\u043C\u044F \u0441 \u0432\u0430\u043C\u0438 \u0441\u0432\u044F\u0436\u0443\u0442\u0441\u044F \u043C\u0435\u043D\u0435\u0434\u0436\u0435\u0440\u044B \u0431\u0430\u043D\u043A\u043E\u0432.</p>");
                        wrapper.querySelector(".w-submit").outerHTML = "";
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _d.sent();
                        console.log(e_1);
                        alert((_c = (_b = (_a = e_1.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.message) !== null && _c !== void 0 ? _c : e_1.message);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/];
                }
            });
        });
    }
}

})();

__webpack_exports__ = __webpack_exports__["default"];
/******/ 	return __webpack_exports__;
/******/ })()
;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsWUFBWSxVQUFVO0FBQ3RCLFlBQVksTUFBTTtBQUNsQixZQUFZLFNBQVM7QUFDckIsWUFBWSxRQUFRO0FBQ3BCOzs7QUFHcUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLFFBQVE7QUFDUjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNO0FBQ047O0FBRUE7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsOEVBQThFLDRCQUE0QjtBQUMxRzs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsUUFBUTs7O0FBR1I7O0FBRUE7QUFDQSxnRkFBZ0YsOEJBQThCO0FBQzlHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7OztBQUdSOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7O0FDOVBBLGtEQUFrRCwwQ0FBMEM7O0FBRTVGLDRDQUE0QyxnQkFBZ0Isa0JBQWtCLE9BQU8sMkJBQTJCLHdEQUF3RCxnQ0FBZ0MsdURBQXVEOztBQUUvUCw4REFBOEQsc0VBQXNFLDhEQUE4RCxrREFBa0QsaUJBQWlCLEdBQUc7O0FBRXhRO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFlBQVk7OztBQUdaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFbUM7O0FBRXBDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUN6TytEO0FBQ1o7QUFDd0M7QUFDNUU7QUFDZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDTztBQUNQLFNBQVMseUVBQWlCO0FBQzFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBLElBQUk7OztBQUdKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLHVGQUErQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLFNBQVMsbUVBQVc7QUFDcEI7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ3RIQSw4REFBOEQsaUZBQWlGLGdEQUFnRCx3SEFBd0gsZ0JBQWdCLFdBQVcscUJBQXFCLDRCQUE0QixjQUFjLFNBQVMsbUNBQW1DOztBQUU3YixrREFBa0QsZ0JBQWdCLGdFQUFnRSx3REFBd0QsNkRBQTZELHNEQUFzRDs7QUFFN1MsdUNBQXVDLHVEQUF1RCx1Q0FBdUMsU0FBUyxPQUFPLG9CQUFvQjs7QUFFekssa0RBQWtELDBDQUEwQzs7QUFFNUYsNENBQTRDLGdCQUFnQixrQkFBa0IsT0FBTywyQkFBMkIsd0RBQXdELGdDQUFnQyx1REFBdUQ7O0FBRS9QLDhEQUE4RCxzRUFBc0UsOERBQThELGtEQUFrRCxpQkFBaUIsR0FBRzs7QUFFMUU7QUFDN0Y7QUFDN0I7QUFDakI7QUFDYztBQUNrQjtBQUNoQztBQUMwQyxDQUFDO0FBQzlGOztBQUVBLHVCQUF1Qjs7QUFFdkIsK0NBQStDO0FBQy9DOztBQUVBLGlDQUFpQyxtRUFBTSxxREFBcUQ7QUFDNUY7O0FBRUEsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0NBQStDO0FBQy9DOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsaURBQWlELEtBQUs7QUFDdEQ7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLG1CQUFtQixLQUFLO0FBQ3hCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBLG1EQUFtRCw0REFBaUI7QUFDcEU7QUFDQTtBQUNBLGVBQWUsNERBQWlCLHVCQUF1Qiw0REFBaUIsa0JBQWtCO0FBQzFGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsUUFBUTtBQUN4QixnQkFBZ0IsVUFBVTtBQUMxQjs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLHdGQUF1QjtBQUNqQywyRkFBMkYsNEJBQTRCO0FBQ3ZIO0FBQ0Esd0NBQXdDLDJFQUFvQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBLGtGQUFrRiwwRUFBaUI7QUFDbkcsNEVBQTRFO0FBQzVFOztBQUVBLHFGQUFxRiwwRUFBaUI7QUFDdEc7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSOzs7QUFHQTtBQUNBLE1BQU07O0FBRU4sR0FBRztBQUNIO0FBQ0E7QUFDQSxzREFBc0Q7O0FBRXREOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPLEdBQUc7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7OztBQUdBO0FBQ0EsNEZBQTRGO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsNkVBQWM7QUFDbkM7QUFDQSxXQUFXO0FBQ1gsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxFQUFFLE1BQU0sRUFBRSxN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UUFBUTtBQUNSO0FBQ0E7QUFDQSxNQUFNOztBQUVOLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQSxDQUFDOztBQUU4Qjs7QUFFL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU4sR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTs7QUFFTixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU4sR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSOzs7QUFHQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRU87QUFDUDtBQUNBO0FBQ0EsSUFBSTtBQUNKOzs7QUFHQTtBQUNBLDhOQUE4TiwwQ0FBMEM7QUFDeFE7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7O0FB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SyxDQUFDLENBQUM7NEJBR1oscUJBQU0sR0FBRyxDQUFDLElBQUksRUFBRTs7d0JBQXZCLElBQUksR0FBRyxTQUFnQjt3QkFDdkIsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFJLElBQUssV0FBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQTFCLENBQTBCLENBQUMsQ0FBQzt3QkFFN0QsU0FBUyxFQUFFLENBQUM7d0JBQ04sT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxJQUFZLElBQUssMkNBQTJCLElBQUksVUFBTyxFQUF0QyxDQUFzQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUM3RixPQUFPLENBQUMsYUFBYSxDQUNuQixtQkFBbUIsQ0FDcEIsQ0FBQyxTQUFTLEdBQUcsb0pBQW9DLE9BQU8seVJBQStELENBQUM7d0JBQ3pILE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQzs7Ozt3QkFFbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFDLENBQUMsQ0FBQzt3QkFDZixLQUFLLENBQUMscUJBQUMsQ0FBQyxRQUFRLDBDQUFFLElBQUksMENBQUUsT0FBTyxtQ0FBSSxHQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7Ozs7OztLQUVqRDtBQUNILENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9teWZpd2lkZ2V0L3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9Bc1lvdVR5cGUuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvQXNZb3VUeXBlRm9ybWF0dGVyLlBhdHRlcm5NYXRjaGVyLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L0FzWW91VHlwZUZvcm1hdHRlci5QYXR0ZXJuUGFyc2VyLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L0FzWW91VHlwZUZvcm1hdHRlci5jb21wbGV0ZS5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9Bc1lvdVR5cGVGb3JtYXR0ZXIuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvQXNZb3VUeXBlRm9ybWF0dGVyLnV0aWwuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvQXNZb3VUeXBlUGFyc2VyLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L0FzWW91VHlwZVN0YXRlLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L1BhcnNlRXJyb3IuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvUGhvbmVOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvY29uc3RhbnRzLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L2Zvcm1hdC5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9oZWxwZXJzL1JGQzM5NjYuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9hcHBseUludGVybmF0aW9uYWxTZXBhcmF0b3JTdHlsZS5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9oZWxwZXJzL2NoZWNrTnVtYmVyTGVuZ3RoLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L2hlbHBlcnMvZXh0ZW5zaW9uL2NyZWF0ZUV4dGVuc2lvblBhdHRlcm4uanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9leHRlbnNpb24vZXh0cmFjdEV4dGVuc2lvbi5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9oZWxwZXJzL2V4dHJhY3RDb3VudHJ5Q2FsbGluZ0NvZGUuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9leHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlRnJvbUludGVybmF0aW9uYWxOdW1iZXJXaXRob3V0UGx1c1NpZ24uanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9leHRyYWN0Rm9ybWF0dGVkUGhvbmVOdW1iZXJGcm9tUG9zc2libGVSZmMzOTY2TnVtYmVyVXJpLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L2hlbHBlcnMvZXh0cmFjdE5hdGlvbmFsTnVtYmVyLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L2hlbHBlcnMvZXh0cmFjdE5hdGlvbmFsTnVtYmVyRnJvbVBvc3NpYmx5SW5jb21wbGV0ZU51bWJlci5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9oZWxwZXJzL2V4dHJhY3RQaG9uZUNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9mb3JtYXROYXRpb25hbE51bWJlclVzaW5nRm9ybWF0LmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L2hlbHBlcnMvZ2V0Q291bnRyeUJ5Q2FsbGluZ0NvZGUuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9nZXRDb3VudHJ5QnlOYXRpb25hbE51bWJlci5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9oZWxwZXJzL2dldElkZFByZWZpeC5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9oZWxwZXJzL2dldE51bWJlclR5cGUuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9nZXRQb3NzaWJsZUNvdW50cmllc0Zvck51bWJlci5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9oZWxwZXJzL2lzVmlhYmxlUGhvbmVOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9tYXRjaGVzRW50aXJlbHkuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaGVscGVycy9tZXJnZUFycmF5cy5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9oZWxwZXJzL3BhcnNlRGlnaXRzLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L2hlbHBlcnMvc3RyaXBJZGRQcmVmaXguanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvaXNQb3NzaWJsZS5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9pc1ZhbGlkLmpzIiwid2VicGFjazovL215Zml3aWRnZXQvLi9ub2RlX21vZHVsZXMvbGlicGhvbmVudW1iZXItanMvZXM2L2lzVmFsaWRQaG9uZU51bWJlci5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL2VzNi9ub3JtYWxpemVBcmd1bWVudHMuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvcGFyc2UuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvcGFyc2VJbmNvbXBsZXRlUGhvbmVOdW1iZXIuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvcGFyc2VQaG9uZU51bWJlcldpdGhFcnJvcl8uanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvcGFyc2VQaG9uZU51bWJlcl8uanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9lczYvdG9vbHMvc2VtdmVyLWNvbXBhcmUuanMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC8uL25vZGVfbW9kdWxlcy9saWJwaG9uZW51bWJlci1qcy9tZXRhZGF0YS5taW4uanNvbi5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL21pbi9leHBvcnRzL0FzWW91VHlwZS5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL21pbi9leHBvcnRzL2lzVmFsaWRQaG9uZU51bWJlci5qcyIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vbm9kZV9tb2R1bGVzL2xpYnBob25lbnVtYmVyLWpzL21pbi9leHBvcnRzL3dpdGhNZXRhZGF0YUFyZ3VtZW50LmpzIiwid2VicGFjazovL215Zml3aWRnZXQvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vbXlmaXdpZGdldC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL215Zml3aWRnZXQvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9teWZpd2lkZ2V0Ly4vc3JjL215Zml3aWRnZXQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJteWZpd2lkZ2V0XCIsIFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIm15Zml3aWRnZXRcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wibXlmaXdpZGdldFwiXSA9IGZhY3RvcnkoKTtcbn0pKCh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDogdGhpcyksICgpID0+IHtcbnJldHVybiAiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTsgaWYgKF9pID09IG51bGwpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfcywgX2U7IHRyeSB7IGZvciAoX2kgPSBfaS5jYWxsKGFycik7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgTWV0YWRhdGEgZnJvbSAnLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgUGhvbmVOdW1iZXIgZnJvbSAnLi9QaG9uZU51bWJlci5qcyc7XG5pbXBvcnQgQXNZb3VUeXBlU3RhdGUgZnJvbSAnLi9Bc1lvdVR5cGVTdGF0ZS5qcyc7XG5pbXBvcnQgQXNZb3VUeXBlRm9ybWF0dGVyLCB7IERJR0lUX1BMQUNFSE9MREVSIH0gZnJvbSAnLi9Bc1lvdVR5cGVGb3JtYXR0ZXIuanMnO1xuaW1wb3J0IEFzWW91VHlwZVBhcnNlciwgeyBleHRyYWN0Rm9ybWF0dGVkRGlnaXRzQW5kUGx1cyB9IGZyb20gJy4vQXNZb3VUeXBlUGFyc2VyLmpzJztcbmltcG9ydCBnZXRDb3VudHJ5QnlDYWxsaW5nQ29kZSBmcm9tICcuL2hlbHBlcnMvZ2V0Q291bnRyeUJ5Q2FsbGluZ0NvZGUuanMnO1xudmFyIFVTRV9OT05fR0VPR1JBUEhJQ19DT1VOVFJZX0NPREUgPSBmYWxzZTtcblxudmFyIEFzWW91VHlwZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxyXG4gICAqIEBwYXJhbSB7KHN0cmluZ3xvYmplY3QpP30gW29wdGlvbnNPckRlZmF1bHRDb3VudHJ5XSAtIFRoZSBkZWZhdWx0IGNvdW50cnkgdXNlZCBmb3IgcGFyc2luZyBub24taW50ZXJuYXRpb25hbCBwaG9uZSBudW1iZXJzLiBDYW4gYWxzbyBiZSBhbiBgb3B0aW9uc2Agb2JqZWN0LlxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtZXRhZGF0YVxyXG4gICAqL1xuICBmdW5jdGlvbiBBc1lvdVR5cGUob3B0aW9uc09yRGVmYXVsdENvdW50cnksIG1ldGFkYXRhKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFzWW91VHlwZSk7XG5cbiAgICB0aGlzLm1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKG1ldGFkYXRhKTtcblxuICAgIHZhciBfdGhpcyRnZXRDb3VudHJ5QW5kQ2EgPSB0aGlzLmdldENvdW50cnlBbmRDYWxsaW5nQ29kZShvcHRpb25zT3JEZWZhdWx0Q291bnRyeSksXG4gICAgICAgIF90aGlzJGdldENvdW50cnlBbmRDYTIgPSBfc2xpY2VkVG9BcnJheShfdGhpcyRnZXRDb3VudHJ5QW5kQ2EsIDIpLFxuICAgICAgICBkZWZhdWx0Q291bnRyeSA9IF90aGlzJGdldENvdW50cnlBbmRDYTJbMF0sXG4gICAgICAgIGRlZmF1bHRDYWxsaW5nQ29kZSA9IF90aGlzJGdldENvdW50cnlBbmRDYTJbMV07XG5cbiAgICB0aGlzLmRlZmF1bHRDb3VudHJ5ID0gZGVmYXVsdENvdW50cnk7XG4gICAgdGhpcy5kZWZhdWx0Q2FsbGluZ0NvZGUgPSBkZWZhdWx0Q2FsbGluZ0NvZGU7XG4gICAgdGhpcy5yZXNldCgpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFzWW91VHlwZSwgW3tcbiAgICBrZXk6IFwiZ2V0Q291bnRyeUFuZENhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvdW50cnlBbmRDYWxsaW5nQ29kZShvcHRpb25zT3JEZWZhdWx0Q291bnRyeSkge1xuICAgICAgLy8gU2V0IGBkZWZhdWx0Q291bnRyeWAgYW5kIGBkZWZhdWx0Q2FsbGluZ0NvZGVgIG9wdGlvbnMuXG4gICAgICB2YXIgZGVmYXVsdENvdW50cnk7XG4gICAgICB2YXIgZGVmYXVsdENhbGxpbmdDb2RlOyAvLyBUdXJucyBvdXQgYG51bGxgIGFsc28gaGFzIHR5cGUgXCJvYmplY3RcIi4gV2VpcmQuXG5cbiAgICAgIGlmIChvcHRpb25zT3JEZWZhdWx0Q291bnRyeSkge1xuICAgICAgICBpZiAoX3R5cGVvZihvcHRpb25zT3JEZWZhdWx0Q291bnRyeSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgZGVmYXVsdENvdW50cnkgPSBvcHRpb25zT3JEZWZhdWx0Q291bnRyeS5kZWZhdWx0Q291bnRyeTtcbiAgICAgICAgICBkZWZhdWx0Q2FsbGluZ0NvZGUgPSBvcHRpb25zT3JEZWZhdWx0Q291bnRyeS5kZWZhdWx0Q2FsbGluZ0NvZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVmYXVsdENvdW50cnkgPSBvcHRpb25zT3JEZWZhdWx0Q291bnRyeTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGVmYXVsdENvdW50cnkgJiYgIXRoaXMubWV0YWRhdGEuaGFzQ291bnRyeShkZWZhdWx0Q291bnRyeSkpIHtcbiAgICAgICAgZGVmYXVsdENvdW50cnkgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWZhdWx0Q2FsbGluZ0NvZGUpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChVU0VfTk9OX0dFT0dSQVBISUNfQ09VTlRSWV9DT0RFKSB7XG4gICAgICAgICAgaWYgKHRoaXMubWV0YWRhdGEuaXNOb25HZW9ncmFwaGljQ2FsbGluZ0NvZGUoZGVmYXVsdENhbGxpbmdDb2RlKSkge1xuICAgICAgICAgICAgZGVmYXVsdENvdW50cnkgPSAnMDAxJztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFtkZWZhdWx0Q291bnRyeSwgZGVmYXVsdENhbGxpbmdDb2RlXTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBJbnB1dHMgXCJuZXh0XCIgcGhvbmUgbnVtYmVyIGNoYXJhY3RlcnMuXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IHRleHRcclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gRm9ybWF0dGVkIHBob25lIG51bWJlciBjaGFyYWN0ZXJzIHRoYXQgaGF2ZSBiZWVuIGlucHV0IHNvIGZhci5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5wdXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5wdXQodGV4dCkge1xuICAgICAgdmFyIF90aGlzJHBhcnNlciRpbnB1dCA9IHRoaXMucGFyc2VyLmlucHV0KHRleHQsIHRoaXMuc3RhdGUpLFxuICAgICAgICAgIGRpZ2l0cyA9IF90aGlzJHBhcnNlciRpbnB1dC5kaWdpdHMsXG4gICAgICAgICAganVzdExlYWRpbmdQbHVzID0gX3RoaXMkcGFyc2VyJGlucHV0Lmp1c3RMZWFkaW5nUGx1cztcblxuICAgICAgaWYgKGp1c3RMZWFkaW5nUGx1cykge1xuICAgICAgICB0aGlzLmZvcm1hdHRlZE91dHB1dCA9ICcrJztcbiAgICAgIH0gZWxzZSBpZiAoZGlnaXRzKSB7XG4gICAgICAgIHRoaXMuZGV0ZXJtaW5lVGhlQ291bnRyeUlmTmVlZGVkKCk7IC8vIE1hdGNoIHRoZSBhdmFpbGFibGUgZm9ybWF0cyBieSB0aGUgY3VycmVudGx5IGF2YWlsYWJsZSBsZWFkaW5nIGRpZ2l0cy5cblxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5uYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKSB7XG4gICAgICAgICAgdGhpcy5mb3JtYXR0ZXIubmFycm93RG93bk1hdGNoaW5nRm9ybWF0cyh0aGlzLnN0YXRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmb3JtYXR0ZWROYXRpb25hbE51bWJlcjtcblxuICAgICAgICBpZiAodGhpcy5tZXRhZGF0YS5oYXNTZWxlY3RlZE51bWJlcmluZ1BsYW4oKSkge1xuICAgICAgICAgIGZvcm1hdHRlZE5hdGlvbmFsTnVtYmVyID0gdGhpcy5mb3JtYXR0ZXIuZm9ybWF0KGRpZ2l0cywgdGhpcy5zdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIFNlZSBpZiBhbm90aGVyIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIGNvdWxkIGJlIHJlLWV4dHJhY3RlZC5cbiAgICAgICAgICBpZiAodGhpcy5wYXJzZXIucmVFeHRyYWN0TmF0aW9uYWxTaWduaWZpY2FudE51bWJlcih0aGlzLnN0YXRlKSkge1xuICAgICAgICAgICAgdGhpcy5kZXRlcm1pbmVUaGVDb3VudHJ5SWZOZWVkZWQoKTsgLy8gSWYgaXQgY291bGQsIHRoZW4gcmUtdHJ5IGZvcm1hdHRpbmcgdGhlIG5ldyBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlci5cblxuICAgICAgICAgICAgdmFyIG5hdGlvbmFsRGlnaXRzID0gdGhpcy5zdGF0ZS5nZXROYXRpb25hbERpZ2l0cygpO1xuXG4gICAgICAgICAgICBpZiAobmF0aW9uYWxEaWdpdHMpIHtcbiAgICAgICAgICAgICAgZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIgPSB0aGlzLmZvcm1hdHRlci5mb3JtYXQobmF0aW9uYWxEaWdpdHMsIHRoaXMuc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZm9ybWF0dGVkT3V0cHV0ID0gZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIgPyB0aGlzLmdldEZ1bGxOdW1iZXIoZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIpIDogdGhpcy5nZXROb25Gb3JtYXR0ZWROdW1iZXIoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVkT3V0cHV0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIHRoaXMuc3RhdGUgPSBuZXcgQXNZb3VUeXBlU3RhdGUoe1xuICAgICAgICBvbkNvdW50cnlDaGFuZ2U6IGZ1bmN0aW9uIG9uQ291bnRyeUNoYW5nZShjb3VudHJ5KSB7XG4gICAgICAgICAgLy8gQmVmb3JlIHZlcnNpb24gYDEuNi4wYCwgdGhlIG9mZmljaWFsIGBBc1lvdVR5cGVgIGZvcm1hdHRlciBBUElcbiAgICAgICAgICAvLyBpbmNsdWRlZCB0aGUgYC5jb3VudHJ5YCBwcm9wZXJ0eSBvZiBhbiBgQXNZb3VUeXBlYCBpbnN0YW5jZS5cbiAgICAgICAgICAvLyBTaW5jZSB0aGF0IHByb3BlcnR5IChhbG9uZyB3aXRoIHRoZSBvdGhlcnMpIGhhdmUgYmVlbiBtb3ZlZCB0b1xuICAgICAgICAgIC8vIGB0aGlzLnN0YXRlYCwgYHRoaXMuY291bnRyeWAgcHJvcGVydHkgaXMgZW11bGF0ZWQgZm9yIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAvLyB3aXRoIHRoZSBvbGQgdmVyc2lvbnMuXG4gICAgICAgICAgX3RoaXMuY291bnRyeSA9IGNvdW50cnk7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2FsbGluZ0NvZGVDaGFuZ2U6IGZ1bmN0aW9uIG9uQ2FsbGluZ0NvZGVDaGFuZ2UoY2FsbGluZ0NvZGUsIGNvdW50cnkpIHtcbiAgICAgICAgICBfdGhpcy5tZXRhZGF0YS5zZWxlY3ROdW1iZXJpbmdQbGFuKGNvdW50cnksIGNhbGxpbmdDb2RlKTtcblxuICAgICAgICAgIF90aGlzLmZvcm1hdHRlci5yZXNldChfdGhpcy5tZXRhZGF0YS5udW1iZXJpbmdQbGFuLCBfdGhpcy5zdGF0ZSk7XG5cbiAgICAgICAgICBfdGhpcy5wYXJzZXIucmVzZXQoX3RoaXMubWV0YWRhdGEubnVtYmVyaW5nUGxhbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdGhpcy5mb3JtYXR0ZXIgPSBuZXcgQXNZb3VUeXBlRm9ybWF0dGVyKHtcbiAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgICAgIG1ldGFkYXRhOiB0aGlzLm1ldGFkYXRhXG4gICAgICB9KTtcbiAgICAgIHRoaXMucGFyc2VyID0gbmV3IEFzWW91VHlwZVBhcnNlcih7XG4gICAgICAgIGRlZmF1bHRDb3VudHJ5OiB0aGlzLmRlZmF1bHRDb3VudHJ5LFxuICAgICAgICBkZWZhdWx0Q2FsbGluZ0NvZGU6IHRoaXMuZGVmYXVsdENhbGxpbmdDb2RlLFxuICAgICAgICBtZXRhZGF0YTogdGhpcy5tZXRhZGF0YSxcbiAgICAgICAgc3RhdGU6IHRoaXMuc3RhdGUsXG4gICAgICAgIG9uTmF0aW9uYWxTaWduaWZpY2FudE51bWJlckNoYW5nZTogZnVuY3Rpb24gb25OYXRpb25hbFNpZ25pZmljYW50TnVtYmVyQ2hhbmdlKCkge1xuICAgICAgICAgIF90aGlzLmRldGVybWluZVRoZUNvdW50cnlJZk5lZWRlZCgpO1xuXG4gICAgICAgICAgX3RoaXMuZm9ybWF0dGVyLnJlc2V0KF90aGlzLm1ldGFkYXRhLm51bWJlcmluZ1BsYW4sIF90aGlzLnN0YXRlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB0aGlzLnN0YXRlLnJlc2V0KHtcbiAgICAgICAgY291bnRyeTogdGhpcy5kZWZhdWx0Q291bnRyeSxcbiAgICAgICAgY2FsbGluZ0NvZGU6IHRoaXMuZGVmYXVsdENhbGxpbmdDb2RlXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZm9ybWF0dGVkT3V0cHV0ID0gJyc7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcGhvbmUgbnVtYmVyIGlzIGJlaW5nIGlucHV0IGluIGludGVybmF0aW9uYWwgZm9ybWF0LlxyXG4gICAgICogSW4gb3RoZXIgd29yZHMsIHJldHVybnMgYHRydWVgIGlmIGFuZCBvbmx5IGlmIHRoZSBwYXJzZWQgcGhvbmUgbnVtYmVyIHN0YXJ0cyB3aXRoIGEgYFwiK1wiYC5cclxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImlzSW50ZXJuYXRpb25hbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0ludGVybmF0aW9uYWwoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5pbnRlcm5hdGlvbmFsO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIFwiY2FsbGluZyBjb2RlXCIgcGFydCBvZiB0aGUgcGhvbmUgbnVtYmVyIHdoZW4gaXQncyBiZWluZyBpbnB1dFxyXG4gICAgICogaW4gYW4gaW50ZXJuYXRpb25hbCBmb3JtYXQuXHJcbiAgICAgKiBJZiBubyB2YWxpZCBjYWxsaW5nIGNvZGUgaGFzIGJlZW4gZW50ZXJlZCBzbyBmYXIsIHJldHVybnMgYHVuZGVmaW5lZGAuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFtjYWxsaW5nQ29kZV1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Q2FsbGluZ0NvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q2FsbGluZ0NvZGUoKSB7XG4gICAgICAvLyBJZiB0aGUgbnVtYmVyIGlzIGJlaW5nIGlucHV0IGluIG5hdGlvbmFsIGZvcm1hdCBhbmQgc29tZSBcImRlZmF1bHQgY2FsbGluZyBjb2RlXCJcbiAgICAgIC8vIGhhcyBiZWVuIHBhc3NlZCB0byBgQXNZb3VUeXBlYCBjb25zdHJ1Y3RvciwgdGhlbiBgdGhpcy5zdGF0ZS5jYWxsaW5nQ29kZWBcbiAgICAgIC8vIGlzIGVxdWFsIHRvIHRoYXQgXCJkZWZhdWx0IGNhbGxpbmcgY29kZVwiLlxuICAgICAgLy9cbiAgICAgIC8vIElmIHRoZSBudW1iZXIgaXMgYmVpbmcgaW5wdXQgaW4gbmF0aW9uYWwgZm9ybWF0IGFuZCBubyBcImRlZmF1bHQgY2FsbGluZyBjb2RlXCJcbiAgICAgIC8vIGhhcyBiZWVuIHBhc3NlZCB0byBgQXNZb3VUeXBlYCBjb25zdHJ1Y3RvciwgdGhlbiByZXR1cm5zIGB1bmRlZmluZWRgLFxuICAgICAgLy8gZXZlbiBpZiBhIFwiZGVmYXVsdCBjb3VudHJ5XCIgaGFzIGJlZW4gcGFzc2VkIHRvIGBBc1lvdVR5cGVgIGNvbnN0cnVjdG9yLlxuICAgICAgLy9cbiAgICAgIGlmICh0aGlzLmlzSW50ZXJuYXRpb25hbCgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmNhbGxpbmdDb2RlO1xuICAgICAgfVxuICAgIH0gLy8gQSBsZWdhY3kgYWxpYXMuXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb3VudHJ5Q2FsbGluZ0NvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q291bnRyeUNhbGxpbmdDb2RlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FsbGluZ0NvZGUoKTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgdHdvLWxldHRlciBjb3VudHJ5IGNvZGUgb2YgdGhlIHBob25lIG51bWJlci5cclxuICAgICAqIFJldHVybnMgYHVuZGVmaW5lZGAgZm9yIFwibm9uLWdlb2dyYXBoaWNcIiBwaG9uZSBudW1iZXJpbmcgcGxhbnMuXHJcbiAgICAgKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIG5vIHBob25lIG51bWJlciBoYXMgYmVlbiBpbnB1dCB5ZXQuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFtjb3VudHJ5XVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb3VudHJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvdW50cnkoKSB7XG4gICAgICB2YXIgZGlnaXRzID0gdGhpcy5zdGF0ZS5kaWdpdHM7IC8vIFJldHVybiBgdW5kZWZpbmVkYCBpZiBubyBkaWdpdHMgaGF2ZSBiZWVuIGlucHV0IHlldC5cblxuICAgICAgaWYgKGRpZ2l0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q291bnRyeSgpO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSB0d28tbGV0dGVyIGNvdW50cnkgY29kZSBvZiB0aGUgcGhvbmUgbnVtYmVyLlxyXG4gICAgICogUmV0dXJucyBgdW5kZWZpbmVkYCBmb3IgXCJub24tZ2VvZ3JhcGhpY1wiIHBob25lIG51bWJlcmluZyBwbGFucy5cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ30gW2NvdW50cnldXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRDb3VudHJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRDb3VudHJ5KCkge1xuICAgICAgdmFyIGNvdW50cnkgPSB0aGlzLnN0YXRlLmNvdW50cnk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuICAgICAgaWYgKFVTRV9OT05fR0VPR1JBUEhJQ19DT1VOVFJZX0NPREUpIHtcbiAgICAgICAgLy8gYEFzWW91VHlwZS5nZXRDb3VudHJ5KClgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgICAgLy8gZm9yIFwibm9uLWdlb2dyYXBoaWNcIiBwaG9uZSBudW1iZXJpbmcgcGxhbnMuXG4gICAgICAgIGlmIChjb3VudHJ5ID09PSAnMDAxJykge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY291bnRyeTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZGV0ZXJtaW5lVGhlQ291bnRyeUlmTmVlZGVkXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGVybWluZVRoZUNvdW50cnlJZk5lZWRlZCgpIHtcbiAgICAgIC8vIFN1cHBvc2UgYSB1c2VyIGVudGVycyBhIHBob25lIG51bWJlciBpbiBpbnRlcm5hdGlvbmFsIGZvcm1hdCxcbiAgICAgIC8vIGFuZCB0aGVyZSdyZSBzZXZlcmFsIGNvdW50cmllcyBjb3JyZXNwb25kaW5nIHRvIHRoYXQgY291bnRyeSBjYWxsaW5nIGNvZGUsXG4gICAgICAvLyBhbmQgYSBjb3VudHJ5IGhhcyBiZWVuIGRlcml2ZWQgZnJvbSB0aGUgbnVtYmVyLCBhbmQgdGhlblxuICAgICAgLy8gYSB1c2VyIGVudGVycyBvbmUgbW9yZSBkaWdpdCBhbmQgdGhlIG51bWJlciBpcyBubyBsb25nZXJcbiAgICAgIC8vIHZhbGlkIGZvciB0aGUgZGVyaXZlZCBjb3VudHJ5LCBzbyB0aGUgY291bnRyeSBzaG91bGQgYmUgcmUtZGVyaXZlZFxuICAgICAgLy8gb24gZXZlcnkgbmV3IGRpZ2l0IGluIHRob3NlIGNhc2VzLlxuICAgICAgLy9cbiAgICAgIC8vIElmIHRoZSBwaG9uZSBudW1iZXIgaXMgYmVpbmcgaW5wdXQgaW4gbmF0aW9uYWwgZm9ybWF0LFxuICAgICAgLy8gdGhlbiBpdCBjb3VsZCBiZSBhIGNhc2Ugd2hlbiBgZGVmYXVsdENvdW50cnlgIHdhc24ndCBzcGVjaWZpZWRcbiAgICAgIC8vIHdoZW4gY3JlYXRpbmcgYEFzWW91VHlwZWAgaW5zdGFuY2UsIGFuZCBqdXN0IGBkZWZhdWx0Q2FsbGluZ0NvZGVgIHdhcyBzcGVjaWZpZWQsXG4gICAgICAvLyBhbmQgdGhhdCBcImNhbGxpbmcgY29kZVwiIGNvdWxkIGNvcnJlc3BvbmQgdG8gYSBcIm5vbi1nZW9ncmFwaGljIGVudGl0eVwiLFxuICAgICAgLy8gb3IgdGhlcmUgY291bGQgYmUgc2V2ZXJhbCBjb3VudHJpZXMgY29ycmVzcG9uZGluZyB0byB0aGF0IGNvdW50cnkgY2FsbGluZyBjb2RlLlxuICAgICAgLy8gSW4gdGhvc2UgY2FzZXMsIGB0aGlzLmNvdW50cnlgIGlzIGB1bmRlZmluZWRgIGFuZCBzaG91bGQgYmUgZGVyaXZlZFxuICAgICAgLy8gZnJvbSB0aGUgbnVtYmVyLiBBZ2FpbiwgaWYgY291bnRyeSBjYWxsaW5nIGNvZGUgaXMgYW1iaWd1b3VzLCB0aGVuXG4gICAgICAvLyBgdGhpcy5jb3VudHJ5YCBzaG91bGQgYmUgcmUtZGVyaXZlZCB3aXRoIGVhY2ggbmV3IGRpZ2l0LlxuICAgICAgLy9cbiAgICAgIGlmICghdGhpcy5zdGF0ZS5jb3VudHJ5IHx8IHRoaXMuaXNDb3VudHJ5Q2FsbGluZ0NvZGVBbWJpZ3VvdXMoKSkge1xuICAgICAgICB0aGlzLmRldGVybWluZVRoZUNvdW50cnkoKTtcbiAgICAgIH1cbiAgICB9IC8vIFByZXBlbmRzIGArQ291bnRyeUNvZGUgYCBpbiBjYXNlIG9mIGFuIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVyXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRGdWxsTnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZ1bGxOdW1iZXIoZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5pc0ludGVybmF0aW9uYWwoKSkge1xuICAgICAgICB2YXIgcHJlZml4ID0gZnVuY3Rpb24gcHJlZml4KHRleHQpIHtcbiAgICAgICAgICByZXR1cm4gX3RoaXMyLmZvcm1hdHRlci5nZXRJbnRlcm5hdGlvbmFsUHJlZml4QmVmb3JlQ291bnRyeUNhbGxpbmdDb2RlKF90aGlzMi5zdGF0ZSwge1xuICAgICAgICAgICAgc3BhY2luZzogdGV4dCA/IHRydWUgOiBmYWxzZVxuICAgICAgICAgIH0pICsgdGV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgY2FsbGluZ0NvZGUgPSB0aGlzLnN0YXRlLmNhbGxpbmdDb2RlO1xuXG4gICAgICAgIGlmICghY2FsbGluZ0NvZGUpIHtcbiAgICAgICAgICByZXR1cm4gcHJlZml4KFwiXCIuY29uY2F0KHRoaXMuc3RhdGUuZ2V0RGlnaXRzV2l0aG91dEludGVybmF0aW9uYWxQcmVmaXgoKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmb3JtYXR0ZWROYXRpb25hbE51bWJlcikge1xuICAgICAgICAgIHJldHVybiBwcmVmaXgoY2FsbGluZ0NvZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByZWZpeChcIlwiLmNvbmNhdChjYWxsaW5nQ29kZSwgXCIgXCIpLmNvbmNhdChmb3JtYXR0ZWROYXRpb25hbE51bWJlcikpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXI7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE5vbkZvcm1hdHRlZE5hdGlvbmFsTnVtYmVyV2l0aFByZWZpeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXROb25Gb3JtYXR0ZWROYXRpb25hbE51bWJlcldpdGhQcmVmaXgoKSB7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIgPSBfdGhpcyRzdGF0ZS5uYXRpb25hbFNpZ25pZmljYW50TnVtYmVyLFxuICAgICAgICAgIGNvbXBsZXhQcmVmaXhCZWZvcmVOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyID0gX3RoaXMkc3RhdGUuY29tcGxleFByZWZpeEJlZm9yZU5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIsXG4gICAgICAgICAgbmF0aW9uYWxQcmVmaXggPSBfdGhpcyRzdGF0ZS5uYXRpb25hbFByZWZpeDtcbiAgICAgIHZhciBudW1iZXIgPSBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyO1xuICAgICAgdmFyIHByZWZpeCA9IGNvbXBsZXhQcmVmaXhCZWZvcmVOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyIHx8IG5hdGlvbmFsUHJlZml4O1xuXG4gICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgIG51bWJlciA9IHByZWZpeCArIG51bWJlcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Tm9uRm9ybWF0dGVkTnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5vbkZvcm1hdHRlZE51bWJlcigpIHtcbiAgICAgIHZhciBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyTWF0Y2hlc0lucHV0ID0gdGhpcy5zdGF0ZS5uYXRpb25hbFNpZ25pZmljYW50TnVtYmVyTWF0Y2hlc0lucHV0O1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0RnVsbE51bWJlcihuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyTWF0Y2hlc0lucHV0ID8gdGhpcy5nZXROb25Gb3JtYXR0ZWROYXRpb25hbE51bWJlcldpdGhQcmVmaXgoKSA6IHRoaXMuc3RhdGUuZ2V0TmF0aW9uYWxEaWdpdHMoKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldE5vbkZvcm1hdHRlZFRlbXBsYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE5vbkZvcm1hdHRlZFRlbXBsYXRlKCkge1xuICAgICAgdmFyIG51bWJlciA9IHRoaXMuZ2V0Tm9uRm9ybWF0dGVkTnVtYmVyKCk7XG5cbiAgICAgIGlmIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIG51bWJlci5yZXBsYWNlKC9bXFwrXFxkXS9nLCBESUdJVF9QTEFDRUhPTERFUik7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzQ291bnRyeUNhbGxpbmdDb2RlQW1iaWd1b3VzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzQ291bnRyeUNhbGxpbmdDb2RlQW1iaWd1b3VzKCkge1xuICAgICAgdmFyIGNhbGxpbmdDb2RlID0gdGhpcy5zdGF0ZS5jYWxsaW5nQ29kZTtcbiAgICAgIHZhciBjb3VudHJ5Q29kZXMgPSB0aGlzLm1ldGFkYXRhLmdldENvdW50cnlDb2Rlc0ZvckNhbGxpbmdDb2RlKGNhbGxpbmdDb2RlKTtcbiAgICAgIHJldHVybiBjb3VudHJ5Q29kZXMgJiYgY291bnRyeUNvZGVzLmxlbmd0aCA+IDE7XG4gICAgfSAvLyBEZXRlcm1pbmVzIHRoZSBjb3VudHJ5IG9mIHRoZSBwaG9uZSBudW1iZXJcbiAgICAvLyBlbnRlcmVkIHNvIGZhciBiYXNlZCBvbiB0aGUgY291bnRyeSBwaG9uZSBjb2RlXG4gICAgLy8gYW5kIHRoZSBuYXRpb25hbCBwaG9uZSBudW1iZXIuXG5cbiAgfSwge1xuICAgIGtleTogXCJkZXRlcm1pbmVUaGVDb3VudHJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRldGVybWluZVRoZUNvdW50cnkoKSB7XG4gICAgICB0aGlzLnN0YXRlLnNldENvdW50cnkoZ2V0Q291bnRyeUJ5Q2FsbGluZ0NvZGUodGhpcy5pc0ludGVybmF0aW9uYWwoKSA/IHRoaXMuc3RhdGUuY2FsbGluZ0NvZGUgOiB0aGlzLmRlZmF1bHRDYWxsaW5nQ29kZSwgdGhpcy5zdGF0ZS5uYXRpb25hbFNpZ25pZmljYW50TnVtYmVyLCB0aGlzLm1ldGFkYXRhKSk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIEUuMTY0IHBob25lIG51bWJlciB2YWx1ZSBmb3IgdGhlIHVzZXIncyBpbnB1dC5cclxuICAgICAqXHJcbiAgICAgKiBGb3IgZXhhbXBsZSwgZm9yIGNvdW50cnkgYFwiVVNcImAgYW5kIGlucHV0IGBcIigyMjIpIDMzMy00NDQ0XCJgXHJcbiAgICAgKiBpdCB3aWxsIHJldHVybiBgXCIrMTIyMjMzMzQ0NDRcImAuXHJcbiAgICAgKlxyXG4gICAgICogRm9yIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVyIGlucHV0LCBpdCB3aWxsIGFsc28gYXV0by1jb3JyZWN0XHJcbiAgICAgKiBzb21lIG1pbm9yIGVycm9ycyBzdWNoIGFzIHVzaW5nIGEgbmF0aW9uYWwgcHJlZml4IHdoZW4gd3JpdGluZ1xyXG4gICAgICogYW4gaW50ZXJuYXRpb25hbCBwaG9uZSBudW1iZXIuIEZvciBleGFtcGxlLCBpZiB0aGUgdXNlciBpbnB1dHNcclxuICAgICAqIGBcIis0NCAwIDc0MDAgMDAwMDAwXCJgIHRoZW4gaXQgd2lsbCByZXR1cm4gYW4gYXV0by1jb3JyZWN0ZWRcclxuICAgICAqIGBcIis0NDc0MDAwMDAwMDBcImAgcGhvbmUgbnVtYmVyIHZhbHVlLlxyXG4gICAgICpcclxuICAgICAqIFdpbGwgcmV0dXJuIGB1bmRlZmluZWRgIGlmIG5vIGRpZ2l0cyBoYXZlIGJlZW4gaW5wdXQsXHJcbiAgICAgKiBvciB3aGVuIGlucHV0dGluZyBhIHBob25lIG51bWJlciBpbiBuYXRpb25hbCBmb3JtYXQgYW5kIG5vXHJcbiAgICAgKiBkZWZhdWx0IGNvdW50cnkgb3IgZGVmYXVsdCBcImNvdW50cnkgY2FsbGluZyBjb2RlXCIgaGF2ZSBiZWVuIHNldC5cclxuICAgICAqXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFt2YWx1ZV1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TnVtYmVyVmFsdWVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TnVtYmVyVmFsdWUoKSB7XG4gICAgICB2YXIgX3RoaXMkc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBkaWdpdHMgPSBfdGhpcyRzdGF0ZTIuZGlnaXRzLFxuICAgICAgICAgIGNhbGxpbmdDb2RlID0gX3RoaXMkc3RhdGUyLmNhbGxpbmdDb2RlLFxuICAgICAgICAgIGNvdW50cnkgPSBfdGhpcyRzdGF0ZTIuY291bnRyeSxcbiAgICAgICAgICBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyID0gX3RoaXMkc3RhdGUyLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXI7IC8vIFdpbGwgcmV0dXJuIGB1bmRlZmluZWRgIGlmIG5vIGRpZ2l0cyBoYXZlIGJlZW4gaW5wdXQuXG5cbiAgICAgIGlmICghZGlnaXRzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNJbnRlcm5hdGlvbmFsKCkpIHtcbiAgICAgICAgaWYgKGNhbGxpbmdDb2RlKSB7XG4gICAgICAgICAgcmV0dXJuICcrJyArIGNhbGxpbmdDb2RlICsgbmF0aW9uYWxTaWduaWZpY2FudE51bWJlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gJysnICsgZGlnaXRzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY291bnRyeSB8fCBjYWxsaW5nQ29kZSkge1xuICAgICAgICAgIHZhciBjYWxsaW5nQ29kZV8gPSBjb3VudHJ5ID8gdGhpcy5tZXRhZGF0YS5jb3VudHJ5Q2FsbGluZ0NvZGUoKSA6IGNhbGxpbmdDb2RlO1xuICAgICAgICAgIHJldHVybiAnKycgKyBjYWxsaW5nQ29kZV8gKyBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBpbnN0YW5jZSBvZiBgUGhvbmVOdW1iZXJgIGNsYXNzLlxyXG4gICAgICogV2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgaWYgbm8gbmF0aW9uYWwgKHNpZ25pZmljYW50KSBudW1iZXJcclxuICAgICAqIGRpZ2l0cyBoYXZlIGJlZW4gZW50ZXJlZCBzbyBmYXIsIG9yIGlmIG5vIGBkZWZhdWx0Q291bnRyeWAgaGFzIGJlZW5cclxuICAgICAqIHNldCBhbmQgdGhlIHVzZXIgZW50ZXJzIGEgcGhvbmUgbnVtYmVyIG5vdCBpbiBpbnRlcm5hdGlvbmFsIGZvcm1hdC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldE51bWJlcigpIHtcbiAgICAgIHZhciBfdGhpcyRzdGF0ZTMgPSB0aGlzLnN0YXRlLFxuICAgICAgICAgIG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIgPSBfdGhpcyRzdGF0ZTMubmF0aW9uYWxTaWduaWZpY2FudE51bWJlcixcbiAgICAgICAgICBjYXJyaWVyQ29kZSA9IF90aGlzJHN0YXRlMy5jYXJyaWVyQ29kZSxcbiAgICAgICAgICBjYWxsaW5nQ29kZSA9IF90aGlzJHN0YXRlMy5jYWxsaW5nQ29kZTsgLy8gYHRoaXMuX2dldENvdW50cnkoKWAgaXMgYmFzaWNhbGx5IHNhbWUgYXMgYHRoaXMuc3RhdGUuY291bnRyeWBcbiAgICAgIC8vIHdpdGggdGhlIG9ubHkgY2hhbmdlIHRoYXQgaXQgcmV0dXJuIGB1bmRlZmluZWRgIGluIGNhc2Ugb2YgYVxuICAgICAgLy8gXCJub24tZ2VvZ3JhcGhpY1wiIG51bWJlcmluZyBwbGFuIGluc3RlYWQgb2YgYFwiMDAxXCJgIFwiaW50ZXJuYWwgdXNlXCIgdmFsdWUuXG5cbiAgICAgIHZhciBjb3VudHJ5ID0gdGhpcy5fZ2V0Q291bnRyeSgpO1xuXG4gICAgICBpZiAoIW5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWNvdW50cnkgJiYgIWNhbGxpbmdDb2RlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBob25lTnVtYmVyID0gbmV3IFBob25lTnVtYmVyKGNvdW50cnkgfHwgY2FsbGluZ0NvZGUsIG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIsIHRoaXMubWV0YWRhdGEubWV0YWRhdGEpO1xuXG4gICAgICBpZiAoY2FycmllckNvZGUpIHtcbiAgICAgICAgcGhvbmVOdW1iZXIuY2FycmllckNvZGUgPSBjYXJyaWVyQ29kZTtcbiAgICAgIH0gLy8gUGhvbmUgbnVtYmVyIGV4dGVuc2lvbnMgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgXCJBcyBZb3UgVHlwZVwiIGZvcm1hdHRlci5cblxuXG4gICAgICByZXR1cm4gcGhvbmVOdW1iZXI7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHBob25lIG51bWJlciBpcyBcInBvc3NpYmxlXCIuXHJcbiAgICAgKiBJcyBqdXN0IGEgc2hvcnRjdXQgZm9yIGBQaG9uZU51bWJlci5pc1Bvc3NpYmxlKClgLlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNQb3NzaWJsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1Bvc3NpYmxlKCkge1xuICAgICAgdmFyIHBob25lTnVtYmVyID0gdGhpcy5nZXROdW1iZXIoKTtcblxuICAgICAgaWYgKCFwaG9uZU51bWJlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwaG9uZU51bWJlci5pc1Bvc3NpYmxlKCk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHBob25lIG51bWJlciBpcyBcInZhbGlkXCIuXHJcbiAgICAgKiBJcyBqdXN0IGEgc2hvcnRjdXQgZm9yIGBQaG9uZU51bWJlci5pc1ZhbGlkKClgLlxyXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1ZhbGlkKCkge1xuICAgICAgdmFyIHBob25lTnVtYmVyID0gdGhpcy5nZXROdW1iZXIoKTtcblxuICAgICAgaWYgKCFwaG9uZU51bWJlcikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwaG9uZU51bWJlci5pc1ZhbGlkKCk7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogQGRlcHJlY2F0ZWRcclxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHVzZWQgaW4gYHJlYWN0LXBob25lLW51bWJlci1pbnB1dC9zb3VyY2UvaW5wdXQtY29udHJvbC5qc2BcclxuICAgICAqIGluIHZlcnNpb25zIGJlZm9yZSBgMy4wLjE2YC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TmF0aW9uYWxOdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TmF0aW9uYWxOdW1iZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5uYXRpb25hbFNpZ25pZmljYW50TnVtYmVyO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHBob25lIG51bWJlciBjaGFyYWN0ZXJzIGVudGVyZWQgYnkgdGhlIHVzZXIuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldENoYXJzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENoYXJzKCkge1xuICAgICAgcmV0dXJuICh0aGlzLnN0YXRlLmludGVybmF0aW9uYWwgPyAnKycgOiAnJykgKyB0aGlzLnN0YXRlLmRpZ2l0cztcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIHRoZSB0ZW1wbGF0ZSBmb3IgdGhlIGZvcm1hdHRlZCBwaG9uZSBudW1iZXIuXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImdldFRlbXBsYXRlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRlbXBsYXRlKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyLmdldFRlbXBsYXRlKHRoaXMuc3RhdGUpIHx8IHRoaXMuZ2V0Tm9uRm9ybWF0dGVkVGVtcGxhdGUoKSB8fCAnJztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXNZb3VUeXBlO1xufSgpO1xuXG5leHBvcnQgeyBBc1lvdVR5cGUgYXMgZGVmYXVsdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNZb3VUeXBlLmpzLm1hcCIsImZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmIChpdCkgcmV0dXJuIChpdCA9IGl0LmNhbGwobykpLm5leHQuYmluZChpdCk7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBcInByb3RvdHlwZVwiLCB7IHdyaXRhYmxlOiBmYWxzZSB9KTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmltcG9ydCBQYXR0ZXJuUGFyc2VyIGZyb20gJy4vQXNZb3VUeXBlRm9ybWF0dGVyLlBhdHRlcm5QYXJzZXIuanMnO1xuXG52YXIgUGF0dGVybk1hdGNoZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYXR0ZXJuTWF0Y2hlcihwYXR0ZXJuKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhdHRlcm5NYXRjaGVyKTtcblxuICAgIHRoaXMubWF0Y2hUcmVlID0gbmV3IFBhdHRlcm5QYXJzZXIoKS5wYXJzZShwYXR0ZXJuKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYXR0ZXJuTWF0Y2hlciwgW3tcbiAgICBrZXk6IFwibWF0Y2hcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbWF0Y2goc3RyaW5nKSB7XG4gICAgICB2YXIgX3JlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge30sXG4gICAgICAgICAgYWxsb3dPdmVyZmxvdyA9IF9yZWYuYWxsb3dPdmVyZmxvdztcblxuICAgICAgaWYgKCFzdHJpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdHJpbmcgaXMgcmVxdWlyZWQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlc3VsdCA9IF9tYXRjaChzdHJpbmcuc3BsaXQoJycpLCB0aGlzLm1hdGNoVHJlZSwgdHJ1ZSk7XG5cbiAgICAgIGlmIChyZXN1bHQgJiYgcmVzdWx0Lm1hdGNoKSB7XG4gICAgICAgIGRlbGV0ZSByZXN1bHQubWF0Y2hlZENoYXJzO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5vdmVyZmxvdykge1xuICAgICAgICBpZiAoIWFsbG93T3ZlcmZsb3cpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGF0dGVybk1hdGNoZXI7XG59KCk7XG4vKipcclxuICogTWF0Y2hlcyBgY2hhcmFjdGVyc2AgYWdhaW5zdCBhIHBhdHRlcm4gY29tcGlsZWQgaW50byBhIGB0cmVlYC5cclxuICogQHBhcmFtICB7c3RyaW5nW119IGNoYXJhY3RlcnNcclxuICogQHBhcmFtICB7VHJlZX0gdHJlZSDigJQgQSBwYXR0ZXJuIGNvbXBpbGVkIGludG8gYSBgdHJlZWAuIFNlZSB0aGUgYCouZC50c2AgZmlsZSBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBgdHJlZWAgc3RydWN0dXJlLlxyXG4gKiBAcGFyYW0gIHtib29sZWFufSBsYXN0IOKAlCBXaGV0aGVyIGl0J3MgdGhlIGxhc3QgKHJpZ2h0bW9zdCkgc3VidHJlZSBvbiBpdHMgbGV2ZWwgb2YgdGhlIG1hdGNoIHRyZWUuXHJcbiAqIEByZXR1cm4ge29iamVjdH0gU2VlIHRoZSBgKi5kLnRzYCBmaWxlIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIHJlc3VsdCBvYmplY3QuXHJcbiAqL1xuXG5cbmV4cG9ydCB7IFBhdHRlcm5NYXRjaGVyIGFzIGRlZmF1bHQgfTtcblxuZnVuY3Rpb24gX21hdGNoKGNoYXJhY3RlcnMsIHRyZWUsIGxhc3QpIHtcbiAgLy8gSWYgYHRyZWVgIGlzIGEgc3RyaW5nLCB0aGVuIGB0cmVlYCBpcyBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gIC8vIFRoYXQncyBiZWNhdXNlIHdoZW4gYSBwYXR0ZXJuIGlzIHBhcnNlZCwgbXVsdGktY2hhcmFjdGVyLXN0cmluZyBwYXJ0c1xuICAvLyBvZiBhIHBhdHRlcm4gYXJlIGNvbXBpbGVkIGludG8gYXJyYXlzIG9mIHNpbmdsZSBjaGFyYWN0ZXJzLlxuICAvLyBJIHN0aWxsIHdyb3RlIHRoaXMgcGllY2Ugb2YgY29kZSBmb3IgYSBcImdlbmVyYWxcIiBoeXBvdGhldGljYWwgY2FzZVxuICAvLyB3aGVuIGB0cmVlYCBjb3VsZCBiZSBhIHN0cmluZyBvZiBzZXZlcmFsIGNoYXJhY3RlcnMsIGV2ZW4gdGhvdWdoXG4gIC8vIHN1Y2ggY2FzZSBpcyBub3QgcG9zc2libGUgd2l0aCB0aGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbi5cbiAgaWYgKHR5cGVvZiB0cmVlID09PSAnc3RyaW5nJykge1xuICAgIHZhciBjaGFyYWN0ZXJTdHJpbmcgPSBjaGFyYWN0ZXJzLmpvaW4oJycpO1xuXG4gICAgaWYgKHRyZWUuaW5kZXhPZihjaGFyYWN0ZXJTdHJpbmcpID09PSAwKSB7XG4gICAgICAvLyBgdHJlZWAgaXMgYWx3YXlzIGEgc2luZ2xlIGNoYXJhY3Rlci5cbiAgICAgIC8vIElmIGB0cmVlLmluZGV4T2YoY2hhcmFjdGVyU3RyaW5nKSA9PT0gMGBcbiAgICAgIC8vIHRoZW4gYGNoYXJhY3RlcnMubGVuZ3RoID09PSB0cmVlLmxlbmd0aGAuXG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAoY2hhcmFjdGVycy5sZW5ndGggPT09IHRyZWUubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF0Y2g6IHRydWUsXG4gICAgICAgICAgbWF0Y2hlZENoYXJzOiBjaGFyYWN0ZXJzXG4gICAgICAgIH07XG4gICAgICB9IC8vIGB0cmVlYCBpcyBhbHdheXMgYSBzaW5nbGUgY2hhcmFjdGVyLlxuICAgICAgLy8gSWYgYHRyZWUuaW5kZXhPZihjaGFyYWN0ZXJTdHJpbmcpID09PSAwYFxuICAgICAgLy8gdGhlbiBgY2hhcmFjdGVycy5sZW5ndGggPT09IHRyZWUubGVuZ3RoYC5cblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXJ0aWFsTWF0Y2g6IHRydWUgLy8gbWF0Y2hlZENoYXJzOiBjaGFyYWN0ZXJzXG5cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGNoYXJhY3RlclN0cmluZy5pbmRleE9mKHRyZWUpID09PSAwKSB7XG4gICAgICBpZiAobGFzdCkge1xuICAgICAgICAvLyBUaGUgYGVsc2VgIHBhdGggaXMgbm90IHBvc3NpYmxlIGJlY2F1c2UgYHRyZWVgIGlzIGFsd2F5cyBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gICAgICAgIC8vIFRoZSBgZWxzZWAgY2FzZSBmb3IgYGNoYXJhY3RlcnMubGVuZ3RoID4gdHJlZS5sZW5ndGhgIHdvdWxkIGJlXG4gICAgICAgIC8vIGBjaGFyYWN0ZXJzLmxlbmd0aCA8PSB0cmVlLmxlbmd0aGAgd2hpY2ggbWVhbnMgYGNoYXJhY3RlcnMubGVuZ3RoIDw9IDFgLlxuICAgICAgICAvLyBgY2hhcmFjdGVyc2AgYXJyYXkgY2FuJ3QgYmUgZW1wdHksIHNvIHRoYXQgbWVhbnMgYGNoYXJhY3RlcnMgPT09IFt0cmVlXWAsXG4gICAgICAgIC8vIHdoaWNoIHdvdWxkIGFsc28gbWVhbiBgdHJlZS5pbmRleE9mKGNoYXJhY3RlclN0cmluZykgPT09IDBgIGFuZCB0aGF0J2QgbWVhblxuICAgICAgICAvLyB0aGF0IHRoZSBgaWYgKHRyZWUuaW5kZXhPZihjaGFyYWN0ZXJTdHJpbmcpID09PSAwKWAgY29uZGl0aW9uIGJlZm9yZSB0aGlzXG4gICAgICAgIC8vIGBpZmAgY29uZGl0aW9uIHdvdWxkIGJlIGVudGVyZWQsIGFuZCByZXR1cm5lZCBmcm9tIHRoZXJlLCBub3QgcmVhY2hpbmcgdGhpcyBjb2RlLlxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmIChjaGFyYWN0ZXJzLmxlbmd0aCA+IHRyZWUubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG92ZXJmbG93OiB0cnVlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBtYXRjaDogdHJ1ZSxcbiAgICAgICAgbWF0Y2hlZENoYXJzOiBjaGFyYWN0ZXJzLnNsaWNlKDAsIHRyZWUubGVuZ3RoKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgIHZhciByZXN0Q2hhcmFjdGVycyA9IGNoYXJhY3RlcnMuc2xpY2UoKTtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IHRyZWUubGVuZ3RoKSB7XG4gICAgICB2YXIgc3VidHJlZSA9IHRyZWVbaV07XG5cbiAgICAgIHZhciByZXN1bHQgPSBfbWF0Y2gocmVzdENoYXJhY3RlcnMsIHN1YnRyZWUsIGxhc3QgJiYgaSA9PT0gdHJlZS5sZW5ndGggLSAxKTtcblxuICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmIChyZXN1bHQub3ZlcmZsb3cpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gZWxzZSBpZiAocmVzdWx0Lm1hdGNoKSB7XG4gICAgICAgIC8vIENvbnRpbnVlIHdpdGggdGhlIG5leHQgc3VidHJlZSB3aXRoIHRoZSByZXN0IG9mIHRoZSBjaGFyYWN0ZXJzLlxuICAgICAgICByZXN0Q2hhcmFjdGVycyA9IHJlc3RDaGFyYWN0ZXJzLnNsaWNlKHJlc3VsdC5tYXRjaGVkQ2hhcnMubGVuZ3RoKTtcblxuICAgICAgICBpZiAocmVzdENoYXJhY3RlcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKGkgPT09IHRyZWUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbWF0Y2g6IHRydWUsXG4gICAgICAgICAgICAgIG1hdGNoZWRDaGFyczogY2hhcmFjdGVyc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgcGFydGlhbE1hdGNoOiB0cnVlIC8vIG1hdGNoZWRDaGFyczogY2hhcmFjdGVyc1xuXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgaWYgKHJlc3VsdC5wYXJ0aWFsTWF0Y2gpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGFydGlhbE1hdGNoOiB0cnVlIC8vIG1hdGNoZWRDaGFyczogY2hhcmFjdGVyc1xuXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBtYXRjaCByZXN1bHQ6XFxuXCIuY29uY2F0KEpTT04uc3RyaW5naWZ5KHJlc3VsdCwgbnVsbCwgMikpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpKys7XG4gICAgfSAvLyBJZiBgbGFzdGAgdGhlbiBvdmVyZmxvdyBoYXMgYWxyZWFkeSBiZWVuIGNoZWNrZWRcbiAgICAvLyBieSB0aGUgbGFzdCBlbGVtZW50IG9mIHRoZSBgdHJlZWAgYXJyYXkuXG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuXG4gICAgaWYgKGxhc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG92ZXJmbG93OiB0cnVlXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBtYXRjaDogdHJ1ZSxcbiAgICAgIG1hdGNoZWRDaGFyczogY2hhcmFjdGVycy5zbGljZSgwLCBjaGFyYWN0ZXJzLmxlbmd0aCAtIHJlc3RDaGFyYWN0ZXJzLmxlbmd0aClcbiAgICB9O1xuICB9XG5cbiAgc3dpdGNoICh0cmVlLm9wKSB7XG4gICAgY2FzZSAnfCc6XG4gICAgICB2YXIgcGFydGlhbE1hdGNoO1xuXG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHRyZWUuYXJncyksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBicmFuY2ggPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICB2YXIgX3Jlc3VsdCA9IF9tYXRjaChjaGFyYWN0ZXJzLCBicmFuY2gsIGxhc3QpO1xuXG4gICAgICAgIGlmIChfcmVzdWx0KSB7XG4gICAgICAgICAgaWYgKF9yZXN1bHQub3ZlcmZsb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBfcmVzdWx0O1xuICAgICAgICAgIH0gZWxzZSBpZiAoX3Jlc3VsdC5tYXRjaCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgbWF0Y2g6IHRydWUsXG4gICAgICAgICAgICAgIG1hdGNoZWRDaGFyczogX3Jlc3VsdC5tYXRjaGVkQ2hhcnNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgICAgICBpZiAoX3Jlc3VsdC5wYXJ0aWFsTWF0Y2gpIHtcbiAgICAgICAgICAgICAgcGFydGlhbE1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIG1hdGNoIHJlc3VsdDpcXG5cIi5jb25jYXQoSlNPTi5zdHJpbmdpZnkoX3Jlc3VsdCwgbnVsbCwgMikpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHBhcnRpYWxNYXRjaCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBhcnRpYWxNYXRjaDogdHJ1ZSAvLyBtYXRjaGVkQ2hhcnM6IC4uLlxuXG4gICAgICAgIH07XG4gICAgICB9IC8vIE5vdCBldmVuIGEgcGFydGlhbCBtYXRjaC5cblxuXG4gICAgICByZXR1cm47XG5cbiAgICBjYXNlICdbXSc6XG4gICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZSh0cmVlLmFyZ3MpLCBfc3RlcDI7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMigpKS5kb25lOykge1xuICAgICAgICB2YXIgX2NoYXIgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgaWYgKGNoYXJhY3RlcnNbMF0gPT09IF9jaGFyKSB7XG4gICAgICAgICAgaWYgKGNoYXJhY3RlcnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBtYXRjaDogdHJ1ZSxcbiAgICAgICAgICAgICAgbWF0Y2hlZENoYXJzOiBjaGFyYWN0ZXJzXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICBvdmVyZmxvdzogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWF0Y2g6IHRydWUsXG4gICAgICAgICAgICBtYXRjaGVkQ2hhcnM6IFtfY2hhcl1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9IC8vIE5vIGNoYXJhY3RlciBtYXRjaGVzLlxuXG5cbiAgICAgIHJldHVybjtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgaW5zdHJ1Y3Rpb24gdHJlZTogXCIuY29uY2F0KHRyZWUpKTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNZb3VUeXBlRm9ybWF0dGVyLlBhdHRlcm5NYXRjaGVyLmpzLm1hcCIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIFBhdHRlcm5QYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBQYXR0ZXJuUGFyc2VyKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXR0ZXJuUGFyc2VyKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQYXR0ZXJuUGFyc2VyLCBbe1xuICAgIGtleTogXCJwYXJzZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXJzZShwYXR0ZXJuKSB7XG4gICAgICB0aGlzLmNvbnRleHQgPSBbe1xuICAgICAgICBvcjogdHJ1ZSxcbiAgICAgICAgaW5zdHJ1Y3Rpb25zOiBbXVxuICAgICAgfV07XG4gICAgICB0aGlzLnBhcnNlUGF0dGVybihwYXR0ZXJuKTtcblxuICAgICAgaWYgKHRoaXMuY29udGV4dC5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb24tZmluYWxpemVkIGNvbnRleHRzIGxlZnQgd2hlbiBwYXR0ZXJuIHBhcnNlIGVuZGVkJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfdGhpcyRjb250ZXh0JCA9IHRoaXMuY29udGV4dFswXSxcbiAgICAgICAgICBicmFuY2hlcyA9IF90aGlzJGNvbnRleHQkLmJyYW5jaGVzLFxuICAgICAgICAgIGluc3RydWN0aW9ucyA9IF90aGlzJGNvbnRleHQkLmluc3RydWN0aW9ucztcblxuICAgICAgaWYgKGJyYW5jaGVzKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgb3A6ICd8JyxcbiAgICAgICAgICBhcmdzOiBicmFuY2hlcy5jb25jYXQoW2V4cGFuZFNpbmdsZUVsZW1lbnRBcnJheShpbnN0cnVjdGlvbnMpXSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG5cbiAgICAgIGlmIChpbnN0cnVjdGlvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUGF0dGVybiBpcyByZXF1aXJlZCcpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdHJ1Y3Rpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gaW5zdHJ1Y3Rpb25zWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdHJ1Y3Rpb25zO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRDb250ZXh0KGNvbnRleHQpIHtcbiAgICAgIHRoaXMuY29udGV4dC5wdXNoKGNvbnRleHQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJlbmRDb250ZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuZENvbnRleHQoKSB7XG4gICAgICB0aGlzLmNvbnRleHQucG9wKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldENvbnRleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29udGV4dCgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbdGhpcy5jb250ZXh0Lmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwYXJzZVBhdHRlcm5cIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VQYXR0ZXJuKHBhdHRlcm4pIHtcbiAgICAgIGlmICghcGF0dGVybikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhdHRlcm4gaXMgcmVxdWlyZWQnKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1hdGNoID0gcGF0dGVybi5tYXRjaChPUEVSQVRPUik7XG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgaWYgKElMTEVHQUxfQ0hBUkFDVEVSX1JFR0VYUC50ZXN0KHBhdHRlcm4pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBjaGFyYWN0ZXJzIGZvdW5kIGluIGEgcGF0dGVybjogXCIuY29uY2F0KHBhdHRlcm4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2V0Q29udGV4dCgpLmluc3RydWN0aW9ucyA9IHRoaXMuZ2V0Q29udGV4dCgpLmluc3RydWN0aW9ucy5jb25jYXQocGF0dGVybi5zcGxpdCgnJykpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBvcGVyYXRvciA9IG1hdGNoWzFdO1xuICAgICAgdmFyIGJlZm9yZSA9IHBhdHRlcm4uc2xpY2UoMCwgbWF0Y2guaW5kZXgpO1xuICAgICAgdmFyIHJpZ2h0UGFydCA9IHBhdHRlcm4uc2xpY2UobWF0Y2guaW5kZXggKyBvcGVyYXRvci5sZW5ndGgpO1xuXG4gICAgICBzd2l0Y2ggKG9wZXJhdG9yKSB7XG4gICAgICAgIGNhc2UgJyg/Oic6XG4gICAgICAgICAgaWYgKGJlZm9yZSkge1xuICAgICAgICAgICAgdGhpcy5wYXJzZVBhdHRlcm4oYmVmb3JlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLnN0YXJ0Q29udGV4dCh7XG4gICAgICAgICAgICBvcjogdHJ1ZSxcbiAgICAgICAgICAgIGluc3RydWN0aW9uczogW10sXG4gICAgICAgICAgICBicmFuY2hlczogW11cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICcpJzpcbiAgICAgICAgICBpZiAoIXRoaXMuZ2V0Q29udGV4dCgpLm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiKVwiIG9wZXJhdG9yIG11c3QgYmUgcHJlY2VkZWQgYnkgXCIoPzpcIiBvcGVyYXRvcicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgICAgIHRoaXMucGFyc2VQYXR0ZXJuKGJlZm9yZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuZ2V0Q29udGV4dCgpLmluc3RydWN0aW9ucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gaW5zdHJ1Y3Rpb25zIGZvdW5kIGFmdGVyIFwifFwiIG9wZXJhdG9yIGluIGFuIFwib3JcIiBncm91cCcpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfdGhpcyRnZXRDb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0KCksXG4gICAgICAgICAgICAgIGJyYW5jaGVzID0gX3RoaXMkZ2V0Q29udGV4dC5icmFuY2hlcztcblxuICAgICAgICAgIGJyYW5jaGVzLnB1c2goZXhwYW5kU2luZ2xlRWxlbWVudEFycmF5KHRoaXMuZ2V0Q29udGV4dCgpLmluc3RydWN0aW9ucykpO1xuICAgICAgICAgIHRoaXMuZW5kQ29udGV4dCgpO1xuICAgICAgICAgIHRoaXMuZ2V0Q29udGV4dCgpLmluc3RydWN0aW9ucy5wdXNoKHtcbiAgICAgICAgICAgIG9wOiAnfCcsXG4gICAgICAgICAgICBhcmdzOiBicmFuY2hlc1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICAgIGlmICghdGhpcy5nZXRDb250ZXh0KCkub3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJ8XCIgb3BlcmF0b3IgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgXCJvclwiIGdyb3VwcycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgICAgIHRoaXMucGFyc2VQYXR0ZXJuKGJlZm9yZSk7XG4gICAgICAgICAgfSAvLyBUaGUgdG9wLWxldmVsIGlzIGFuIGltcGxpY2l0IFwib3JcIiBncm91cCwgaWYgcmVxdWlyZWQuXG5cblxuICAgICAgICAgIGlmICghdGhpcy5nZXRDb250ZXh0KCkuYnJhbmNoZXMpIHtcbiAgICAgICAgICAgIC8vIGBicmFuY2hlc2AgYXJlIG5vdCBkZWZpbmVkIG9ubHkgZm9yIHRoZSByb290IGltcGxpY2l0IFwib3JcIiBvcGVyYXRvci5cblxuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRleHQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgIHRoaXMuZ2V0Q29udGV4dCgpLmJyYW5jaGVzID0gW107XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiYnJhbmNoZXNcIiBub3QgZm91bmQgaW4gYW4gXCJvclwiIGdyb3VwIGNvbnRleHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmdldENvbnRleHQoKS5icmFuY2hlcy5wdXNoKGV4cGFuZFNpbmdsZUVsZW1lbnRBcnJheSh0aGlzLmdldENvbnRleHQoKS5pbnN0cnVjdGlvbnMpKTtcbiAgICAgICAgICB0aGlzLmdldENvbnRleHQoKS5pbnN0cnVjdGlvbnMgPSBbXTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICBpZiAoYmVmb3JlKSB7XG4gICAgICAgICAgICB0aGlzLnBhcnNlUGF0dGVybihiZWZvcmUpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuc3RhcnRDb250ZXh0KHtcbiAgICAgICAgICAgIG9uZU9mU2V0OiB0cnVlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgaWYgKCF0aGlzLmdldENvbnRleHQoKS5vbmVPZlNldCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIl1cIiBvcGVyYXRvciBtdXN0IGJlIHByZWNlZGVkIGJ5IFwiW1wiIG9wZXJhdG9yJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5lbmRDb250ZXh0KCk7XG4gICAgICAgICAgdGhpcy5nZXRDb250ZXh0KCkuaW5zdHJ1Y3Rpb25zLnB1c2goe1xuICAgICAgICAgICAgb3A6ICdbXScsXG4gICAgICAgICAgICBhcmdzOiBwYXJzZU9uZU9mU2V0KGJlZm9yZSlcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBvcGVyYXRvcjogXCIuY29uY2F0KG9wZXJhdG9yKSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyaWdodFBhcnQpIHtcbiAgICAgICAgdGhpcy5wYXJzZVBhdHRlcm4ocmlnaHRQYXJ0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGF0dGVyblBhcnNlcjtcbn0oKTtcblxuZXhwb3J0IHsgUGF0dGVyblBhcnNlciBhcyBkZWZhdWx0IH07XG5cbmZ1bmN0aW9uIHBhcnNlT25lT2ZTZXQocGF0dGVybikge1xuICB2YXIgdmFsdWVzID0gW107XG4gIHZhciBpID0gMDtcblxuICB3aGlsZSAoaSA8IHBhdHRlcm4ubGVuZ3RoKSB7XG4gICAgaWYgKHBhdHRlcm5baV0gPT09ICctJykge1xuICAgICAgaWYgKGkgPT09IDAgfHwgaSA9PT0gcGF0dGVybi5sZW5ndGggLSAxKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IHBhcnNlIGEgb25lLW9mIHNldCBwYXR0ZXJuOiBcIi5jb25jYXQocGF0dGVybikpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldlZhbHVlID0gcGF0dGVybltpIC0gMV0uY2hhckNvZGVBdCgwKSArIDE7XG4gICAgICB2YXIgbmV4dFZhbHVlID0gcGF0dGVybltpICsgMV0uY2hhckNvZGVBdCgwKSAtIDE7XG4gICAgICB2YXIgdmFsdWUgPSBwcmV2VmFsdWU7XG5cbiAgICAgIHdoaWxlICh2YWx1ZSA8PSBuZXh0VmFsdWUpIHtcbiAgICAgICAgdmFsdWVzLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSkpO1xuICAgICAgICB2YWx1ZSsrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZXMucHVzaChwYXR0ZXJuW2ldKTtcbiAgICB9XG5cbiAgICBpKys7XG4gIH1cblxuICByZXR1cm4gdmFsdWVzO1xufVxuXG52YXIgSUxMRUdBTF9DSEFSQUNURVJfUkVHRVhQID0gL1tcXChcXClcXFtcXF1cXD9cXDpcXHxdLztcbnZhciBPUEVSQVRPUiA9IG5ldyBSZWdFeHAoIC8vIGFueSBvZjpcbicoJyArIC8vIG9yIG9wZXJhdG9yXG4nXFxcXHwnICsgLy8gb3Jcbid8JyArIC8vIG9yIGdyb3VwIHN0YXJ0XG4nXFxcXChcXFxcP1xcXFw6JyArIC8vIG9yXG4nfCcgKyAvLyBvciBncm91cCBlbmRcbidcXFxcKScgKyAvLyBvclxuJ3wnICsgLy8gb25lLW9mIHNldCBzdGFydFxuJ1xcXFxbJyArIC8vIG9yXG4nfCcgKyAvLyBvbmUtb2Ygc2V0IGVuZFxuJ1xcXFxdJyArICcpJyk7XG5cbmZ1bmN0aW9uIGV4cGFuZFNpbmdsZUVsZW1lbnRBcnJheShhcnJheSkge1xuICBpZiAoYXJyYXkubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGFycmF5WzBdO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNZb3VUeXBlRm9ybWF0dGVyLlBhdHRlcm5QYXJzZXIuanMubWFwIiwiaW1wb3J0IGNoZWNrTnVtYmVyTGVuZ3RoIGZyb20gJy4vaGVscGVycy9jaGVja051bWJlckxlbmd0aC5qcyc7XG5pbXBvcnQgcGFyc2VEaWdpdHMgZnJvbSAnLi9oZWxwZXJzL3BhcnNlRGlnaXRzLmpzJztcbmltcG9ydCBmb3JtYXROYXRpb25hbE51bWJlclVzaW5nRm9ybWF0IGZyb20gJy4vaGVscGVycy9mb3JtYXROYXRpb25hbE51bWJlclVzaW5nRm9ybWF0LmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdENvbXBsZXRlTnVtYmVyKHN0YXRlLCBmb3JtYXQsIF9yZWYpIHtcbiAgdmFyIG1ldGFkYXRhID0gX3JlZi5tZXRhZGF0YSxcbiAgICAgIHNob3VsZFRyeU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUgPSBfcmVmLnNob3VsZFRyeU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUsXG4gICAgICBnZXRTZXBhcmF0b3JBZnRlck5hdGlvbmFsUHJlZml4ID0gX3JlZi5nZXRTZXBhcmF0b3JBZnRlck5hdGlvbmFsUHJlZml4O1xuICB2YXIgbWF0Y2hlciA9IG5ldyBSZWdFeHAoXCJeKD86XCIuY29uY2F0KGZvcm1hdC5wYXR0ZXJuKCksIFwiKSRcIikpO1xuXG4gIGlmIChtYXRjaGVyLnRlc3Qoc3RhdGUubmF0aW9uYWxTaWduaWZpY2FudE51bWJlcikpIHtcbiAgICByZXR1cm4gZm9ybWF0TmF0aW9uYWxOdW1iZXJXaXRoQW5kV2l0aG91dE5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoc3RhdGUsIGZvcm1hdCwge1xuICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhLFxuICAgICAgc2hvdWxkVHJ5TmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZTogc2hvdWxkVHJ5TmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSxcbiAgICAgIGdldFNlcGFyYXRvckFmdGVyTmF0aW9uYWxQcmVmaXg6IGdldFNlcGFyYXRvckFmdGVyTmF0aW9uYWxQcmVmaXhcbiAgICB9KTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNhbkZvcm1hdENvbXBsZXRlTnVtYmVyKG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIsIG1ldGFkYXRhKSB7XG4gIHJldHVybiBjaGVja051bWJlckxlbmd0aChuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyLCBtZXRhZGF0YSkgPT09ICdJU19QT1NTSUJMRSc7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE5hdGlvbmFsTnVtYmVyV2l0aEFuZFdpdGhvdXROYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlKHN0YXRlLCBmb3JtYXQsIF9yZWYyKSB7XG4gIHZhciBtZXRhZGF0YSA9IF9yZWYyLm1ldGFkYXRhLFxuICAgICAgc2hvdWxkVHJ5TmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSA9IF9yZWYyLnNob3VsZFRyeU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUsXG4gICAgICBnZXRTZXBhcmF0b3JBZnRlck5hdGlvbmFsUHJlZml4ID0gX3JlZjIuZ2V0U2VwYXJhdG9yQWZ0ZXJOYXRpb25hbFByZWZpeDtcbiAgLy8gYGZvcm1hdGAgaGFzIGFscmVhZHkgYmVlbiBjaGVja2VkIGZvciBgbmF0aW9uYWxQcmVmaXhgIHJlcXVpcmVtZW50LlxuICB2YXIgbmF0aW9uYWxTaWduaWZpY2FudE51bWJlciA9IHN0YXRlLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIsXG4gICAgICBpbnRlcm5hdGlvbmFsID0gc3RhdGUuaW50ZXJuYXRpb25hbCxcbiAgICAgIG5hdGlvbmFsUHJlZml4ID0gc3RhdGUubmF0aW9uYWxQcmVmaXgsXG4gICAgICBjYXJyaWVyQ29kZSA9IHN0YXRlLmNhcnJpZXJDb2RlOyAvLyBGb3JtYXQgdGhlIG51bWJlciB3aXRoIHVzaW5nIGBuYXRpb25hbF9wcmVmaXhfZm9ybWF0dGluZ19ydWxlYC5cbiAgLy8gSWYgdGhlIHJlc3VsdGluZyBmb3JtYXR0ZWQgbnVtYmVyIGlzIGEgdmFsaWQgZm9ybWF0dGVkIG51bWJlciwgdGhlbiByZXR1cm4gaXQuXG4gIC8vXG4gIC8vIEdvb2dsZSdzIEFzWW91VHlwZSBmb3JtYXR0ZXIgaXMgZGlmZmVyZW50IGluIGEgd2F5IHRoYXQgaXQgZG9lc24ndCB0cnlcbiAgLy8gdG8gZm9ybWF0IHVzaW5nIHRoZSBcIm5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGVcIiwgYW5kIGluc3RlYWQgaXRcbiAgLy8gc2ltcGx5IHByZXBlbmRzIGEgbmF0aW9uYWwgcHJlZml4IGZvbGxvd2VkIGJ5IGEgXCIgXCIgY2hhcmFjdGVyLlxuICAvLyBUaGlzIGNvZGUgZG9lcyB0aGF0IHRvbywgYnV0IGFzIGEgZmFsbGJhY2suXG4gIC8vIFRoZSByZWFzb24gaXMgdGhhdCBcIm5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGVcIiBtYXkgdXNlIHBhcmVudGhlc2VzLFxuICAvLyB3aGljaCB3b3VsZG4ndCBiZSBpbmNsdWRlZCBoYXMgaXQgdXNlZCB0aGUgc2ltcGxlciBHb29nbGUncyB3YXkuXG4gIC8vXG5cbiAgaWYgKHNob3VsZFRyeU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoZm9ybWF0KSkge1xuICAgIHZhciBmb3JtYXR0ZWROdW1iZXIgPSBmb3JtYXROYXRpb25hbE51bWJlcihzdGF0ZSwgZm9ybWF0LCB7XG4gICAgICB1c2VOYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlOiB0cnVlLFxuICAgICAgZ2V0U2VwYXJhdG9yQWZ0ZXJOYXRpb25hbFByZWZpeDogZ2V0U2VwYXJhdG9yQWZ0ZXJOYXRpb25hbFByZWZpeCxcbiAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YVxuICAgIH0pO1xuXG4gICAgaWYgKGZvcm1hdHRlZE51bWJlcikge1xuICAgICAgcmV0dXJuIGZvcm1hdHRlZE51bWJlcjtcbiAgICB9XG4gIH0gLy8gRm9ybWF0IHRoZSBudW1iZXIgd2l0aG91dCB1c2luZyBgbmF0aW9uYWxfcHJlZml4X2Zvcm1hdHRpbmdfcnVsZWAuXG5cblxuICByZXR1cm4gZm9ybWF0TmF0aW9uYWxOdW1iZXIoc3RhdGUsIGZvcm1hdCwge1xuICAgIHVzZU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGU6IGZhbHNlLFxuICAgIGdldFNlcGFyYXRvckFmdGVyTmF0aW9uYWxQcmVmaXg6IGdldFNlcGFyYXRvckFmdGVyTmF0aW9uYWxQcmVmaXgsXG4gICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBmb3JtYXROYXRpb25hbE51bWJlcihzdGF0ZSwgZm9ybWF0LCBfcmVmMykge1xuICB2YXIgbWV0YWRhdGEgPSBfcmVmMy5tZXRhZGF0YSxcbiAgICAgIHVzZU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUgPSBfcmVmMy51c2VOYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlLFxuICAgICAgZ2V0U2VwYXJhdG9yQWZ0ZXJOYXRpb25hbFByZWZpeCA9IF9yZWYzLmdldFNlcGFyYXRvckFmdGVyTmF0aW9uYWxQcmVmaXg7XG4gIHZhciBmb3JtYXR0ZWROYXRpb25hbE51bWJlciA9IGZvcm1hdE5hdGlvbmFsTnVtYmVyVXNpbmdGb3JtYXQoc3RhdGUubmF0aW9uYWxTaWduaWZpY2FudE51bWJlciwgZm9ybWF0LCB7XG4gICAgY2FycmllckNvZGU6IHN0YXRlLmNhcnJpZXJDb2RlLFxuICAgIHVzZUludGVybmF0aW9uYWxGb3JtYXQ6IHN0YXRlLmludGVybmF0aW9uYWwsXG4gICAgd2l0aE5hdGlvbmFsUHJlZml4OiB1c2VOYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlLFxuICAgIG1ldGFkYXRhOiBtZXRhZGF0YVxuICB9KTtcblxuICBpZiAoIXVzZU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUpIHtcbiAgICBpZiAoc3RhdGUubmF0aW9uYWxQcmVmaXgpIHtcbiAgICAgIC8vIElmIGEgbmF0aW9uYWwgcHJlZml4IHdhcyBleHRyYWN0ZWQsIHRoZW4ganVzdCBwcmVwZW5kIGl0LFxuICAgICAgLy8gZm9sbG93ZWQgYnkgYSBcIiBcIiBjaGFyYWN0ZXIuXG4gICAgICBmb3JtYXR0ZWROYXRpb25hbE51bWJlciA9IHN0YXRlLm5hdGlvbmFsUHJlZml4ICsgZ2V0U2VwYXJhdG9yQWZ0ZXJOYXRpb25hbFByZWZpeChmb3JtYXQpICsgZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXI7XG4gICAgfSBlbHNlIGlmIChzdGF0ZS5jb21wbGV4UHJlZml4QmVmb3JlTmF0aW9uYWxTaWduaWZpY2FudE51bWJlcikge1xuICAgICAgZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIgPSBzdGF0ZS5jb21wbGV4UHJlZml4QmVmb3JlTmF0aW9uYWxTaWduaWZpY2FudE51bWJlciArICcgJyArIGZvcm1hdHRlZE5hdGlvbmFsTnVtYmVyO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc1ZhbGlkRm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIoZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIsIHN0YXRlKSkge1xuICAgIHJldHVybiBmb3JtYXR0ZWROYXRpb25hbE51bWJlcjtcbiAgfVxufSAvLyBDaGVjayB0aGF0IHRoZSBmb3JtYXR0ZWQgcGhvbmUgbnVtYmVyIGNvbnRhaW5zIGV4YWN0bHlcbi8vIHRoZSBzYW1lIGRpZ2l0cyB0aGF0IGhhdmUgYmVlbiBpbnB1dCBieSB0aGUgdXNlci5cbi8vIEZvciBleGFtcGxlLCB3aGVuIFwiMDExMTUyMzQ1Njc4OVwiIGlzIGlucHV0IGZvciBgQVJgIGNvdW50cnksXG4vLyB0aGUgZXh0cmFjdGVkIGB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJgIGlzIFwiOTExMjM0NTY3ODlcIixcbi8vIHdoaWNoIG1lYW5zIHRoYXQgdGhlIG5hdGlvbmFsIHBhcnQgb2YgYHRoaXMuZGlnaXRzYCBpc24ndCBzaW1wbHkgZXF1YWwgdG9cbi8vIGB0aGlzLm5hdGlvbmFsUHJlZml4YCArIGB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJgLlxuLy9cbi8vIEFsc28sIGEgYGZvcm1hdGAgY2FuIGFkZCBleHRyYSBkaWdpdHMgdG8gdGhlIGB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJgXG4vLyBiZWluZyBmb3JtYXR0ZWQgdmlhIGBtZXRhZGF0YVtjb3VudHJ5XS5uYXRpb25hbF9wcmVmaXhfdHJhbnNmb3JtX3J1bGVgLlxuLy8gRm9yIGV4YW1wbGUsIGZvciBgVklgIGNvdW50cnksIGl0IHByZXBlbmRzIGAzNDBgIHRvIHRoZSBuYXRpb25hbCBudW1iZXIsXG4vLyBhbmQgaWYgdGhpcyBjaGVjayBoYXNuJ3QgYmVlbiBpbXBsZW1lbnRlZCwgdGhlbiB0aGVyZSB3b3VsZCBiZSBhIGJ1Z1xuLy8gd2hlbiBgMzQwYCBcImFyZWEgY291ZGVcIiBpcyBcImR1cGxpY2F0ZWRcIiBkdXJpbmcgaW5wdXQgZm9yIGBWSWAgY291bnRyeTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRhbXBoZXRhbWluZS9saWJwaG9uZW51bWJlci1qcy9pc3N1ZXMvMzE4XG4vL1xuLy8gU28sIGFsbCB0aGVzZSBcImdvdGNoYXNcIiBhcmUgZmlsdGVyZWQgb3V0LlxuLy9cbi8vIEluIHRoZSBvcmlnaW5hbCBHb29nbGUncyBjb2RlLCB0aGUgY29tbWVudHMgc2F5OlxuLy8gXCJDaGVjayB0aGF0IHdlIGRpZG4ndCByZW1vdmUgbm9yIGFkZCBhbnkgZXh0cmEgZGlnaXRzIHdoZW4gd2UgbWF0Y2hlZFxuLy8gdGhpcyBmb3JtYXR0aW5nIHBhdHRlcm4uIFRoaXMgdXN1YWxseSBoYXBwZW5zIGFmdGVyIHdlIGVudGVyZWQgdGhlIGxhc3Rcbi8vIGRpZ2l0IGR1cmluZyBBWVRGLiBFZzogSW4gY2FzZSBvZiBNWCwgd2Ugc3dhbGxvdyBtb2JpbGUgdG9rZW4gKDEpIHdoZW5cbi8vIGZvcm1hdHRlZCBidXQgQVlURiBzaG91bGQgcmV0YWluIGFsbCB0aGUgbnVtYmVyIGVudGVyZWQgYW5kIG5vdCBjaGFuZ2Vcbi8vIGluIG9yZGVyIHRvIG1hdGNoIGEgZm9ybWF0IChvZiBzYW1lIGxlYWRpbmcgZGlnaXRzIGFuZCBsZW5ndGgpIGRpc3BsYXlcbi8vIGluIHRoYXQgd2F5LlwiXG4vLyBcIklmIGl0J3MgdGhlIHNhbWUgKGkuZSBlbnRlcmVkIG51bWJlciBhbmQgZm9ybWF0IGlzIHNhbWUpLCB0aGVuIGl0J3Ncbi8vIHNhZmUgdG8gcmV0dXJuIHRoaXMgaW4gZm9ybWF0dGVkIG51bWJlciBhcyBub3RoaW5nIGlzIGxvc3QgLyBhZGRlZC5cIlxuLy8gT3RoZXJ3aXNlLCBkb24ndCB1c2UgdGhpcyBmb3JtYXQuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2xpYnBob25lbnVtYmVyL2NvbW1pdC8zZTdjMWYwNGY1ZTcyMDBmODdmYjEzMWU2Zjg1YzZlOTlkNjBmNTEwI2RpZmYtOTE0OTQ1N2ZhOWY1ZDYwOGExMWJiOTc1YzZlZjRiYzVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvbGlicGhvbmVudW1iZXIvY29tbWl0LzNhYzg4YzcxMDZlN2RjYjU1M2JjYzc5NGIxNWYxOTE4NTkyOGExYzYjZGlmZi0yZGNiNzdlODMzNDIyZWUzMDRkYTM0OGI5MDVjZGUwYlxuLy9cblxuXG5mdW5jdGlvbiBpc1ZhbGlkRm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIoZm9ybWF0dGVkTmF0aW9uYWxOdW1iZXIsIHN0YXRlKSB7XG4gIHJldHVybiBwYXJzZURpZ2l0cyhmb3JtYXR0ZWROYXRpb25hbE51bWJlcikgPT09IHN0YXRlLmdldE5hdGlvbmFsRGlnaXRzKCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc1lvdVR5cGVGb3JtYXR0ZXIuY29tcGxldGUuanMubWFwIiwiZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyByZXR1cm4gZnVuY3Rpb24gKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IHsgRElHSVRfUExBQ0VIT0xERVIsIGNvdW50T2NjdXJlbmNlcywgcmVwZWF0LCBjdXRBbmRTdHJpcE5vblBhaXJlZFBhcmVucywgY2xvc2VOb25QYWlyZWRQYXJlbnMsIHN0cmlwTm9uUGFpcmVkUGFyZW5zLCBwb3B1bGF0ZVRlbXBsYXRlV2l0aERpZ2l0cyB9IGZyb20gJy4vQXNZb3VUeXBlRm9ybWF0dGVyLnV0aWwuanMnO1xuaW1wb3J0IGZvcm1hdENvbXBsZXRlTnVtYmVyLCB7IGNhbkZvcm1hdENvbXBsZXRlTnVtYmVyIH0gZnJvbSAnLi9Bc1lvdVR5cGVGb3JtYXR0ZXIuY29tcGxldGUuanMnO1xuaW1wb3J0IFBhdHRlcm5NYXRjaGVyIGZyb20gJy4vQXNZb3VUeXBlRm9ybWF0dGVyLlBhdHRlcm5NYXRjaGVyLmpzJztcbmltcG9ydCBwYXJzZURpZ2l0cyBmcm9tICcuL2hlbHBlcnMvcGFyc2VEaWdpdHMuanMnO1xuZXhwb3J0IHsgRElHSVRfUExBQ0VIT0xERVIgfSBmcm9tICcuL0FzWW91VHlwZUZvcm1hdHRlci51dGlsLmpzJztcbmltcG9ydCB7IEZJUlNUX0dST1VQX1BBVFRFUk4gfSBmcm9tICcuL2hlbHBlcnMvZm9ybWF0TmF0aW9uYWxOdW1iZXJVc2luZ0Zvcm1hdC5qcyc7XG5pbXBvcnQgeyBWQUxJRF9QVU5DVFVBVElPTiB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCBhcHBseUludGVybmF0aW9uYWxTZXBhcmF0b3JTdHlsZSBmcm9tICcuL2hlbHBlcnMvYXBwbHlJbnRlcm5hdGlvbmFsU2VwYXJhdG9yU3R5bGUuanMnOyAvLyBVc2VkIGluIHBob25lIG51bWJlciBmb3JtYXQgdGVtcGxhdGUgY3JlYXRpb24uXG4vLyBDb3VsZCBiZSBhbnkgZGlnaXQsIEkgZ3Vlc3MuXG5cbnZhciBEVU1NWV9ESUdJVCA9ICc5JzsgLy8gSSBkb24ndCBrbm93IHdoeSBpcyBpdCBleGFjdGx5IGAxNWBcblxudmFyIExPTkdFU1RfTkFUSU9OQUxfUEhPTkVfTlVNQkVSX0xFTkdUSCA9IDE1OyAvLyBDcmVhdGUgYSBwaG9uZSBudW1iZXIgY29uc2lzdGluZyBvbmx5IG9mIHRoZSBkaWdpdCA5IHRoYXQgbWF0Y2hlcyB0aGVcbi8vIGBudW1iZXJfcGF0dGVybmAgYnkgYXBwbHlpbmcgdGhlIHBhdHRlcm4gdG8gdGhlIFwibG9uZ2VzdCBwaG9uZSBudW1iZXJcIiBzdHJpbmcuXG5cbnZhciBMT05HRVNUX0RVTU1ZX1BIT05FX05VTUJFUiA9IHJlcGVhdChEVU1NWV9ESUdJVCwgTE9OR0VTVF9OQVRJT05BTF9QSE9ORV9OVU1CRVJfTEVOR1RIKTsgLy8gQSBzZXQgb2YgY2hhcmFjdGVycyB0aGF0LCBpZiBmb3VuZCBpbiBhIG5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGVzLCBhcmUgYW4gaW5kaWNhdG9yIHRvXG4vLyB1cyB0aGF0IHdlIHNob3VsZCBzZXBhcmF0ZSB0aGUgbmF0aW9uYWwgcHJlZml4IGZyb20gdGhlIG51bWJlciB3aGVuIGZvcm1hdHRpbmcuXG5cbnZhciBOQVRJT05BTF9QUkVGSVhfU0VQQVJBVE9SU19QQVRURVJOID0gL1stIF0vOyAvLyBEZXByZWNhdGVkOiBHb29nbGUgaGFzIHJlbW92ZWQgc29tZSBmb3JtYXR0aW5nIHBhdHRlcm4gcmVsYXRlZCBjb2RlIGZyb20gdGhlaXIgcmVwby5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVpMThuL2xpYnBob25lbnVtYmVyL2NvbW1pdC9hMzk1YjRmZWYzY2FmNTdjNGJjNWYwODJlMTE1MmE0ZDJiZDBiYTRjXG4vLyBcIldlIG5vIGxvbmdlciBoYXZlIG51bWJlcnMgaW4gZm9ybWF0dGluZyBtYXRjaGluZyBwYXR0ZXJucywgb25seSBcXGQuXCJcbi8vIEJlY2F1c2UgdGhpcyBsaWJyYXJ5IHN1cHBvcnRzIGdlbmVyYXRpbmcgY3VzdG9tIG1ldGFkYXRhXG4vLyBzb21lIHVzZXJzIG1heSBzdGlsbCBiZSB1c2luZyBvbGQgbWV0YWRhdGEgc28gdGhlIHJlbGV2YW50XG4vLyBjb2RlIHNlZW1zIHRvIHN0YXkgdW50aWwgc29tZSBuZXh0IG1ham9yIHZlcnNpb24gdXBkYXRlLlxuXG52YXIgU1VQUE9SVF9MRUdBQ1lfRk9STUFUVElOR19QQVRURVJOUyA9IHRydWU7IC8vIEEgcGF0dGVybiB0aGF0IGlzIHVzZWQgdG8gbWF0Y2ggY2hhcmFjdGVyIGNsYXNzZXMgaW4gcmVndWxhciBleHByZXNzaW9ucy5cbi8vIEFuIGV4YW1wbGUgb2YgYSBjaGFyYWN0ZXIgY2xhc3MgaXMgXCJbMS00XVwiLlxuXG52YXIgQ1JFQVRFX0NIQVJBQ1RFUl9DTEFTU19QQVRURVJOID0gU1VQUE9SVF9MRUdBQ1lfRk9STUFUVElOR19QQVRURVJOUyAmJiBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiAvXFxbKFteXFxbXFxdXSkqXFxdL2c7XG59OyAvLyBBbnkgZGlnaXQgaW4gYSByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBhY3R1YWxseSBkZW5vdGVzIGEgZGlnaXQuIEZvclxuLy8gZXhhbXBsZSwgaW4gdGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiBcIjgwWzAtMl1cXGR7NiwxMH1cIiwgdGhlIGZpcnN0IDIgZGlnaXRzXG4vLyAoOCBhbmQgMCkgYXJlIHN0YW5kYWxvbmUgZGlnaXRzLCBidXQgdGhlIHJlc3QgYXJlIG5vdC5cbi8vIFR3byBsb29rLWFoZWFkcyBhcmUgbmVlZGVkIGJlY2F1c2UgdGhlIG51bWJlciBmb2xsb3dpbmcgXFxcXGQgY291bGQgYmUgYVxuLy8gdHdvLWRpZ2l0IG51bWJlciwgc2luY2UgdGhlIHBob25lIG51bWJlciBjYW4gYmUgYXMgbG9uZyBhcyAxNSBkaWdpdHMuXG5cblxudmFyIENSRUFURV9TVEFOREFMT05FX0RJR0lUX1BBVFRFUk4gPSBTVVBQT1JUX0xFR0FDWV9GT1JNQVRUSU5HX1BBVFRFUk5TICYmIGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIC9cXGQoPz1bXix9XVteLH1dKS9nO1xufTsgLy8gQSByZWd1bGFyIGV4cHJlc3Npb24gdGhhdCBpcyB1c2VkIHRvIGRldGVybWluZSBpZiBhIGBmb3JtYXRgIGlzXG4vLyBzdWl0YWJsZSB0byBiZSB1c2VkIGluIHRoZSBcImFzIHlvdSB0eXBlIGZvcm1hdHRlclwiLlxuLy8gQSBgZm9ybWF0YCBpcyBzdWl0YWJsZSB3aGVuIHRoZSByZXN1bHRpbmcgZm9ybWF0dGVkIG51bWJlciBoYXNcbi8vIHRoZSBzYW1lIGRpZ2l0cyBhcyB0aGUgdXNlciBoYXMgZW50ZXJlZC5cbi8vXG4vLyBJbiB0aGUgc2ltcGxlc3QgY2FzZSwgdGhhdCB3b3VsZCBtZWFuIHRoYXQgdGhlIGZvcm1hdFxuLy8gZG9lc24ndCBhZGQgYW55IGFkZGl0aW9uYWwgZGlnaXRzIHdoZW4gZm9ybWF0dGluZyBhIG51bWJlci5cbi8vIEdvb2dsZSBzYXlzIHRoYXQgaXQgYWxzbyBzaG91bGRuJ3QgYWRkIFwic3RhclwiIChgKmApIGNoYXJhY3RlcnMsXG4vLyBsaWtlIGl0IGRvZXMgaW4gc29tZSBJc3JhZWxpIGZvcm1hdHMuXG4vLyBTdWNoIGJhc2ljIGZvcm1hdCB3b3VsZCBvbmx5IGNvbnRhaW4gXCJ2YWxpZCBwdW5jdHVhdGlvblwiXG4vLyBhbmQgXCJjYXB0dXJlZCBncm91cFwiIGlkZW50aWZpZXJzICgkMSwgJDIsIGV0YykuXG4vL1xuLy8gQW4gZXhhbXBsZSBvZiBhIGZvcm1hdCB0aGF0IGFkZHMgYWRkaXRpb25hbCBkaWdpdHM6XG4vL1xuLy8gQ291bnRyeTogYEFSYCAoQXJnZW50aW5hKS5cbi8vIEZvcm1hdDpcbi8vIHtcbi8vICAgIFwicGF0dGVyblwiOiBcIihcXFxcZCkoXFxcXGR7Mn0pKFxcXFxkezR9KShcXFxcZHs0fSlcIixcbi8vICAgIFwibGVhZGluZ19kaWdpdHNfcGF0dGVybnNcIjogW1wiOTFcIl0sXG4vLyAgICBcIm5hdGlvbmFsX3ByZWZpeF9mb3JtYXR0aW5nX3J1bGVcIjogXCIwJDFcIixcbi8vICAgIFwiZm9ybWF0XCI6IFwiJDIgMTUtJDMtJDRcIixcbi8vICAgIFwiaW50ZXJuYXRpb25hbF9mb3JtYXRcIjogXCIkMSAkMiAkMy0kNFwiXG4vLyB9XG4vL1xuLy8gSW4gdGhlIGZvcm1hdCBhYm92ZSwgdGhlIGBmb3JtYXRgIGFkZHMgYDE1YCB0byB0aGUgZGlnaXRzIHdoZW4gZm9ybWF0dGluZyBhIG51bWJlci5cbi8vIEEgc2lkZW5vdGU6IHRoaXMgZm9ybWF0IGFjdHVhbGx5IGlzIHN1aXRhYmxlIGJlY2F1c2UgYG5hdGlvbmFsX3ByZWZpeF9mb3JfcGFyc2luZ2Bcbi8vIGhhcyBwcmV2aW91c2x5IHJlbW92ZWQgYDE1YCBmcm9tIGEgbmF0aW9uYWwgbnVtYmVyLCBzbyByZS1hZGRpbmcgYDE1YCBpbiBgZm9ybWF0YFxuLy8gZG9lc24ndCBhY3R1YWxseSByZXN1bHQgaW4gYW55IGV4dHJhIGRpZ2l0cyBhZGRlZCB0byB1c2VyJ3MgaW5wdXQuXG4vLyBCdXQgdmVyaWZ5aW5nIHRoYXQgd291bGQgYmUgYSBjb21wbGV4IHByb2NlZHVyZSwgc28gdGhlIGNvZGUgY2hvb3NlcyBhIHNpbXBsZXIgcGF0aDpcbi8vIGl0IHNpbXBseSBmaWx0ZXJzIG91dCBhbGwgYGZvcm1hdGBzIHRoYXQgY29udGFpbiBhbnl0aGluZyBidXQgXCJjYXB0dXJlZCBncm91cFwiIGlkcy5cbi8vXG4vLyBUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBjYWxsZWQgYEVMSUdJQkxFX0ZPUk1BVF9QQVRURVJOYCBpbiBHb29nbGUnc1xuLy8gYGxpYnBob25lbnVtYmVyYCBjb2RlLlxuLy9cblxuXG52YXIgTk9OX0FMVEVSSU5HX0ZPUk1BVF9SRUdfRVhQID0gbmV3IFJlZ0V4cCgnWycgKyBWQUxJRF9QVU5DVFVBVElPTiArICddKicgKyAvLyBHb29nbGUgZGV2ZWxvcGVycyBzYXk6XG4vLyBcIldlIHJlcXVpcmUgdGhhdCB0aGUgZmlyc3QgbWF0Y2hpbmcgZ3JvdXAgaXMgcHJlc2VudCBpbiB0aGVcbi8vICBvdXRwdXQgcGF0dGVybiB0byBlbnN1cmUgbm8gZGF0YSBpcyBsb3N0IHdoaWxlIGZvcm1hdHRpbmcuXCJcbidcXFxcJDEnICsgJ1snICsgVkFMSURfUFVOQ1RVQVRJT04gKyAnXSonICsgJyhcXFxcJFxcXFxkWycgKyBWQUxJRF9QVU5DVFVBVElPTiArICddKikqJyArICckJyk7IC8vIFRoaXMgaXMgdGhlIG1pbmltdW0gbGVuZ3RoIG9mIHRoZSBsZWFkaW5nIGRpZ2l0cyBvZiBhIHBob25lIG51bWJlclxuLy8gdG8gZ3VhcmFudGVlIHRoZSBmaXJzdCBcImxlYWRpbmcgZGlnaXRzIHBhdHRlcm5cIiBmb3IgYSBwaG9uZSBudW1iZXIgZm9ybWF0XG4vLyB0byBiZSBwcmVlbXB0aXZlLlxuXG52YXIgTUlOX0xFQURJTkdfRElHSVRTX0xFTkdUSCA9IDM7XG5cbnZhciBBc1lvdVR5cGVGb3JtYXR0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBBc1lvdVR5cGVGb3JtYXR0ZXIoX3JlZikge1xuICAgIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICAgIG1ldGFkYXRhID0gX3JlZi5tZXRhZGF0YTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc1lvdVR5cGVGb3JtYXR0ZXIpO1xuXG4gICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgIHRoaXMucmVzZXRGb3JtYXQoKTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhBc1lvdVR5cGVGb3JtYXR0ZXIsIFt7XG4gICAga2V5OiBcInJlc2V0Rm9ybWF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0Rm9ybWF0KCkge1xuICAgICAgdGhpcy5jaG9zZW5Gb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLnRlbXBsYXRlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5uYXRpb25hbE51bWJlclRlbXBsYXRlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5wb3B1bGF0ZWROYXRpb25hbE51bWJlclRlbXBsYXRlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5wb3B1bGF0ZWROYXRpb25hbE51bWJlclRlbXBsYXRlUG9zaXRpb24gPSAtMTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQobnVtYmVyaW5nUGxhbiwgc3RhdGUpIHtcbiAgICAgIHRoaXMucmVzZXRGb3JtYXQoKTtcblxuICAgICAgaWYgKG51bWJlcmluZ1BsYW4pIHtcbiAgICAgICAgdGhpcy5pc05BTlAgPSBudW1iZXJpbmdQbGFuLmNhbGxpbmdDb2RlKCkgPT09ICcxJztcbiAgICAgICAgdGhpcy5tYXRjaGluZ0Zvcm1hdHMgPSBudW1iZXJpbmdQbGFuLmZvcm1hdHMoKTtcblxuICAgICAgICBpZiAoc3RhdGUubmF0aW9uYWxTaWduaWZpY2FudE51bWJlcikge1xuICAgICAgICAgIHRoaXMubmFycm93RG93bk1hdGNoaW5nRm9ybWF0cyhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaXNOQU5QID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm1hdGNoaW5nRm9ybWF0cyA9IFtdO1xuICAgICAgfVxuICAgIH1cbiAgICAvKipcclxuICAgICAqIEZvcm1hdHMgYW4gdXBkYXRlZCBwaG9uZSBudW1iZXIuXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IG5leHREaWdpdHMg4oCUIEFkZGl0aW9uYWwgcGhvbmUgbnVtYmVyIGRpZ2l0cy5cclxuICAgICAqIEBwYXJhbSAge29iamVjdH0gc3RhdGUg4oCUwqBgQXNZb3VUeXBlYCBzdGF0ZS5cclxuICAgICAqIEByZXR1cm4ge1tzdHJpbmddfSBSZXR1cm5zIHVuZGVmaW5lZCBpZiB0aGUgdXBkYXRlZCBwaG9uZSBudW1iZXIgY2FuJ3QgYmUgZm9ybWF0dGVkIHVzaW5nIGFueSBvZiB0aGUgYXZhaWxhYmxlIGZvcm1hdHMuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXQobmV4dERpZ2l0cywgc3RhdGUpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIC8vIFNlZSBpZiB0aGUgcGhvbmUgbnVtYmVyIGRpZ2l0cyBjYW4gYmUgZm9ybWF0dGVkIGFzIGEgY29tcGxldGUgcGhvbmUgbnVtYmVyLlxuICAgICAgLy8gSWYgbm90LCB1c2UgdGhlIHJlc3VsdHMgZnJvbSBgZm9ybWF0TmF0aW9uYWxOdW1iZXJXaXRoTmV4dERpZ2l0cygpYCxcbiAgICAgIC8vIHdoaWNoIGZvcm1hdHMgYmFzZWQgb24gdGhlIGNob3NlbiBmb3JtYXR0aW5nIHBhdHRlcm4uXG4gICAgICAvL1xuICAgICAgLy8gQXR0ZW1wdGluZyB0byBmb3JtYXQgY29tcGxldGUgcGhvbmUgbnVtYmVyIGZpcnN0IGlzIGhvdyBpdCdzIGRvbmVcbiAgICAgIC8vIGluIEdvb2dsZSdzIGBsaWJwaG9uZW51bWJlcmAsIHNvIHRoaXMgbGlicmFyeSBqdXN0IGZvbGxvd3MgaXQuXG4gICAgICAvLyBHb29nbGUncyBgbGlicGhvbmVudW1iZXJgIGNvZGUgZG9lc24ndCBleHBsYWluIGluIGRldGFpbCB3aHkgZG9lcyBpdFxuICAgICAgLy8gYXR0ZW1wdCB0byBmb3JtYXQgZGlnaXRzIGFzIGEgY29tcGxldGUgcGhvbmUgbnVtYmVyXG4gICAgICAvLyBpbnN0ZWFkIG9mIGp1c3QgZ29pbmcgd2l0aCBhIHByZXZpb3Vsc3kgKG9yIG5ld2x5KSBjaG9zZW4gYGZvcm1hdGA6XG4gICAgICAvL1xuICAgICAgLy8gXCJDaGVja3MgdG8gc2VlIGlmIHRoZXJlIGlzIGFuIGV4YWN0IHBhdHRlcm4gbWF0Y2ggZm9yIHRoZXNlIGRpZ2l0cy5cbiAgICAgIC8vICBJZiBzbywgd2Ugc2hvdWxkIHVzZSB0aGlzIGluc3RlYWQgb2YgYW55IG90aGVyIGZvcm1hdHRpbmcgdGVtcGxhdGVcbiAgICAgIC8vICB3aG9zZSBsZWFkaW5nRGlnaXRzUGF0dGVybiBhbHNvIG1hdGNoZXMgdGhlIGlucHV0LlwiXG4gICAgICAvL1xuICAgICAgaWYgKGNhbkZvcm1hdENvbXBsZXRlTnVtYmVyKHN0YXRlLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIsIHRoaXMubWV0YWRhdGEpKSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UodGhpcy5tYXRjaGluZ0Zvcm1hdHMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgICAgICAgIHZhciBmb3JtYXQgPSBfc3RlcC52YWx1ZTtcbiAgICAgICAgICB2YXIgZm9ybWF0dGVkQ29tcGxldGVOdW1iZXIgPSBmb3JtYXRDb21wbGV0ZU51bWJlcihzdGF0ZSwgZm9ybWF0LCB7XG4gICAgICAgICAgICBtZXRhZGF0YTogdGhpcy5tZXRhZGF0YSxcbiAgICAgICAgICAgIHNob3VsZFRyeU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGU6IGZ1bmN0aW9uIHNob3VsZFRyeU5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoZm9ybWF0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5zaG91bGRUcnlOYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlKGZvcm1hdCwge1xuICAgICAgICAgICAgICAgIGludGVybmF0aW9uYWw6IHN0YXRlLmludGVybmF0aW9uYWwsXG4gICAgICAgICAgICAgICAgbmF0aW9uYWxQcmVmaXg6IHN0YXRlLm5hdGlvbmFsUHJlZml4XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNlcGFyYXRvckFmdGVyTmF0aW9uYWxQcmVmaXg6IGZ1bmN0aW9uIGdldFNlcGFyYXRvckFmdGVyTmF0aW9uYWxQcmVmaXgoZm9ybWF0KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfdGhpcy5nZXRTZXBhcmF0b3JBZnRlck5hdGlvbmFsUHJlZml4KGZvcm1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoZm9ybWF0dGVkQ29tcGxldGVOdW1iZXIpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXRGb3JtYXQoKTtcbiAgICAgICAgICAgIHRoaXMuY2hvc2VuRm9ybWF0ID0gZm9ybWF0O1xuICAgICAgICAgICAgdGhpcy5zZXROYXRpb25hbE51bWJlclRlbXBsYXRlKGZvcm1hdHRlZENvbXBsZXRlTnVtYmVyLnJlcGxhY2UoL1xcZC9nLCBESUdJVF9QTEFDRUhPTERFUiksIHN0YXRlKTtcbiAgICAgICAgICAgIHRoaXMucG9wdWxhdGVkTmF0aW9uYWxOdW1iZXJUZW1wbGF0ZSA9IGZvcm1hdHRlZENvbXBsZXRlTnVtYmVyOyAvLyBXaXRoIGEgbmV3IGZvcm1hdHRpbmcgdGVtcGxhdGUsIHRoZSBtYXRjaGVkIHBvc2l0aW9uXG4gICAgICAgICAgICAvLyB1c2luZyB0aGUgb2xkIHRlbXBsYXRlIG5lZWRzIHRvIGJlIHJlc2V0LlxuXG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlZE5hdGlvbmFsTnVtYmVyVGVtcGxhdGVQb3NpdGlvbiA9IHRoaXMudGVtcGxhdGUubGFzdEluZGV4T2YoRElHSVRfUExBQ0VIT0xERVIpO1xuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdHRlZENvbXBsZXRlTnVtYmVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSAvLyBGb3JtYXQgdGhlIGRpZ2l0cyBhcyBhIHBhcnRpYWwgKGluY29tcGxldGUpIHBob25lIG51bWJlclxuICAgICAgLy8gdXNpbmcgdGhlIHByZXZpb3VzbHkgY2hvc2VuIGZvcm1hdHRpbmcgcGF0dGVybiAob3IgYSBuZXdseSBjaG9zZW4gb25lKS5cblxuXG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXROYXRpb25hbE51bWJlcldpdGhOZXh0RGlnaXRzKG5leHREaWdpdHMsIHN0YXRlKTtcbiAgICB9IC8vIEZvcm1hdHMgdGhlIG5leHQgcGhvbmUgbnVtYmVyIGRpZ2l0cy5cblxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdE5hdGlvbmFsTnVtYmVyV2l0aE5leHREaWdpdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0TmF0aW9uYWxOdW1iZXJXaXRoTmV4dERpZ2l0cyhuZXh0RGlnaXRzLCBzdGF0ZSkge1xuICAgICAgdmFyIHByZXZpb3VzbHlDaG9zZW5Gb3JtYXQgPSB0aGlzLmNob3NlbkZvcm1hdDsgLy8gQ2hvb3NlIGEgZm9ybWF0IGZyb20gdGhlIGxpc3Qgb2YgbWF0Y2hpbmcgb25lcy5cblxuICAgICAgdmFyIG5ld2x5Q2hvc2VuRm9ybWF0ID0gdGhpcy5jaG9vc2VGb3JtYXQoc3RhdGUpO1xuXG4gICAgICBpZiAobmV3bHlDaG9zZW5Gb3JtYXQpIHtcbiAgICAgICAgaWYgKG5ld2x5Q2hvc2VuRm9ybWF0ID09PSBwcmV2aW91c2x5Q2hvc2VuRm9ybWF0KSB7XG4gICAgICAgICAgLy8gSWYgaXQgY2FuIGZvcm1hdCB0aGUgbmV4dCAoY3VycmVudCkgZGlnaXRzXG4gICAgICAgICAgLy8gdXNpbmcgdGhlIHByZXZpb3VzbHkgY2hvc2VuIHBob25lIG51bWJlciBmb3JtYXRcbiAgICAgICAgICAvLyB0aGVuIHJldHVybiB0aGUgdXBkYXRlZCBmb3JtYXR0ZWQgbnVtYmVyLlxuICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdE5leHROYXRpb25hbE51bWJlckRpZ2l0cyhuZXh0RGlnaXRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBJZiBhIG1vcmUgYXBwcm9wcmlhdGUgcGhvbmUgbnVtYmVyIGZvcm1hdFxuICAgICAgICAgIC8vIGhhcyBiZWVuIGNob3NlbiBmb3IgdGhlc2UgXCJsZWFkaW5nIGRpZ2l0c1wiLFxuICAgICAgICAgIC8vIHRoZW4gcmUtZm9ybWF0IHRoZSBuYXRpb25hbCBwaG9uZSBudW1iZXIgcGFydFxuICAgICAgICAgIC8vIHVzaW5nIHRoZSBuZXdseSBzZWxlY3RlZCBmb3JtYXQuXG4gICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0TmV4dE5hdGlvbmFsTnVtYmVyRGlnaXRzKHN0YXRlLmdldE5hdGlvbmFsRGlnaXRzKCkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5hcnJvd0Rvd25NYXRjaGluZ0Zvcm1hdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmFycm93RG93bk1hdGNoaW5nRm9ybWF0cyhfcmVmMikge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHZhciBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyID0gX3JlZjIubmF0aW9uYWxTaWduaWZpY2FudE51bWJlcixcbiAgICAgICAgICBuYXRpb25hbFByZWZpeCA9IF9yZWYyLm5hdGlvbmFsUHJlZml4LFxuICAgICAgICAgIGludGVybmF0aW9uYWwgPSBfcmVmMi5pbnRlcm5hdGlvbmFsO1xuICAgICAgdmFyIGxlYWRpbmdEaWdpdHMgPSBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyOyAvLyBcImxlYWRpbmcgZGlnaXRzXCIgcGF0dGVybiBsaXN0IHN0YXJ0cyB3aXRoIGFcbiAgICAgIC8vIFwibGVhZGluZyBkaWdpdHNcIiBwYXR0ZXJuIGZpdHRpbmcgYSBtYXhpbXVtIG9mIDMgbGVhZGluZyBkaWdpdHMuXG4gICAgICAvLyBTbywgYWZ0ZXIgYSB1c2VyIGlucHV0cyAzIGRpZ2l0cyBvZiBhIG5hdGlvbmFsIChzaWduaWZpY2FudCkgcGhvbmUgbnVtYmVyXG4gICAgICAvLyB0aGlzIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIGNhbiBhbHJlYWR5IGJlIGZvcm1hdHRlZC5cbiAgICAgIC8vIFRoZSBuZXh0IFwibGVhZGluZyBkaWdpdHNcIiBwYXR0ZXJuIGlzIGZvciA0IGxlYWRpbmcgZGlnaXRzIG1heCxcbiAgICAgIC8vIGFuZCB0aGUgXCJsZWFkaW5nIGRpZ2l0c1wiIHBhdHRlcm4gYWZ0ZXIgaXQgaXMgZm9yIDUgbGVhZGluZyBkaWdpdHMgbWF4LCBldGMuXG4gICAgICAvLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGRpZmZlcmVudCBmcm9tIEdvb2dsZSdzXG4gICAgICAvLyBpbiB0aGF0IGl0IHNlYXJjaGVzIGZvciBhIGZpdHRpbmcgZm9ybWF0XG4gICAgICAvLyBldmVuIGlmIHRoZSB1c2VyIGhhcyBlbnRlcmVkIGxlc3MgdGhhblxuICAgICAgLy8gYE1JTl9MRUFESU5HX0RJR0lUU19MRU5HVEhgIGRpZ2l0cyBvZiBhIG5hdGlvbmFsIG51bWJlci5cbiAgICAgIC8vIEJlY2F1c2Ugc29tZSBsZWFkaW5nIGRpZ2l0IHBhdHRlcm5zIGFscmVhZHkgbWF0Y2ggZm9yIGEgc2luZ2xlIGZpcnN0IGRpZ2l0LlxuXG4gICAgICB2YXIgbGVhZGluZ0RpZ2l0c1BhdHRlcm5JbmRleCA9IGxlYWRpbmdEaWdpdHMubGVuZ3RoIC0gTUlOX0xFQURJTkdfRElHSVRTX0xFTkdUSDtcblxuICAgICAgaWYgKGxlYWRpbmdEaWdpdHNQYXR0ZXJuSW5kZXggPCAwKSB7XG4gICAgICAgIGxlYWRpbmdEaWdpdHNQYXR0ZXJuSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm1hdGNoaW5nRm9ybWF0cyA9IHRoaXMubWF0Y2hpbmdGb3JtYXRzLmZpbHRlcihmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiBfdGhpczIuZm9ybWF0U3VpdHMoZm9ybWF0LCBpbnRlcm5hdGlvbmFsLCBuYXRpb25hbFByZWZpeCkgJiYgX3RoaXMyLmZvcm1hdE1hdGNoZXMoZm9ybWF0LCBsZWFkaW5nRGlnaXRzLCBsZWFkaW5nRGlnaXRzUGF0dGVybkluZGV4KTtcbiAgICAgIH0pOyAvLyBJZiB0aGVyZSB3YXMgYSBwaG9uZSBudW1iZXIgZm9ybWF0IGNob3NlblxuICAgICAgLy8gYW5kIGl0IG5vIGxvbmdlciBob2xkcyBnaXZlbiB0aGUgbmV3IGxlYWRpbmcgZGlnaXRzIHRoZW4gcmVzZXQgaXQuXG4gICAgICAvLyBUaGUgdGVzdCBmb3IgdGhpcyBgaWZgIGNvbmRpdGlvbiBpcyBtYXJrZWQgYXM6XG4gICAgICAvLyBcIlJlc2V0IGEgY2hvc2VuIGZvcm1hdCB3aGVuIGl0IG5vIGxvbmdlciBob2xkcyBnaXZlbiB0aGUgbmV3IGxlYWRpbmcgZGlnaXRzXCIuXG4gICAgICAvLyBUbyBjb25zdHJ1Y3QgYSB2YWxpZCB0ZXN0IGNhc2UgZm9yIHRoaXMgb25lIGNhbiBmaW5kIGEgY291bnRyeVxuICAgICAgLy8gaW4gYFBob25lTnVtYmVyTWV0YWRhdGEueG1sYCB5aWVsZGluZyBvbmUgZm9ybWF0IGZvciAzIGA8bGVhZGluZ0RpZ2l0cz5gXG4gICAgICAvLyBhbmQgeWllbGRpbmcgYW5vdGhlciBmb3JtYXQgZm9yIDQgYDxsZWFkaW5nRGlnaXRzPmAgKEF1c3RyYWxpYSBpbiB0aGlzIGNhc2UpLlxuXG4gICAgICBpZiAodGhpcy5jaG9zZW5Gb3JtYXQgJiYgdGhpcy5tYXRjaGluZ0Zvcm1hdHMuaW5kZXhPZih0aGlzLmNob3NlbkZvcm1hdCkgPT09IC0xKSB7XG4gICAgICAgIHRoaXMucmVzZXRGb3JtYXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0U3VpdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0U3VpdHMoZm9ybWF0LCBpbnRlcm5hdGlvbmFsLCBuYXRpb25hbFByZWZpeCkge1xuICAgICAgLy8gV2hlbiBhIHByZWZpeCBiZWZvcmUgYSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlciBpc1xuICAgICAgLy8gc2ltcGx5IGEgbmF0aW9uYWwgcHJlZml4LCB0aGVuIGl0J3MgcGFyc2VkIGFzIGB0aGlzLm5hdGlvbmFsUHJlZml4YC5cbiAgICAgIC8vIEluIG1vcmUgY29tcGxleCBjYXNlcywgYSBwcmVmaXggYmVmb3JlIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyXG4gICAgICAvLyBjb3VsZCBpbmNsdWRlIGEgbmF0aW9uYWwgcHJlZml4IGFzIHdlbGwgYXMgc29tZSBcImNhcHR1cmluZyBncm91cHNcIixcbiAgICAgIC8vIGFuZCBpbiB0aGF0IGNhc2UgdGhlcmUncyBubyBpbmZvIHdoZXRoZXIgYSBuYXRpb25hbCBwcmVmaXggaGFzIGJlZW4gcGFyc2VkLlxuICAgICAgLy8gSWYgbmF0aW9uYWwgcHJlZml4IGlzIG5vdCB1c2VkIHdoZW4gZm9ybWF0dGluZyBhIHBob25lIG51bWJlclxuICAgICAgLy8gdXNpbmcgdGhpcyBmb3JtYXQsIGJ1dCBhIG5hdGlvbmFsIHByZWZpeCBoYXMgYmVlbiBlbnRlcmVkIGJ5IHRoZSB1c2VyLFxuICAgICAgLy8gYW5kIHdhcyBleHRyYWN0ZWQsIHRoZW4gZGlzY2FyZCBzdWNoIHBob25lIG51bWJlciBmb3JtYXQuXG4gICAgICAvLyBJbiBHb29nbGUncyBcIkFzWW91VHlwZVwiIGZvcm1hdHRlciBjb2RlLCB0aGUgZXF1aXZhbGVudCB3b3VsZCBiZSB0aGlzIHBhcnQ6XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2xpYnBob25lbnVtYmVyL2Jsb2IvMGE0NWNmZDk2ZTcxY2FkOGVkYjBlMTYyYTcwZmNjOGJkOTcyODkzMy9qYXZhL2xpYnBob25lbnVtYmVyL3NyYy9jb20vZ29vZ2xlL2kxOG4vcGhvbmVudW1iZXJzL0FzWW91VHlwZUZvcm1hdHRlci5qYXZhI0wxNzUtTDE4NFxuICAgICAgaWYgKG5hdGlvbmFsUHJlZml4ICYmICFmb3JtYXQudXNlc05hdGlvbmFsUHJlZml4KCkgJiYgLy8gIWZvcm1hdC5kb21lc3RpY0NhcnJpZXJDb2RlRm9ybWF0dGluZ1J1bGUoKSAmJlxuICAgICAgIWZvcm1hdC5uYXRpb25hbFByZWZpeElzT3B0aW9uYWxXaGVuRm9ybWF0dGluZ0luTmF0aW9uYWxGb3JtYXQoKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9IC8vIElmIG5hdGlvbmFsIHByZWZpeCBpcyBtYW5kYXRvcnkgZm9yIHRoaXMgcGhvbmUgbnVtYmVyIGZvcm1hdFxuICAgICAgLy8gYW5kIHRoZXJlJ3JlIG5vIGd1YXJhbnRlZXMgdGhhdCBhIG5hdGlvbmFsIHByZWZpeCBpcyBwcmVzZW50IGluIHVzZXIgaW5wdXRcbiAgICAgIC8vIHRoZW4gZGlzY2FyZCB0aGlzIHBob25lIG51bWJlciBmb3JtYXQgYXMgbm90IHN1aXRhYmxlLlxuICAgICAgLy8gSW4gR29vZ2xlJ3MgXCJBc1lvdVR5cGVcIiBmb3JtYXR0ZXIgY29kZSwgdGhlIGVxdWl2YWxlbnQgd291bGQgYmUgdGhpcyBwYXJ0OlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9saWJwaG9uZW51bWJlci9ibG9iLzBhNDVjZmQ5NmU3MWNhZDhlZGIwZTE2MmE3MGZjYzhiZDk3Mjg5MzMvamF2YS9saWJwaG9uZW51bWJlci9zcmMvY29tL2dvb2dsZS9pMThuL3Bob25lbnVtYmVycy9Bc1lvdVR5cGVGb3JtYXR0ZXIuamF2YSNMMTg1LUwxOTNcblxuXG4gICAgICBpZiAoIWludGVybmF0aW9uYWwgJiYgIW5hdGlvbmFsUHJlZml4ICYmIGZvcm1hdC5uYXRpb25hbFByZWZpeElzTWFuZGF0b3J5V2hlbkZvcm1hdHRpbmdJbk5hdGlvbmFsRm9ybWF0KCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0TWF0Y2hlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXRNYXRjaGVzKGZvcm1hdCwgbGVhZGluZ0RpZ2l0cywgbGVhZGluZ0RpZ2l0c1BhdHRlcm5JbmRleCkge1xuICAgICAgdmFyIGxlYWRpbmdEaWdpdHNQYXR0ZXJuc0NvdW50ID0gZm9ybWF0LmxlYWRpbmdEaWdpdHNQYXR0ZXJucygpLmxlbmd0aDsgLy8gSWYgdGhpcyBmb3JtYXQgaXMgbm90IHJlc3RyaWN0ZWQgdG8gYSBjZXJ0YWluXG4gICAgICAvLyBsZWFkaW5nIGRpZ2l0cyBwYXR0ZXJuIHRoZW4gaXQgZml0cy5cbiAgICAgIC8vIFRoZSB0ZXN0IGNhc2UgY291bGQgYmUgZm91bmQgYnkgc2VhcmNoaW5nIGZvciBcImxlYWRpbmdEaWdpdHNQYXR0ZXJuc0NvdW50ID09PSAwXCIuXG5cbiAgICAgIGlmIChsZWFkaW5nRGlnaXRzUGF0dGVybnNDb3VudCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gLy8gU3RhcnQgbmFycm93aW5nIGRvd24gdGhlIGxpc3Qgb2YgcG9zc2libGUgZm9ybWF0cyBiYXNlZCBvbiB0aGUgbGVhZGluZyBkaWdpdHMuXG4gICAgICAvLyAob25seSBwcmV2aW91c2x5IG1hdGNoZWQgZm9ybWF0cyB0YWtlIHBhcnQgaW4gdGhlIG5hcnJvd2luZyBkb3duIHByb2Nlc3MpXG4gICAgICAvLyBgbGVhZGluZ19kaWdpdHNfcGF0dGVybnNgIHN0YXJ0IHdpdGggMyBkaWdpdHMgbWluXG4gICAgICAvLyBhbmQgdGhlbiBnbyB1cCBmcm9tIHRoZXJlIG9uZSBkaWdpdCBhdCBhIHRpbWUuXG5cblxuICAgICAgbGVhZGluZ0RpZ2l0c1BhdHRlcm5JbmRleCA9IE1hdGgubWluKGxlYWRpbmdEaWdpdHNQYXR0ZXJuSW5kZXgsIGxlYWRpbmdEaWdpdHNQYXR0ZXJuc0NvdW50IC0gMSk7XG4gICAgICB2YXIgbGVhZGluZ0RpZ2l0c1BhdHRlcm4gPSBmb3JtYXQubGVhZGluZ0RpZ2l0c1BhdHRlcm5zKClbbGVhZGluZ0RpZ2l0c1BhdHRlcm5JbmRleF07IC8vIEdvb2dsZSBpbXBvc2VzIGEgcmVxdWlyZW1lbnQgb24gdGhlIGxlYWRpbmcgZGlnaXRzXG4gICAgICAvLyB0byBiZSBtaW5pbXVtIDMgZGlnaXRzIGxvbmcgaW4gb3JkZXIgdG8gYmUgZWxpZ2libGVcbiAgICAgIC8vIGZvciBjaGVja2luZyB0aG9zZSB3aXRoIGEgbGVhZGluZyBkaWdpdHMgcGF0dGVybi5cbiAgICAgIC8vXG4gICAgICAvLyBTaW5jZSBgbGVhZGluZ19kaWdpdHNfcGF0dGVybnNgIHN0YXJ0IHdpdGggMyBkaWdpdHMgbWluLFxuICAgICAgLy8gR29vZ2xlJ3Mgb3JpZ2luYWwgYGxpYnBob25lbnVtYmVyYCBsaWJyYXJ5IG9ubHkgc3RhcnRzXG4gICAgICAvLyBleGNsdWRpbmcgYW55IG5vbi1tYXRjaGluZyBmb3JtYXRzIG9ubHkgd2hlbiB0aGVcbiAgICAgIC8vIG5hdGlvbmFsIG51bWJlciBlbnRlcmVkIHNvIGZhciBpcyBhdCBsZWFzdCAzIGRpZ2l0cyBsb25nLFxuICAgICAgLy8gb3RoZXJ3aXNlIGZvcm1hdCBtYXRjaGluZyB3b3VsZCBnaXZlIGZhbHNlIG5lZ2F0aXZlcy5cbiAgICAgIC8vXG4gICAgICAvLyBGb3IgZXhhbXBsZSwgd2hlbiB0aGUgZGlnaXRzIGVudGVyZWQgc28gZmFyIGFyZSBgMmBcbiAgICAgIC8vIGFuZCB0aGUgbGVhZGluZyBkaWdpdHMgcGF0dGVybiBpcyBgMjFgIOKAk1xuICAgICAgLy8gaXQncyBxdWl0ZSBvYnZpb3VzIGluIHRoaXMgY2FzZSB0aGF0IHRoZSBmb3JtYXQgY291bGQgYmUgdGhlIG9uZVxuICAgICAgLy8gYnV0IGR1ZSB0byB0aGUgYWJzZW5jZSBvZiBmdXJ0aGVyIGRpZ2l0cyBpdCB3b3VsZCBnaXZlIGZhbHNlIG5lZ2F0aXZlLlxuICAgICAgLy9cbiAgICAgIC8vIEFsc28sIGBsZWFkaW5nX2RpZ2l0c19wYXR0ZXJuc2AgZG9lc24ndCBhbHdheXMgY29ycmVzcG9uZCB0byBhIHNpbmdsZVxuICAgICAgLy8gZGlnaXRzIGNvdW50LiBGb3IgZXhhbXBsZSwgYDYwfDhgIHBhdHRlcm4gd291bGQgYWxyZWFkeSBtYXRjaCBgOGBcbiAgICAgIC8vIGJ1dCB0aGUgYDYwYCBwYXJ0IHdvdWxkIHJlcXVpcmUgaGF2aW5nIGF0IGxlYXN0IHR3byBsZWFkaW5nIGRpZ2l0cyxcbiAgICAgIC8vIHNvIHRoZSB3aG9sZSBwYXR0ZXJuIHdvdWxkIHJlcXVpcmUgaW5wdXR0aW5nIHR3byBkaWdpdHMgZmlyc3QgaW4gb3JkZXIgdG9cbiAgICAgIC8vIGRlY2lkZSBvbiB3aGV0aGVyIGl0IG1hdGNoZXMgdGhlIGlucHV0LCBldmVuIHdoZW4gdGhlIGlucHV0IGlzIFwiODBcIi5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGxpYnJhcnkg4oCUIGBsaWJwaG9uZW51bWJlci1qc2Ag4oCUIGFsbG93cyBmaWx0ZXJpbmcgYnkgYGxlYWRpbmdfZGlnaXRzX3BhdHRlcm5zYFxuICAgICAgLy8gZXZlbiB3aGVuIHRoZXJlJ3Mgb25seSAxIG9yIDIgZGlnaXRzIG9mIHRoZSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlci5cbiAgICAgIC8vIFRvIGRvIHRoYXQsIGl0IHVzZXMgYSBub24tc3RyaWN0IHBhdHRlcm4gbWF0Y2hlciB3cml0dGVuIHNwZWNpZmljYWxseSBmb3IgdGhhdC5cbiAgICAgIC8vXG5cbiAgICAgIGlmIChsZWFkaW5nRGlnaXRzLmxlbmd0aCA8IE1JTl9MRUFESU5HX0RJR0lUU19MRU5HVEgpIHtcbiAgICAgICAgLy8gQmVmb3JlIGxlYWRpbmcgZGlnaXRzIDwgMyBtYXRjaGluZyB3YXMgaW1wbGVtZW50ZWQ6XG4gICAgICAgIC8vIHJldHVybiB0cnVlXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEFmdGVyIGxlYWRpbmcgZGlnaXRzIDwgMyBtYXRjaGluZyB3YXMgaW1wbGVtZW50ZWQ6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBQYXR0ZXJuTWF0Y2hlcihsZWFkaW5nRGlnaXRzUGF0dGVybikubWF0Y2gobGVhZGluZ0RpZ2l0cywge1xuICAgICAgICAgICAgYWxsb3dPdmVyZmxvdzogdHJ1ZVxuICAgICAgICAgIH0pICE9PSB1bmRlZmluZWQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICB7XG4gICAgICAgICAgLy8gVGhlcmUncyBhIHNsaWdodCBwb3NzaWJpbGl0eSB0aGF0IHRoZXJlIGNvdWxkIGJlIHNvbWUgdW5kaXNjb3ZlcmVkIGJ1Z1xuICAgICAgICAgIC8vIGluIHRoZSBwYXR0ZXJuIG1hdGNoZXIgY29kZS4gU2luY2UgdGhlIFwibGVhZGluZyBkaWdpdHMgPCAzIG1hdGNoaW5nXCJcbiAgICAgICAgICAvLyBmZWF0dXJlIGlzIG5vdCBcImVzc2VudGlhbFwiIGZvciBvcGVyYXRpb24sIGl0IGNhbiBmYWxsIGJhY2sgdG8gdGhlIG9sZCB3YXlcbiAgICAgICAgICAvLyBpbiBjYXNlIG9mIGFueSBpc3N1ZXMgcmF0aGVyIHRoYW4gaGFsdGluZyB0aGUgYXBwbGljYXRpb24ncyBleGVjdXRpb24uXG4gICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gSWYgYXQgbGVhc3QgYE1JTl9MRUFESU5HX0RJR0lUU19MRU5HVEhgIGRpZ2l0cyBvZiBhIG5hdGlvbmFsIG51bWJlciBhcmVcbiAgICAgIC8vIGF2YWlsYWJsZSB0aGVuIHVzZSB0aGUgdXN1YWwgcmVndWxhciBleHByZXNzaW9uIG1hdGNoaW5nLlxuICAgICAgLy9cbiAgICAgIC8vIFRoZSB3aG9sZSBwYXR0ZXJuIGlzIHdyYXBwZWQgaW4gcm91bmQgYnJhY2tldHMgKGAoKWApIGJlY2F1c2VcbiAgICAgIC8vIHRoZSBwYXR0ZXJuIGNhbiB1c2UgXCJvclwiIG9wZXJhdG9yIChgfGApIGF0IHRoZSB0b3AgbGV2ZWwgb2YgdGhlIHBhdHRlcm4uXG4gICAgICAvL1xuXG5cbiAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiXihcIi5jb25jYXQobGVhZGluZ0RpZ2l0c1BhdHRlcm4sIFwiKVwiKSkudGVzdChsZWFkaW5nRGlnaXRzKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0Rm9ybWF0Rm9ybWF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZvcm1hdEZvcm1hdChmb3JtYXQsIGludGVybmF0aW9uYWwpIHtcbiAgICAgIHJldHVybiBpbnRlcm5hdGlvbmFsID8gZm9ybWF0LmludGVybmF0aW9uYWxGb3JtYXQoKSA6IGZvcm1hdC5mb3JtYXQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY2hvb3NlRm9ybWF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNob29zZUZvcm1hdChzdGF0ZSkge1xuICAgICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgIC8vIElmIHRoaXMgZm9ybWF0IGlzIGN1cnJlbnRseSBiZWluZyB1c2VkXG4gICAgICAgIC8vIGFuZCBpcyBzdGlsbCBzdWl0YWJsZSwgdGhlbiBzdGljayB0byBpdC5cbiAgICAgICAgaWYgKF90aGlzMy5jaG9zZW5Gb3JtYXQgPT09IGZvcm1hdCkge1xuICAgICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICAgIH0gLy8gU29tZXRpbWVzLCBhIGZvcm1hdHRpbmcgcnVsZSBpbnNlcnRzIGFkZGl0aW9uYWwgZGlnaXRzIGluIGEgcGhvbmUgbnVtYmVyLFxuICAgICAgICAvLyBhbmQgXCJhcyB5b3UgdHlwZVwiIGZvcm1hdHRlciBjYW4ndCBkbyB0aGF0OiBpdCBzaG91bGQgb25seSB1c2UgdGhlIGRpZ2l0c1xuICAgICAgICAvLyB0aGF0IHRoZSB1c2VyIGhhcyBpbnB1dC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGluIEFyZ2VudGluYSwgdGhlcmUncyBhIGZvcm1hdCBmb3IgbW9iaWxlIHBob25lIG51bWJlcnM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vIHtcbiAgICAgICAgLy8gICAgXCJwYXR0ZXJuXCI6IFwiKFxcXFxkKShcXFxcZHsyfSkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFxuICAgICAgICAvLyAgICBcImxlYWRpbmdfZGlnaXRzX3BhdHRlcm5zXCI6IFtcIjkxXCJdLFxuICAgICAgICAvLyAgICBcIm5hdGlvbmFsX3ByZWZpeF9mb3JtYXR0aW5nX3J1bGVcIjogXCIwJDFcIixcbiAgICAgICAgLy8gICAgXCJmb3JtYXRcIjogXCIkMiAxNS0kMy0kNFwiLFxuICAgICAgICAvLyAgICBcImludGVybmF0aW9uYWxfZm9ybWF0XCI6IFwiJDEgJDIgJDMtJDRcIlxuICAgICAgICAvLyB9XG4gICAgICAgIC8vXG4gICAgICAgIC8vIEluIHRoYXQgZm9ybWF0LCBgaW50ZXJuYXRpb25hbF9mb3JtYXRgIGlzIHVzZWQgaW5zdGVhZCBvZiBgZm9ybWF0YFxuICAgICAgICAvLyBiZWNhdXNlIGBmb3JtYXRgIGluc2VydHMgYDE1YCBpbiB0aGUgZm9ybWF0dGVkIG51bWJlcixcbiAgICAgICAgLy8gYW5kIGBBc1lvdVR5cGVgIGZvcm1hdHRlciBzaG91bGQgb25seSB1c2UgdGhlIGRpZ2l0c1xuICAgICAgICAvLyB0aGUgdXNlciBoYXMgYWN0dWFsbHkgaW5wdXQsIHdpdGhvdXQgYWRkaW5nIGFueSBleHRyYSBkaWdpdHMuXG4gICAgICAgIC8vIEluIHRoaXMgY2FzZSwgaXQgd291bGRuJ3QgbWFrZSBhIGRpZmZlcmVuY2UsIGJlY2F1c2UgdGhlIGAxNWBcbiAgICAgICAgLy8gaXMgZmlyc3Qgc3RyaXBwZWQgd2hlbiBhcHBseWluZyBgbmF0aW9uYWxfcHJlZml4X2Zvcl9wYXJzaW5nYFxuICAgICAgICAvLyBhbmQgdGhlbiByZS1hZGRlZCB3aGVuIHVzaW5nIGBmb3JtYXRgLCBzbyBpbiByZWFsaXR5IGl0IGRvZXNuJ3RcbiAgICAgICAgLy8gYWRkIGFueSBuZXcgZGlnaXRzIHRvIHRoZSBudW1iZXIsIGJ1dCB0byBkZXRlY3QgdGhhdCwgdGhlIGNvZGVcbiAgICAgICAgLy8gd291bGQgaGF2ZSB0byBiZSBtb3JlIGNvbXBsZXg6IGl0IHdvdWxkIGhhdmUgdG8gdHJ5IGZvcm1hdHRpbmdcbiAgICAgICAgLy8gdGhlIGRpZ2l0cyB1c2luZyB0aGUgZm9ybWF0IGFuZCB0aGVuIHNlZSBpZiBhbnkgZGlnaXRzIGhhdmVcbiAgICAgICAgLy8gYWN0dWFsbHkgYmVlbiBhZGRlZCBvciByZW1vdmVkLCBhbmQgdGhlbiwgZXZlcnkgdGltZSBhIG5ldyBkaWdpdFxuICAgICAgICAvLyBpcyBpbnB1dCwgaXQgc2hvdWxkIHJlLWNoZWNrIHdoZXRoZXIgdGhlIGNob3NlbiBmb3JtYXQgZG9lc24ndFxuICAgICAgICAvLyBhbHRlciB0aGUgZGlnaXRzLlxuICAgICAgICAvL1xuICAgICAgICAvLyBHb29nbGUncyBjb2RlIGRvZXNuJ3QgZ28gdGhhdCBmYXIsIGFuZCBzbyBkb2VzIHRoaXMgbGlicmFyeTpcbiAgICAgICAgLy8gaXQgc2ltcGx5IHJlcXVpcmVzIHRoYXQgYSBgZm9ybWF0YCBkb2Vzbid0IGFkZCBhbnkgYWRkaXRvbmFsXG4gICAgICAgIC8vIGRpZ2l0cyB0byB1c2VyJ3MgaW5wdXQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIEFsc28sIHBlb3BsZSBpbiBnZW5lcmFsIHNob3VsZCBtb3ZlIGZyb20gaW5wdXR0aW5nIHBob25lIG51bWJlcnNcbiAgICAgICAgLy8gaW4gbmF0aW9uYWwgZm9ybWF0IChwb3NzaWJseSB3aXRoIG5hdGlvbmFsIHByZWZpeGVzKVxuICAgICAgICAvLyBhbmQgdXNlIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVyIGZvcm1hdCBpbnN0ZWFkOlxuICAgICAgICAvLyBpdCdzIGEgbG9naWNhbCB0aGluZyBpbiB0aGUgbW9kZXJuIGFnZSBvZiBtb2JpbGUgcGhvbmVzLFxuICAgICAgICAvLyBnbG9iYWxpemF0aW9uIGFuZCB0aGUgaW50ZXJuZXQuXG4gICAgICAgIC8vXG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuICAgICAgICBpZiAoIU5PTl9BTFRFUklOR19GT1JNQVRfUkVHX0VYUC50ZXN0KF90aGlzMy5nZXRGb3JtYXRGb3JtYXQoZm9ybWF0LCBzdGF0ZS5pbnRlcm5hdGlvbmFsKSkpIHtcbiAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFfdGhpczMuY3JlYXRlVGVtcGxhdGVGb3JGb3JtYXQoZm9ybWF0LCBzdGF0ZSkpIHtcbiAgICAgICAgICAvLyBSZW1vdmUgdGhlIGZvcm1hdCBpZiBpdCBjYW4ndCBnZW5lcmF0ZSBhIHRlbXBsYXRlLlxuICAgICAgICAgIF90aGlzMy5tYXRjaGluZ0Zvcm1hdHMgPSBfdGhpczMubWF0Y2hpbmdGb3JtYXRzLmZpbHRlcihmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgcmV0dXJuIF8gIT09IGZvcm1hdDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMzLmNob3NlbkZvcm1hdCA9IGZvcm1hdDtcbiAgICAgICAgcmV0dXJuIFwiYnJlYWtcIjtcbiAgICAgIH07XG5cbiAgICAgIC8vIFdoZW4gdGhlcmUgYXJlIG11bHRpcGxlIGF2YWlsYWJsZSBmb3JtYXRzLCB0aGUgZm9ybWF0dGVyIHVzZXMgdGhlIGZpcnN0XG4gICAgICAvLyBmb3JtYXQgd2hlcmUgYSBmb3JtYXR0aW5nIHRlbXBsYXRlIGNvdWxkIGJlIGNyZWF0ZWQuXG4gICAgICAvL1xuICAgICAgLy8gRm9yIHNvbWUgd2VpcmQgcmVhc29uLCBgaXN0YW5idWxgIHNheXMgXCJlbHNlIHBhdGggbm90IHRha2VuXCJcbiAgICAgIC8vIGZvciB0aGUgYGZvciBvZmAgbGluZSBiZWxvdy4gU3VwcG9zZWRseSB0aGF0IG1lYW5zIHRoYXRcbiAgICAgIC8vIHRoZSBsb29wIGRvZXNuJ3QgZXZlciBnbyBvdmVyIHRoZSBsYXN0IGVsZW1lbnQgaW4gdGhlIGxpc3QuXG4gICAgICAvLyBUaGF0J3MgdHJ1ZSBiZWNhdXNlIHRoZXJlIGFsd2F5cyBpcyBgdGhpcy5jaG9zZW5Gb3JtYXRgXG4gICAgICAvLyB3aGVuIGB0aGlzLm1hdGNoaW5nRm9ybWF0c2AgaXMgbm9uLWVtcHR5LlxuICAgICAgLy8gQW5kLCBmb3Igc29tZSB3ZWlyZCByZWFzb24sIGl0IGRvZXNuJ3QgdGhpbmsgdGhhdCB0aGUgY2FzZVxuICAgICAgLy8gd2l0aCBlbXB0eSBgdGhpcy5tYXRjaGluZ0Zvcm1hdHNgIHF1YWxpZmllcyBmb3IgYSB2YWxpZCBcImVsc2VcIiBwYXRoLlxuICAgICAgLy8gU28gc2ltcGx5IG11dGluZyB0aGlzIGBpc3RhbmJ1bGAgd2FybmluZy5cbiAgICAgIC8vIEl0IGRvZXNuJ3Qgc2tpcCB0aGUgY29udGVudHMgb2YgdGhlIGBmb3Igb2ZgIGxvb3AsXG4gICAgICAvLyBpdCBqdXN0IHNraXBzIHRoZSBgZm9yIG9mYCBsaW5lLlxuICAgICAgLy9cblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHRoaXMubWF0Y2hpbmdGb3JtYXRzLnNsaWNlKCkpLCBfc3RlcDI7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMigpKS5kb25lOykge1xuICAgICAgICB2YXIgX3JldCA9IF9sb29wKCk7XG5cbiAgICAgICAgaWYgKF9yZXQgPT09IFwiYnJlYWtcIikgYnJlYWs7XG4gICAgICAgIGlmIChfcmV0ID09PSBcImNvbnRpbnVlXCIpIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY2hvc2VuRm9ybWF0KSB7XG4gICAgICAgIC8vIE5vIGZvcm1hdCBtYXRjaGVzIHRoZSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIHBob25lIG51bWJlci5cbiAgICAgICAgdGhpcy5yZXNldEZvcm1hdCgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jaG9zZW5Gb3JtYXQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImNyZWF0ZVRlbXBsYXRlRm9yRm9ybWF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZVRlbXBsYXRlRm9yRm9ybWF0KGZvcm1hdCwgc3RhdGUpIHtcbiAgICAgIC8vIFRoZSBmb3JtYXR0ZXIgZG9lc24ndCBmb3JtYXQgbnVtYmVycyB3aGVuIG51bWJlclBhdHRlcm4gY29udGFpbnMgJ3wnLCBlLmcuXG4gICAgICAvLyAoMjB8MylcXGR7NH0uIEluIHRob3NlIGNhc2VzIHdlIHF1aWNrbHkgcmV0dXJuLlxuICAgICAgLy8gKFRob3VnaCB0aGVyZSdzIG5vIHN1Y2ggZm9ybWF0IGluIGN1cnJlbnQgbWV0YWRhdGEpXG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKFNVUFBPUlRfTEVHQUNZX0ZPUk1BVFRJTkdfUEFUVEVSTlMgJiYgZm9ybWF0LnBhdHRlcm4oKS5pbmRleE9mKCd8JykgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEdldCBmb3JtYXR0aW5nIHRlbXBsYXRlIGZvciB0aGlzIHBob25lIG51bWJlciBmb3JtYXRcblxuXG4gICAgICB2YXIgdGVtcGxhdGUgPSB0aGlzLmdldFRlbXBsYXRlRm9yRm9ybWF0KGZvcm1hdCwgc3RhdGUpOyAvLyBJZiB0aGUgbmF0aW9uYWwgbnVtYmVyIGVudGVyZWQgaXMgdG9vIGxvbmdcbiAgICAgIC8vIGZvciBhbnkgcGhvbmUgbnVtYmVyIGZvcm1hdCwgdGhlbiBhYm9ydC5cblxuICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgIHRoaXMuc2V0TmF0aW9uYWxOdW1iZXJUZW1wbGF0ZSh0ZW1wbGF0ZSwgc3RhdGUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0U2VwYXJhdG9yQWZ0ZXJOYXRpb25hbFByZWZpeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTZXBhcmF0b3JBZnRlck5hdGlvbmFsUHJlZml4KGZvcm1hdCkge1xuICAgICAgLy8gYFVTYCBtZXRhZGF0YSBkb2Vzbid0IGhhdmUgYSBgbmF0aW9uYWxfcHJlZml4X2Zvcm1hdHRpbmdfcnVsZWAsXG4gICAgICAvLyBzbyB0aGUgYGlmYCBjb25kaXRpb24gYmVsb3cgZG9lc24ndCBhcHBseSB0byBgVVNgLFxuICAgICAgLy8gYnV0IGluIHJlYWxpdHkgdGhlcmUgc2hvdWRsIGJlIGEgc2VwYXJhdG9yXG4gICAgICAvLyBiZXR3ZWVuIGEgbmF0aW9uYWwgcHJlZml4IGFuZCBhIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyLlxuICAgICAgLy8gU28gYFVTYCBuYXRpb25hbCBwcmVmaXggc2VwYXJhdG9yIGlzIGEgXCJzcGVjaWFsXCIgXCJoYXJkY29kZWRcIiBjYXNlLlxuICAgICAgaWYgKHRoaXMuaXNOQU5QKSB7XG4gICAgICAgIHJldHVybiAnICc7XG4gICAgICB9IC8vIElmIGEgYGZvcm1hdGAgaGFzIGEgYG5hdGlvbmFsX3ByZWZpeF9mb3JtYXR0aW5nX3J1bGVgXG4gICAgICAvLyBhbmQgdGhhdCBydWxlIGhhcyBhIHNlcGFyYXRvciBhZnRlciBhIG5hdGlvbmFsIHByZWZpeCxcbiAgICAgIC8vIHRoZW4gaXQgbWVhbnMgdGhhdCB0aGVyZSBzaG91bGQgYmUgYSBzZXBhcmF0b3JcbiAgICAgIC8vIGJldHdlZW4gYSBuYXRpb25hbCBwcmVmaXggYW5kIGEgbmF0aW9uYWwgKHNpZ25pZmljYW50KSBudW1iZXIuXG5cblxuICAgICAgaWYgKGZvcm1hdCAmJiBmb3JtYXQubmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSgpICYmIE5BVElPTkFMX1BSRUZJWF9TRVBBUkFUT1JTX1BBVFRFUk4udGVzdChmb3JtYXQubmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSgpKSkge1xuICAgICAgICByZXR1cm4gJyAnO1xuICAgICAgfSAvLyBBdCB0aGlzIHBvaW50LCB0aGVyZSBzZWVtcyB0byBiZSBubyBjbGVhciBldmlkZW5jZSB0aGF0XG4gICAgICAvLyB0aGVyZSBzaG91bGQgYmUgYSBzZXBhcmF0b3IgYmV0d2VlbiBhIG5hdGlvbmFsIHByZWZpeFxuICAgICAgLy8gYW5kIGEgbmF0aW9uYWwgKHNpZ25pZmljYW50KSBudW1iZXIuIFNvIGRvbid0IGluc2VydCBvbmUuXG5cblxuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRJbnRlcm5hdGlvbmFsUHJlZml4QmVmb3JlQ291bnRyeUNhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldEludGVybmF0aW9uYWxQcmVmaXhCZWZvcmVDb3VudHJ5Q2FsbGluZ0NvZGUoX3JlZjMsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBJRERQcmVmaXggPSBfcmVmMy5JRERQcmVmaXgsXG4gICAgICAgICAgbWlzc2luZ1BsdXMgPSBfcmVmMy5taXNzaW5nUGx1cztcblxuICAgICAgaWYgKElERFByZWZpeCkge1xuICAgICAgICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNwYWNpbmcgPT09IGZhbHNlID8gSUREUHJlZml4IDogSUREUHJlZml4ICsgJyAnO1xuICAgICAgfVxuXG4gICAgICBpZiAobWlzc2luZ1BsdXMpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJysnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRUZW1wbGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZW1wbGF0ZShzdGF0ZSkge1xuICAgICAgaWYgKCF0aGlzLnRlbXBsYXRlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gYHRoaXMudGVtcGxhdGVgIGhvbGRzIHRoZSB0ZW1wbGF0ZSBmb3IgYSBcImNvbXBsZXRlXCIgcGhvbmUgbnVtYmVyLlxuICAgICAgLy8gVGhlIGN1cnJlbnRseSBlbnRlcmVkIHBob25lIG51bWJlciBpcyBtb3N0IGxpa2VseSBub3QgXCJjb21wbGV0ZVwiLFxuICAgICAgLy8gc28gdHJpbSBhbGwgbm9uLXBvcHVsYXRlZCBkaWdpdHMuXG5cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgaW50ZXJuYXRpb25hbFByZWZpeCA9IHN0YXRlLmludGVybmF0aW9uYWwgPyB0aGlzLmdldEludGVybmF0aW9uYWxQcmVmaXhCZWZvcmVDb3VudHJ5Q2FsbGluZ0NvZGUoc3RhdGUsIHtcbiAgICAgICAgc3BhY2luZzogZmFsc2VcbiAgICAgIH0pIDogJyc7XG5cbiAgICAgIHdoaWxlIChpIDwgaW50ZXJuYXRpb25hbFByZWZpeC5sZW5ndGggKyBzdGF0ZS5nZXREaWdpdHNXaXRob3V0SW50ZXJuYXRpb25hbFByZWZpeCgpLmxlbmd0aCkge1xuICAgICAgICBpbmRleCA9IHRoaXMudGVtcGxhdGUuaW5kZXhPZihESUdJVF9QTEFDRUhPTERFUiwgaW5kZXggKyAxKTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3V0QW5kU3RyaXBOb25QYWlyZWRQYXJlbnModGhpcy50ZW1wbGF0ZSwgaW5kZXggKyAxKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2V0TmF0aW9uYWxOdW1iZXJUZW1wbGF0ZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXROYXRpb25hbE51bWJlclRlbXBsYXRlKHRlbXBsYXRlLCBzdGF0ZSkge1xuICAgICAgdGhpcy5uYXRpb25hbE51bWJlclRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICB0aGlzLnBvcHVsYXRlZE5hdGlvbmFsTnVtYmVyVGVtcGxhdGUgPSB0ZW1wbGF0ZTsgLy8gV2l0aCBhIG5ldyBmb3JtYXR0aW5nIHRlbXBsYXRlLCB0aGUgbWF0Y2hlZCBwb3NpdGlvblxuICAgICAgLy8gdXNpbmcgdGhlIG9sZCB0ZW1wbGF0ZSBuZWVkcyB0byBiZSByZXNldC5cblxuICAgICAgdGhpcy5wb3B1bGF0ZWROYXRpb25hbE51bWJlclRlbXBsYXRlUG9zaXRpb24gPSAtMTsgLy8gRm9yIGNvbnZlbmllbmNlLCB0aGUgcHVibGljIGAudGVtcGxhdGVgIHByb3BlcnR5XG4gICAgICAvLyBjb250YWlucyB0aGUgd2hvbGUgaW50ZXJuYXRpb25hbCBudW1iZXJcbiAgICAgIC8vIGlmIHRoZSBwaG9uZSBudW1iZXIgYmVpbmcgaW5wdXQgaXMgaW50ZXJuYXRpb25hbDpcbiAgICAgIC8vICd4JyBmb3IgdGhlICcrJyBzaWduLCAneCdlcyBmb3IgdGhlIGNvdW50cnkgcGhvbmUgY29kZSxcbiAgICAgIC8vIGEgc3BhY2ViYXIgYW5kIHRoZW4gdGhlIHRlbXBsYXRlIGZvciB0aGUgZm9ybWF0dGVkIG5hdGlvbmFsIG51bWJlci5cblxuICAgICAgaWYgKHN0YXRlLmludGVybmF0aW9uYWwpIHtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IHRoaXMuZ2V0SW50ZXJuYXRpb25hbFByZWZpeEJlZm9yZUNvdW50cnlDYWxsaW5nQ29kZShzdGF0ZSkucmVwbGFjZSgvW1xcZFxcK10vZywgRElHSVRfUExBQ0VIT0xERVIpICsgcmVwZWF0KERJR0lUX1BMQUNFSE9MREVSLCBzdGF0ZS5jYWxsaW5nQ29kZS5sZW5ndGgpICsgJyAnICsgdGVtcGxhdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgICB9XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICogR2VuZXJhdGVzIGZvcm1hdHRpbmcgdGVtcGxhdGUgZm9yIGEgbmF0aW9uYWwgcGhvbmUgbnVtYmVyLFxyXG4gICAgICogb3B0aW9uYWxseSBjb250YWluaW5nIGEgbmF0aW9uYWwgcHJlZml4LCBmb3IgYSBmb3JtYXQuXHJcbiAgICAgKiBAcGFyYW0gIHtGb3JtYXR9IGZvcm1hdFxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBuYXRpb25hbFByZWZpeFxyXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXRUZW1wbGF0ZUZvckZvcm1hdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUZW1wbGF0ZUZvckZvcm1hdChmb3JtYXQsIF9yZWY0KSB7XG4gICAgICB2YXIgbmF0aW9uYWxTaWduaWZpY2FudE51bWJlciA9IF9yZWY0Lm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIsXG4gICAgICAgICAgaW50ZXJuYXRpb25hbCA9IF9yZWY0LmludGVybmF0aW9uYWwsXG4gICAgICAgICAgbmF0aW9uYWxQcmVmaXggPSBfcmVmNC5uYXRpb25hbFByZWZpeCxcbiAgICAgICAgICBjb21wbGV4UHJlZml4QmVmb3JlTmF0aW9uYWxTaWduaWZpY2FudE51bWJlciA9IF9yZWY0LmNvbXBsZXhQcmVmaXhCZWZvcmVOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyO1xuICAgICAgdmFyIHBhdHRlcm4gPSBmb3JtYXQucGF0dGVybigpO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuICAgICAgaWYgKFNVUFBPUlRfTEVHQUNZX0ZPUk1BVFRJTkdfUEFUVEVSTlMpIHtcbiAgICAgICAgcGF0dGVybiA9IHBhdHRlcm4gLy8gUmVwbGFjZSBhbnl0aGluZyBpbiB0aGUgZm9ybSBvZiBbLi5dIHdpdGggXFxkXG4gICAgICAgIC5yZXBsYWNlKENSRUFURV9DSEFSQUNURVJfQ0xBU1NfUEFUVEVSTigpLCAnXFxcXGQnKSAvLyBSZXBsYWNlIGFueSBzdGFuZGFsb25lIGRpZ2l0IChub3QgdGhlIG9uZSBpbiBge31gKSB3aXRoIFxcZFxuICAgICAgICAucmVwbGFjZShDUkVBVEVfU1RBTkRBTE9ORV9ESUdJVF9QQVRURVJOKCksICdcXFxcZCcpO1xuICAgICAgfSAvLyBHZW5lcmF0ZSBhIGR1bW15IG5hdGlvbmFsIG51bWJlciAoY29uc2lzdGluZyBvZiBgOWBzKVxuICAgICAgLy8gdGhhdCBmaXRzIHRoaXMgZm9ybWF0J3MgYHBhdHRlcm5gLlxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgbWF0Y2ggd2lsbCBhbHdheXMgc3VjY2VlZCxcbiAgICAgIC8vIGJlY2F1c2UgdGhlIFwibG9uZ2VzdCBkdW1teSBwaG9uZSBudW1iZXJcIlxuICAgICAgLy8gaGFzIGVub3VnaCBsZW5ndGggdG8gYWNjb21vZGF0ZSBhbnkgcG9zc2libGVcbiAgICAgIC8vIG5hdGlvbmFsIHBob25lIG51bWJlciBmb3JtYXQgcGF0dGVybi5cbiAgICAgIC8vXG5cblxuICAgICAgdmFyIGRpZ2l0cyA9IExPTkdFU1RfRFVNTVlfUEhPTkVfTlVNQkVSLm1hdGNoKHBhdHRlcm4pWzBdOyAvLyBJZiB0aGUgbmF0aW9uYWwgbnVtYmVyIGVudGVyZWQgaXMgdG9vIGxvbmdcbiAgICAgIC8vIGZvciBhbnkgcGhvbmUgbnVtYmVyIGZvcm1hdCwgdGhlbiBhYm9ydC5cblxuICAgICAgaWYgKG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIubGVuZ3RoID4gZGlnaXRzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9IC8vIEdldCBhIGZvcm1hdHRpbmcgdGVtcGxhdGUgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZWZmaWNpZW50bHkgZm9ybWF0XG4gICAgICAvLyBhIHBhcnRpYWwgbnVtYmVyIHdoZXJlIGRpZ2l0cyBhcmUgYWRkZWQgb25lIGJ5IG9uZS5cbiAgICAgIC8vIEJlbG93IGBzdHJpY3RQYXR0ZXJuYCBpcyB1c2VkIGZvciB0aGVcbiAgICAgIC8vIHJlZ3VsYXIgZXhwcmVzc2lvbiAod2l0aCBgXmAgYW5kIGAkYCkuXG4gICAgICAvLyBUaGlzIHdhc24ndCBvcmlnaW5hbGx5IGluIEdvb2dsZSdzIGBsaWJwaG9uZW51bWJlcmBcbiAgICAgIC8vIGFuZCBJIGd1ZXNzIHRoZXkgZG9uJ3QgcmVhbGx5IG5lZWQgaXRcbiAgICAgIC8vIGJlY2F1c2UgdGhleSdyZSBub3QgdXNpbmcgXCJ0ZW1wbGF0ZXNcIiB0byBmb3JtYXQgcGhvbmUgbnVtYmVyc1xuICAgICAgLy8gYnV0IEkgYWRkZWQgYHN0cmljdFBhdHRlcm5gIGFmdGVyIGVuY291bnRlcmluZ1xuICAgICAgLy8gU291dGggS29yZWFuIHBob25lIG51bWJlciBmb3JtYXR0aW5nIGJ1Zy5cbiAgICAgIC8vXG4gICAgICAvLyBOb24tc3RyaWN0IHJlZ3VsYXIgZXhwcmVzc2lvbiBidWcgZGVtb25zdHJhdGlvbjpcbiAgICAgIC8vXG4gICAgICAvLyB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIgOiBgMTExMTExMTExYCAoOSBkaWdpdHMpXG4gICAgICAvL1xuICAgICAgLy8gcGF0dGVybiA6IChcXGR7Mn0pKFxcZHszLDR9KShcXGR7NH0pXG4gICAgICAvLyBmb3JtYXQgOiBgJDEgJDIgJDNgXG4gICAgICAvLyBkaWdpdHMgOiBgOTk5OTk5OTk5OWAgKDEwIGRpZ2l0cylcbiAgICAgIC8vXG4gICAgICAvLyAnOTk5OTk5OTk5OScucmVwbGFjZShuZXcgUmVnRXhwKC8oXFxkezJ9KShcXGR7Myw0fSkoXFxkezR9KS9nKSwgJyQxICQyICQzJykgPSBcIjk5IDk5OTkgOTk5OVwiXG4gICAgICAvL1xuICAgICAgLy8gdGVtcGxhdGUgOiB4eCB4eHh4IHh4eHhcbiAgICAgIC8vXG4gICAgICAvLyBCdXQgdGhlIGNvcnJlY3QgdGVtcGxhdGUgaW4gdGhpcyBjYXNlIGlzIGB4eCB4eHggeHh4eGAuXG4gICAgICAvLyBUaGUgdGVtcGxhdGUgd2FzIGdlbmVyYXRlZCBpbmNvcnJlY3RseSBiZWNhdXNlIG9mIHRoZVxuICAgICAgLy8gYHszLDR9YCB2YXJpYWJpbGl0eSBpbiB0aGUgYHBhdHRlcm5gLlxuICAgICAgLy9cbiAgICAgIC8vIFRoZSBmaXggaXMsIGlmIGB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJgIGhhcyBhbHJlYWR5IHN1ZmZpY2llbnQgbGVuZ3RoXG4gICAgICAvLyB0byBzYXRpc2Z5IHRoZSBgcGF0dGVybmAgY29tcGxldGVseSB0aGVuIGB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJgXG4gICAgICAvLyBpcyB1c2VkIGluc3RlYWQgb2YgYGRpZ2l0c2AuXG5cblxuICAgICAgdmFyIHN0cmljdFBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeJyArIHBhdHRlcm4gKyAnJCcpO1xuICAgICAgdmFyIG5hdGlvbmFsTnVtYmVyRHVtbXlEaWdpdHMgPSBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyLnJlcGxhY2UoL1xcZC9nLCBEVU1NWV9ESUdJVCk7IC8vIElmIGB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJgIGhhcyBhbHJlYWR5IHN1ZmZpY2llbnQgbGVuZ3RoXG4gICAgICAvLyB0byBzYXRpc2Z5IHRoZSBgcGF0dGVybmAgY29tcGxldGVseSB0aGVuIHVzZSBpdFxuICAgICAgLy8gaW5zdGVhZCBvZiBgZGlnaXRzYC5cblxuICAgICAgaWYgKHN0cmljdFBhdHRlcm4udGVzdChuYXRpb25hbE51bWJlckR1bW15RGlnaXRzKSkge1xuICAgICAgICBkaWdpdHMgPSBuYXRpb25hbE51bWJlckR1bW15RGlnaXRzO1xuICAgICAgfVxuXG4gICAgICB2YXIgbnVtYmVyRm9ybWF0ID0gdGhpcy5nZXRGb3JtYXRGb3JtYXQoZm9ybWF0LCBpbnRlcm5hdGlvbmFsKTtcbiAgICAgIHZhciBuYXRpb25hbFByZWZpeEluY2x1ZGVkSW5UZW1wbGF0ZTsgLy8gSWYgYSB1c2VyIGRpZCBpbnB1dCBhIG5hdGlvbmFsIHByZWZpeCAoYW5kIHRoYXQncyBndWFyYW50ZWVkKSxcbiAgICAgIC8vIGFuZCBpZiBhIGBmb3JtYXRgIGRvZXMgaGF2ZSBhIG5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGUsXG4gICAgICAvLyB0aGVuIHNlZSBpZiB0aGF0IG5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGVcbiAgICAgIC8vIHByZXBlbmRzIGV4YWN0bHkgdGhlIHNhbWUgbmF0aW9uYWwgcHJlZml4IHRoZSB1c2VyIGhhcyBpbnB1dC5cbiAgICAgIC8vIElmIHRoYXQncyB0aGUgY2FzZSwgdGhlbiB1c2UgdGhlIGBmb3JtYXRgIHdpdGggdGhlIG5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGUuXG4gICAgICAvLyBPdGhlcndpc2UsIHVzZSAgdGhlIGBmb3JtYXRgIHdpdGhvdXQgdGhlIG5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGUsXG4gICAgICAvLyBhbmQgcHJlcGVuZCBhIG5hdGlvbmFsIHByZWZpeCBtYW51YWxseSB0byBpdC5cblxuICAgICAgaWYgKHRoaXMuc2hvdWxkVHJ5TmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZShmb3JtYXQsIHtcbiAgICAgICAgaW50ZXJuYXRpb25hbDogaW50ZXJuYXRpb25hbCxcbiAgICAgICAgbmF0aW9uYWxQcmVmaXg6IG5hdGlvbmFsUHJlZml4XG4gICAgICB9KSkge1xuICAgICAgICB2YXIgbnVtYmVyRm9ybWF0V2l0aE5hdGlvbmFsUHJlZml4ID0gbnVtYmVyRm9ybWF0LnJlcGxhY2UoRklSU1RfR1JPVVBfUEFUVEVSTiwgZm9ybWF0Lm5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoKSk7IC8vIElmIGBuYXRpb25hbF9wcmVmaXhfZm9ybWF0dGluZ19ydWxlYCBvZiBhIGBmb3JtYXRgIHNpbXBseSBwcmVwZW5kc1xuICAgICAgICAvLyBuYXRpb25hbCBwcmVmaXggYXQgdGhlIHN0YXJ0IG9mIGEgbmF0aW9uYWwgKHNpZ25pZmljYW50KSBudW1iZXIsXG4gICAgICAgIC8vIHRoZW4gc3VjaCBmb3JtYXR0aW5nIGNhbiBiZSB1c2VkIHdpdGggYEFzWW91VHlwZWAgZm9ybWF0dGVyLlxuICAgICAgICAvLyBUaGVyZSBzZWVtcyB0byBiZSBubyBgZWxzZWAgY2FzZTogZXZlcnl3aGVyZSBpbiBtZXRhZGF0YSxcbiAgICAgICAgLy8gbmF0aW9uYWwgcHJlZml4IGZvcm1hdHRpbmcgcnVsZSBpcyBuYXRpb25hbCBwcmVmaXggKyAkMSxcbiAgICAgICAgLy8gb3IgYCgkMSlgLCBpbiB3aGljaCBjYXNlIHN1Y2ggZm9ybWF0IGlzbid0IGV2ZW4gY29uc2lkZXJlZFxuICAgICAgICAvLyB3aGVuIHRoZSB1c2VyIGhhcyBpbnB1dCBhIG5hdGlvbmFsIHByZWZpeC5cblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuXG4gICAgICAgIGlmIChwYXJzZURpZ2l0cyhmb3JtYXQubmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSgpKSA9PT0gKG5hdGlvbmFsUHJlZml4IHx8ICcnKSArIHBhcnNlRGlnaXRzKCckMScpKSB7XG4gICAgICAgICAgbnVtYmVyRm9ybWF0ID0gbnVtYmVyRm9ybWF0V2l0aE5hdGlvbmFsUHJlZml4O1xuICAgICAgICAgIG5hdGlvbmFsUHJlZml4SW5jbHVkZWRJblRlbXBsYXRlID0gdHJ1ZTsgLy8gUmVwbGFjZSBhbGwgZGlnaXRzIG9mIHRoZSBuYXRpb25hbCBwcmVmaXggaW4gdGhlIGZvcm1hdHRpbmcgdGVtcGxhdGVcbiAgICAgICAgICAvLyB3aXRoIGBESUdJVF9QTEFDRUhPTERFUmBzLlxuXG4gICAgICAgICAgaWYgKG5hdGlvbmFsUHJlZml4KSB7XG4gICAgICAgICAgICB2YXIgaSA9IG5hdGlvbmFsUHJlZml4Lmxlbmd0aDtcblxuICAgICAgICAgICAgd2hpbGUgKGkgPiAwKSB7XG4gICAgICAgICAgICAgIG51bWJlckZvcm1hdCA9IG51bWJlckZvcm1hdC5yZXBsYWNlKC9cXGQvLCBESUdJVF9QTEFDRUhPTERFUik7XG4gICAgICAgICAgICAgIGktLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gR2VuZXJhdGUgZm9ybWF0dGluZyB0ZW1wbGF0ZSBmb3IgdGhpcyBwaG9uZSBudW1iZXIgZm9ybWF0LlxuXG5cbiAgICAgIHZhciB0ZW1wbGF0ZSA9IGRpZ2l0cyAvLyBGb3JtYXQgdGhlIGR1bW15IHBob25lIG51bWJlciBhY2NvcmRpbmcgdG8gdGhlIGZvcm1hdC5cbiAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAocGF0dGVybiksIG51bWJlckZvcm1hdCkgLy8gUmVwbGFjZSBlYWNoIGR1bW15IGRpZ2l0IHdpdGggYSBESUdJVF9QTEFDRUhPTERFUi5cbiAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoRFVNTVlfRElHSVQsICdnJyksIERJR0lUX1BMQUNFSE9MREVSKTsgLy8gSWYgYSBwcmVmaXggb2YgYSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlciBpcyBub3QgYXMgc2ltcGxlXG4gICAgICAvLyBhcyBqdXN0IGEgYmFzaWMgbmF0aW9uYWwgcHJlZml4LCB0aGVuIGp1c3QgcHJlcGVuZCBzdWNoIHByZWZpeFxuICAgICAgLy8gYmVmb3JlIHRoZSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlciwgb3B0aW9uYWxseSBzcGFjaW5nXG4gICAgICAvLyB0aGUgdHdvIHdpdGggYSB3aGl0ZXNwYWNlLlxuXG4gICAgICBpZiAoIW5hdGlvbmFsUHJlZml4SW5jbHVkZWRJblRlbXBsYXRlKSB7XG4gICAgICAgIGlmIChjb21wbGV4UHJlZml4QmVmb3JlTmF0aW9uYWxTaWduaWZpY2FudE51bWJlcikge1xuICAgICAgICAgIC8vIFByZXBlbmQgdGhlIHByZWZpeCB0byB0aGUgdGVtcGxhdGUgbWFudWFsbHkuXG4gICAgICAgICAgdGVtcGxhdGUgPSByZXBlYXQoRElHSVRfUExBQ0VIT0xERVIsIGNvbXBsZXhQcmVmaXhCZWZvcmVOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyLmxlbmd0aCkgKyAnICcgKyB0ZW1wbGF0ZTtcbiAgICAgICAgfSBlbHNlIGlmIChuYXRpb25hbFByZWZpeCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgbmF0aW9uYWwgcHJlZml4IHRvIHRoZSB0ZW1wbGF0ZSBtYW51YWxseS5cbiAgICAgICAgICB0ZW1wbGF0ZSA9IHJlcGVhdChESUdJVF9QTEFDRUhPTERFUiwgbmF0aW9uYWxQcmVmaXgubGVuZ3RoKSArIHRoaXMuZ2V0U2VwYXJhdG9yQWZ0ZXJOYXRpb25hbFByZWZpeChmb3JtYXQpICsgdGVtcGxhdGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGludGVybmF0aW9uYWwpIHtcbiAgICAgICAgdGVtcGxhdGUgPSBhcHBseUludGVybmF0aW9uYWxTZXBhcmF0b3JTdHlsZSh0ZW1wbGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0ZW1wbGF0ZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZm9ybWF0TmV4dE5hdGlvbmFsTnVtYmVyRGlnaXRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdE5leHROYXRpb25hbE51bWJlckRpZ2l0cyhkaWdpdHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSBwb3B1bGF0ZVRlbXBsYXRlV2l0aERpZ2l0cyh0aGlzLnBvcHVsYXRlZE5hdGlvbmFsTnVtYmVyVGVtcGxhdGUsIHRoaXMucG9wdWxhdGVkTmF0aW9uYWxOdW1iZXJUZW1wbGF0ZVBvc2l0aW9uLCBkaWdpdHMpO1xuXG4gICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAvLyBSZXNldCB0aGUgZm9ybWF0LlxuICAgICAgICB0aGlzLnJlc2V0Rm9ybWF0KCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wb3B1bGF0ZWROYXRpb25hbE51bWJlclRlbXBsYXRlID0gcmVzdWx0WzBdO1xuICAgICAgdGhpcy5wb3B1bGF0ZWROYXRpb25hbE51bWJlclRlbXBsYXRlUG9zaXRpb24gPSByZXN1bHRbMV07IC8vIFJldHVybiB0aGUgZm9ybWF0dGVkIHBob25lIG51bWJlciBzbyBmYXIuXG5cbiAgICAgIHJldHVybiBjdXRBbmRTdHJpcE5vblBhaXJlZFBhcmVucyh0aGlzLnBvcHVsYXRlZE5hdGlvbmFsTnVtYmVyVGVtcGxhdGUsIHRoaXMucG9wdWxhdGVkTmF0aW9uYWxOdW1iZXJUZW1wbGF0ZVBvc2l0aW9uICsgMSk7IC8vIFRoZSBvbGQgd2F5IHdoaWNoIHdhcyBnb29kIGZvciBgaW5wdXQtZm9ybWF0YCBidXQgaXMgbm90IHNvIGdvb2RcbiAgICAgIC8vIGZvciBgcmVhY3QtcGhvbmUtbnVtYmVyLWlucHV0YCdzIGRlZmF1bHQgaW5wdXQgKGBJbnB1dEJhc2ljYCkuXG4gICAgICAvLyByZXR1cm4gY2xvc2VOb25QYWlyZWRQYXJlbnModGhpcy5wb3B1bGF0ZWROYXRpb25hbE51bWJlclRlbXBsYXRlLCB0aGlzLnBvcHVsYXRlZE5hdGlvbmFsTnVtYmVyVGVtcGxhdGVQb3NpdGlvbiArIDEpXG4gICAgICAvLyBcdC5yZXBsYWNlKG5ldyBSZWdFeHAoRElHSVRfUExBQ0VIT0xERVIsICdnJyksICcgJylcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic2hvdWxkVHJ5TmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzaG91bGRUcnlOYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlKGZvcm1hdCwgX3JlZjUpIHtcbiAgICAgIHZhciBpbnRlcm5hdGlvbmFsID0gX3JlZjUuaW50ZXJuYXRpb25hbCxcbiAgICAgICAgICBuYXRpb25hbFByZWZpeCA9IF9yZWY1Lm5hdGlvbmFsUHJlZml4O1xuXG4gICAgICBpZiAoZm9ybWF0Lm5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoKSkge1xuICAgICAgICAvLyBJbiBzb21lIGNvdW50cmllcywgYG5hdGlvbmFsX3ByZWZpeF9mb3JtYXR0aW5nX3J1bGVgIGlzIGAoJDEpYCxcbiAgICAgICAgLy8gc28gaXQgYXBwbGllcyBldmVuIGlmIHRoZSB1c2VyIGhhc24ndCBpbnB1dCBhIG5hdGlvbmFsIHByZWZpeC5cbiAgICAgICAgLy8gYGZvcm1hdC51c2VzTmF0aW9uYWxQcmVmaXgoKWAgZGV0ZWN0cyBzdWNoIGNhc2VzLlxuICAgICAgICB2YXIgdXNlc05hdGlvbmFsUHJlZml4ID0gZm9ybWF0LnVzZXNOYXRpb25hbFByZWZpeCgpO1xuXG4gICAgICAgIGlmICh1c2VzTmF0aW9uYWxQcmVmaXggJiYgbmF0aW9uYWxQcmVmaXggfHwgIXVzZXNOYXRpb25hbFByZWZpeCAmJiAhaW50ZXJuYXRpb25hbCkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEFzWW91VHlwZUZvcm1hdHRlcjtcbn0oKTtcblxuZXhwb3J0IHsgQXNZb3VUeXBlRm9ybWF0dGVyIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzWW91VHlwZUZvcm1hdHRlci5qcy5tYXAiLCJmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoaXQpIHJldHVybiAoaXQgPSBpdC5jYWxsKG8pKS5uZXh0LmJpbmQoaXQpOyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHJldHVybiBmdW5jdGlvbiAoKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuLy8gU2hvdWxkIGJlIHRoZSBzYW1lIGFzIGBESUdJVF9QTEFDRUhPTERFUmAgaW4gYGxpYnBob25lbnVtYmVyLW1ldGFkYXRhLWdlbmVyYXRvcmAuXG5leHBvcnQgdmFyIERJR0lUX1BMQUNFSE9MREVSID0gJ3gnOyAvLyAnXFx1MjAwOCcgKHB1bmN0dWF0aW9uIHNwYWNlKVxuXG52YXIgRElHSVRfUExBQ0VIT0xERVJfTUFUQ0hFUiA9IG5ldyBSZWdFeHAoRElHSVRfUExBQ0VIT0xERVIpOyAvLyBDb3VudHMgYWxsIG9jY3VyZW5jZXMgb2YgYSBzeW1ib2wgaW4gYSBzdHJpbmcuXG4vLyBVbmljb2RlLXVuc2FmZSAoYmVjYXVzZSB1c2luZyBgLnNwbGl0KClgKS5cblxuZXhwb3J0IGZ1bmN0aW9uIGNvdW50T2NjdXJlbmNlcyhzeW1ib2wsIHN0cmluZykge1xuICB2YXIgY291bnQgPSAwOyAvLyBVc2luZyBgLnNwbGl0KCcnKWAgdG8gaXRlcmF0ZSB0aHJvdWdoIGEgc3RyaW5nIGhlcmVcbiAgLy8gdG8gYXZvaWQgcmVxdWlyaW5nIGBTeW1ib2wuaXRlcmF0b3JgIHBvbHlmaWxsLlxuICAvLyBgLnNwbGl0KCcnKWAgaXMgZ2VuZXJhbGx5IG5vdCBzYWZlIGZvciBVbmljb2RlLFxuICAvLyBidXQgaW4gdGhpcyBwYXJ0aWN1bGFyIGNhc2UgZm9yIGNvdW50aW5nIGJyYWNrZXRzIGl0IGlzIHNhZmUuXG4gIC8vIGZvciAoY29uc3QgY2hhcmFjdGVyIG9mIHN0cmluZylcblxuICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHN0cmluZy5zcGxpdCgnJykpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgIHZhciBjaGFyYWN0ZXIgPSBfc3RlcC52YWx1ZTtcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IHN5bWJvbCkge1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY291bnQ7XG59IC8vIFJlcGVhdHMgYSBzdHJpbmcgKG9yIGEgc3ltYm9sKSBOIHRpbWVzLlxuLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDI2MDUvcmVwZWF0LXN0cmluZy1qYXZhc2NyaXB0XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCB0aW1lcykge1xuICBpZiAodGltZXMgPCAxKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9ICcnO1xuXG4gIHdoaWxlICh0aW1lcyA+IDEpIHtcbiAgICBpZiAodGltZXMgJiAxKSB7XG4gICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgIH1cblxuICAgIHRpbWVzID4+PSAxO1xuICAgIHN0cmluZyArPSBzdHJpbmc7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0ICsgc3RyaW5nO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGN1dEFuZFN0cmlwTm9uUGFpcmVkUGFyZW5zKHN0cmluZywgY3V0QmVmb3JlSW5kZXgpIHtcbiAgaWYgKHN0cmluZ1tjdXRCZWZvcmVJbmRleF0gPT09ICcpJykge1xuICAgIGN1dEJlZm9yZUluZGV4Kys7XG4gIH1cblxuICByZXR1cm4gc3RyaXBOb25QYWlyZWRQYXJlbnMoc3RyaW5nLnNsaWNlKDAsIGN1dEJlZm9yZUluZGV4KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xvc2VOb25QYWlyZWRQYXJlbnModGVtcGxhdGUsIGN1dF9iZWZvcmUpIHtcbiAgdmFyIHJldGFpbmVkX3RlbXBsYXRlID0gdGVtcGxhdGUuc2xpY2UoMCwgY3V0X2JlZm9yZSk7XG4gIHZhciBvcGVuaW5nX2JyYWNlcyA9IGNvdW50T2NjdXJlbmNlcygnKCcsIHJldGFpbmVkX3RlbXBsYXRlKTtcbiAgdmFyIGNsb3NpbmdfYnJhY2VzID0gY291bnRPY2N1cmVuY2VzKCcpJywgcmV0YWluZWRfdGVtcGxhdGUpO1xuICB2YXIgZGFuZ2xpbmdfYnJhY2VzID0gb3BlbmluZ19icmFjZXMgLSBjbG9zaW5nX2JyYWNlcztcblxuICB3aGlsZSAoZGFuZ2xpbmdfYnJhY2VzID4gMCAmJiBjdXRfYmVmb3JlIDwgdGVtcGxhdGUubGVuZ3RoKSB7XG4gICAgaWYgKHRlbXBsYXRlW2N1dF9iZWZvcmVdID09PSAnKScpIHtcbiAgICAgIGRhbmdsaW5nX2JyYWNlcy0tO1xuICAgIH1cblxuICAgIGN1dF9iZWZvcmUrKztcbiAgfVxuXG4gIHJldHVybiB0ZW1wbGF0ZS5zbGljZSgwLCBjdXRfYmVmb3JlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcE5vblBhaXJlZFBhcmVucyhzdHJpbmcpIHtcbiAgdmFyIGRhbmdsaW5nX2JyYWNlcyA9IFtdO1xuICB2YXIgaSA9IDA7XG5cbiAgd2hpbGUgKGkgPCBzdHJpbmcubGVuZ3RoKSB7XG4gICAgaWYgKHN0cmluZ1tpXSA9PT0gJygnKSB7XG4gICAgICBkYW5nbGluZ19icmFjZXMucHVzaChpKTtcbiAgICB9IGVsc2UgaWYgKHN0cmluZ1tpXSA9PT0gJyknKSB7XG4gICAgICBkYW5nbGluZ19icmFjZXMucG9wKCk7XG4gICAgfVxuXG4gICAgaSsrO1xuICB9XG5cbiAgdmFyIHN0YXJ0ID0gMDtcbiAgdmFyIGNsZWFyZWRfc3RyaW5nID0gJyc7XG4gIGRhbmdsaW5nX2JyYWNlcy5wdXNoKHN0cmluZy5sZW5ndGgpO1xuXG4gIGZvciAodmFyIF9pID0gMCwgX2RhbmdsaW5nX2JyYWNlcyA9IGRhbmdsaW5nX2JyYWNlczsgX2kgPCBfZGFuZ2xpbmdfYnJhY2VzLmxlbmd0aDsgX2krKykge1xuICAgIHZhciBpbmRleCA9IF9kYW5nbGluZ19icmFjZXNbX2ldO1xuICAgIGNsZWFyZWRfc3RyaW5nICs9IHN0cmluZy5zbGljZShzdGFydCwgaW5kZXgpO1xuICAgIHN0YXJ0ID0gaW5kZXggKyAxO1xuICB9XG5cbiAgcmV0dXJuIGNsZWFyZWRfc3RyaW5nO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcHVsYXRlVGVtcGxhdGVXaXRoRGlnaXRzKHRlbXBsYXRlLCBwb3NpdGlvbiwgZGlnaXRzKSB7XG4gIC8vIFVzaW5nIGAuc3BsaXQoJycpYCB0byBpdGVyYXRlIHRocm91Z2ggYSBzdHJpbmcgaGVyZVxuICAvLyB0byBhdm9pZCByZXF1aXJpbmcgYFN5bWJvbC5pdGVyYXRvcmAgcG9seWZpbGwuXG4gIC8vIGAuc3BsaXQoJycpYCBpcyBnZW5lcmFsbHkgbm90IHNhZmUgZm9yIFVuaWNvZGUsXG4gIC8vIGJ1dCBpbiB0aGlzIHBhcnRpY3VsYXIgY2FzZSBmb3IgYGRpZ2l0c2AgaXQgaXMgc2FmZS5cbiAgLy8gZm9yIChjb25zdCBkaWdpdCBvZiBkaWdpdHMpXG4gIGZvciAodmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKGRpZ2l0cy5zcGxpdCgnJykpLCBfc3RlcDI7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMigpKS5kb25lOykge1xuICAgIHZhciBkaWdpdCA9IF9zdGVwMi52YWx1ZTtcblxuICAgIC8vIElmIHRoZXJlIGlzIHJvb20gZm9yIG1vcmUgZGlnaXRzIGluIGN1cnJlbnQgYHRlbXBsYXRlYCxcbiAgICAvLyB0aGVuIHNldCB0aGUgbmV4dCBkaWdpdCBpbiB0aGUgYHRlbXBsYXRlYCxcbiAgICAvLyBhbmQgcmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGlnaXRzIHNvIGZhci5cbiAgICAvLyBJZiBtb3JlIGRpZ2l0cyBhcmUgZW50ZXJlZCB0aGFuIHRoZSBjdXJyZW50IGZvcm1hdCBjb3VsZCBoYW5kbGUuXG4gICAgaWYgKHRlbXBsYXRlLnNsaWNlKHBvc2l0aW9uICsgMSkuc2VhcmNoKERJR0lUX1BMQUNFSE9MREVSX01BVENIRVIpIDwgMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHBvc2l0aW9uID0gdGVtcGxhdGUuc2VhcmNoKERJR0lUX1BMQUNFSE9MREVSX01BVENIRVIpO1xuICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShESUdJVF9QTEFDRUhPTERFUl9NQVRDSEVSLCBkaWdpdCk7XG4gIH1cblxuICByZXR1cm4gW3RlbXBsYXRlLCBwb3NpdGlvbl07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Bc1lvdVR5cGVGb3JtYXR0ZXIudXRpbC5qcy5tYXAiLCJmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IF9leHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlIGZyb20gJy4vaGVscGVycy9leHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlLmpzJztcbmltcG9ydCBleHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlRnJvbUludGVybmF0aW9uYWxOdW1iZXJXaXRob3V0UGx1c1NpZ24gZnJvbSAnLi9oZWxwZXJzL2V4dHJhY3RDb3VudHJ5Q2FsbGluZ0NvZGVGcm9tSW50ZXJuYXRpb25hbE51bWJlcldpdGhvdXRQbHVzU2lnbi5qcyc7XG5pbXBvcnQgZXh0cmFjdE5hdGlvbmFsTnVtYmVyRnJvbVBvc3NpYmx5SW5jb21wbGV0ZU51bWJlciBmcm9tICcuL2hlbHBlcnMvZXh0cmFjdE5hdGlvbmFsTnVtYmVyRnJvbVBvc3NpYmx5SW5jb21wbGV0ZU51bWJlci5qcyc7XG5pbXBvcnQgc3RyaXBJZGRQcmVmaXggZnJvbSAnLi9oZWxwZXJzL3N0cmlwSWRkUHJlZml4LmpzJztcbmltcG9ydCBwYXJzZURpZ2l0cyBmcm9tICcuL2hlbHBlcnMvcGFyc2VEaWdpdHMuanMnO1xuaW1wb3J0IHsgVkFMSURfRElHSVRTLCBWQUxJRF9QVU5DVFVBVElPTiwgUExVU19DSEFSUyB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbnZhciBWQUxJRF9GT1JNQVRURURfUEhPTkVfTlVNQkVSX0RJR0lUU19QQVJUID0gJ1snICsgVkFMSURfUFVOQ1RVQVRJT04gKyBWQUxJRF9ESUdJVFMgKyAnXSsnO1xudmFyIFZBTElEX0ZPUk1BVFRFRF9QSE9ORV9OVU1CRVJfRElHSVRTX1BBUlRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoJ14nICsgVkFMSURfRk9STUFUVEVEX1BIT05FX05VTUJFUl9ESUdJVFNfUEFSVCArICckJywgJ2knKTtcbnZhciBWQUxJRF9GT1JNQVRURURfUEhPTkVfTlVNQkVSX1BBUlQgPSAnKD86JyArICdbJyArIFBMVVNfQ0hBUlMgKyAnXScgKyAnWycgKyBWQUxJRF9QVU5DVFVBVElPTiArIFZBTElEX0RJR0lUUyArICddKicgKyAnfCcgKyAnWycgKyBWQUxJRF9QVU5DVFVBVElPTiArIFZBTElEX0RJR0lUUyArICddKycgKyAnKSc7XG52YXIgQUZURVJfUEhPTkVfTlVNQkVSX0RJR0lUU19FTkRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoJ1teJyArIFZBTElEX1BVTkNUVUFUSU9OICsgVkFMSURfRElHSVRTICsgJ10rJyArICcuKicgKyAnJCcpOyAvLyBUZXN0cyB3aGV0aGVyIGBuYXRpb25hbF9wcmVmaXhfZm9yX3BhcnNpbmdgIGNvdWxkIG1hdGNoXG4vLyBkaWZmZXJlbnQgbmF0aW9uYWwgcHJlZml4ZXMuXG4vLyBNYXRjaGVzIGFueXRoaW5nIHRoYXQncyBub3QgYSBkaWdpdCBvciBhIHNxdWFyZSBicmFja2V0LlxuXG52YXIgQ09NUExFWF9OQVRJT05BTF9QUkVGSVggPSAvW15cXGRcXFtcXF1dLztcblxudmFyIEFzWW91VHlwZVBhcnNlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEFzWW91VHlwZVBhcnNlcihfcmVmKSB7XG4gICAgdmFyIGRlZmF1bHRDb3VudHJ5ID0gX3JlZi5kZWZhdWx0Q291bnRyeSxcbiAgICAgICAgZGVmYXVsdENhbGxpbmdDb2RlID0gX3JlZi5kZWZhdWx0Q2FsbGluZ0NvZGUsXG4gICAgICAgIG1ldGFkYXRhID0gX3JlZi5tZXRhZGF0YSxcbiAgICAgICAgb25OYXRpb25hbFNpZ25pZmljYW50TnVtYmVyQ2hhbmdlID0gX3JlZi5vbk5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJDaGFuZ2U7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQXNZb3VUeXBlUGFyc2VyKTtcblxuICAgIHRoaXMuZGVmYXVsdENvdW50cnkgPSBkZWZhdWx0Q291bnRyeTtcbiAgICB0aGlzLmRlZmF1bHRDYWxsaW5nQ29kZSA9IGRlZmF1bHRDYWxsaW5nQ29kZTtcbiAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgdGhpcy5vbk5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJDaGFuZ2UgPSBvbk5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJDaGFuZ2U7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoQXNZb3VUeXBlUGFyc2VyLCBbe1xuICAgIGtleTogXCJpbnB1dFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpbnB1dCh0ZXh0LCBzdGF0ZSkge1xuICAgICAgdmFyIF9leHRyYWN0Rm9ybWF0dGVkRGlnaSA9IGV4dHJhY3RGb3JtYXR0ZWREaWdpdHNBbmRQbHVzKHRleHQpLFxuICAgICAgICAgIF9leHRyYWN0Rm9ybWF0dGVkRGlnaTIgPSBfc2xpY2VkVG9BcnJheShfZXh0cmFjdEZvcm1hdHRlZERpZ2ksIDIpLFxuICAgICAgICAgIGZvcm1hdHRlZERpZ2l0cyA9IF9leHRyYWN0Rm9ybWF0dGVkRGlnaTJbMF0sXG4gICAgICAgICAgaGFzUGx1cyA9IF9leHRyYWN0Rm9ybWF0dGVkRGlnaTJbMV07XG5cbiAgICAgIHZhciBkaWdpdHMgPSBwYXJzZURpZ2l0cyhmb3JtYXR0ZWREaWdpdHMpOyAvLyBDaGVja3MgZm9yIGEgc3BlY2lhbCBjYXNlOiBqdXN0IGEgbGVhZGluZyBgK2AgaGFzIGJlZW4gZW50ZXJlZC5cblxuICAgICAgdmFyIGp1c3RMZWFkaW5nUGx1cztcblxuICAgICAgaWYgKGhhc1BsdXMpIHtcbiAgICAgICAgaWYgKCFzdGF0ZS5kaWdpdHMpIHtcbiAgICAgICAgICBzdGF0ZS5zdGFydEludGVybmF0aW9uYWxOdW1iZXIoKTtcblxuICAgICAgICAgIGlmICghZGlnaXRzKSB7XG4gICAgICAgICAgICBqdXN0TGVhZGluZ1BsdXMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGlnaXRzKSB7XG4gICAgICAgIHRoaXMuaW5wdXREaWdpdHMoZGlnaXRzLCBzdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGRpZ2l0czogZGlnaXRzLFxuICAgICAgICBqdXN0TGVhZGluZ1BsdXM6IGp1c3RMZWFkaW5nUGx1c1xuICAgICAgfTtcbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBJbnB1dHMgXCJuZXh0XCIgcGhvbmUgbnVtYmVyIGRpZ2l0cy5cclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gZGlnaXRzXHJcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFtmb3JtYXR0ZWROdW1iZXJdIEZvcm1hdHRlZCBuYXRpb25hbCBwaG9uZSBudW1iZXIgKGlmIGl0IGNhbiBiZSBmb3JtYXR0ZWQgYXQgdGhpcyBzdGFnZSkuIFJldHVybmluZyBgdW5kZWZpbmVkYCBtZWFucyBcImRvbid0IGZvcm1hdCB0aGUgbmF0aW9uYWwgcGhvbmUgbnVtYmVyIGF0IHRoaXMgc3RhZ2VcIi5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiaW5wdXREaWdpdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5wdXREaWdpdHMobmV4dERpZ2l0cywgc3RhdGUpIHtcbiAgICAgIHZhciBkaWdpdHMgPSBzdGF0ZS5kaWdpdHM7XG4gICAgICB2YXIgaGFzUmVjZWl2ZWRUaHJlZUxlYWRpbmdEaWdpdHMgPSBkaWdpdHMubGVuZ3RoIDwgMyAmJiBkaWdpdHMubGVuZ3RoICsgbmV4dERpZ2l0cy5sZW5ndGggPj0gMzsgLy8gQXBwZW5kIHBob25lIG51bWJlciBkaWdpdHMuXG5cbiAgICAgIHN0YXRlLmFwcGVuZERpZ2l0cyhuZXh0RGlnaXRzKTsgLy8gQXR0ZW1wdCB0byBleHRyYWN0IElERCBwcmVmaXg6XG4gICAgICAvLyBTb21lIHVzZXJzIGlucHV0IHRoZWlyIHBob25lIG51bWJlciBpbiBpbnRlcm5hdGlvbmFsIGZvcm1hdCxcbiAgICAgIC8vIGJ1dCBpbiBhbiBcIm91dC1vZi1jb3VudHJ5XCIgZGlhbGluZyBmb3JtYXQgaW5zdGVhZCBvZiB1c2luZyB0aGUgbGVhZGluZyBgK2AuXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2F0YW1waGV0YW1pbmUvbGlicGhvbmVudW1iZXItanMvaXNzdWVzLzE4NVxuICAgICAgLy8gRGV0ZWN0IHN1Y2ggbnVtYmVycyBhcyBzb29uIGFzIHRoZXJlJ3JlIGF0IGxlYXN0IDMgZGlnaXRzLlxuICAgICAgLy8gR29vZ2xlJ3MgbGlicmFyeSBhdHRlbXB0cyB0byBleHRyYWN0IElERCBwcmVmaXggYXQgMyBkaWdpdHMsXG4gICAgICAvLyBzbyB0aGlzIGxpYnJhcnkganVzdCBjb3BpZXMgdGhhdCBiZWhhdmlvci5cbiAgICAgIC8vIEkgZ3Vlc3MgdGhhdCdzIGJlY2F1c2UgdGhlIG1vc3QgY29tbW90IElERCBwcmVmaXhlcyBhcmVcbiAgICAgIC8vIGAwMGAgKEV1cm9wZSkgYW5kIGAwMTFgIChVUykuXG4gICAgICAvLyBUaGVyZSBleGlzdCByZWFsbHkgbG9uZyBJREQgcHJlZml4ZXMgdG9vOlxuICAgICAgLy8gZm9yIGV4YW1wbGUsIGluIEF1c3RyYWxpYSB0aGUgZGVmYXVsdCBJREQgcHJlZml4IGlzIGAwMDExYCxcbiAgICAgIC8vIGFuZCBpdCBjb3VsZCBldmVuIGJlIGFzIGxvbmcgYXMgYDE0ODgwMDExYC5cbiAgICAgIC8vIEFuIElERCBwcmVmaXggaXMgZXh0cmFjdGVkIGhlcmUsIGFuZCB0aGVuIGV2ZXJ5IHRpbWUgd2hlblxuICAgICAgLy8gdGhlcmUncyBhIG5ldyBkaWdpdCBhbmQgdGhlIG51bWJlciBjb3VsZG4ndCBiZSBmb3JtYXR0ZWQuXG5cbiAgICAgIGlmIChoYXNSZWNlaXZlZFRocmVlTGVhZGluZ0RpZ2l0cykge1xuICAgICAgICB0aGlzLmV4dHJhY3RJZGRQcmVmaXgoc3RhdGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1dhaXRpbmdGb3JDb3VudHJ5Q2FsbGluZ0NvZGUoc3RhdGUpKSB7XG4gICAgICAgIGlmICghdGhpcy5leHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlKHN0YXRlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhdGUuYXBwZW5kTmF0aW9uYWxTaWduaWZpY2FudE51bWJlckRpZ2l0cyhuZXh0RGlnaXRzKTtcbiAgICAgIH0gLy8gSWYgYSBwaG9uZSBudW1iZXIgaXMgYmVpbmcgaW5wdXQgaW4gaW50ZXJuYXRpb25hbCBmb3JtYXQsXG4gICAgICAvLyB0aGVuIGl0J3Mgbm90IHZhbGlkIGZvciBpdCB0byBoYXZlIGEgbmF0aW9uYWwgcHJlZml4LlxuICAgICAgLy8gU3RpbGwsIHNvbWUgcGVvcGxlIGluY29ycmVjdGx5IGlucHV0IHN1Y2ggbnVtYmVycyB3aXRoIGEgbmF0aW9uYWwgcHJlZml4LlxuICAgICAgLy8gSW4gc3VjaCBjYXNlcywgb25seSBhdHRlbXB0IHRvIHN0cmlwIGEgbmF0aW9uYWwgcHJlZml4IGlmIHRoZSBudW1iZXIgYmVjb21lcyB0b28gbG9uZy5cbiAgICAgIC8vIChidXQgdGhhdCBpcyBkb25lIGxhdGVyLCBub3QgaGVyZSlcblxuXG4gICAgICBpZiAoIXN0YXRlLmludGVybmF0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0V4dHJhY3RlZE5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIpIHtcbiAgICAgICAgICB0aGlzLmV4dHJhY3ROYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKHN0YXRlLmdldE5hdGlvbmFsRGlnaXRzKCksIGZ1bmN0aW9uIChzdGF0ZVVwZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlLnVwZGF0ZShzdGF0ZVVwZGF0ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNXYWl0aW5nRm9yQ291bnRyeUNhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzV2FpdGluZ0ZvckNvdW50cnlDYWxsaW5nQ29kZShfcmVmMikge1xuICAgICAgdmFyIGludGVybmF0aW9uYWwgPSBfcmVmMi5pbnRlcm5hdGlvbmFsLFxuICAgICAgICAgIGNhbGxpbmdDb2RlID0gX3JlZjIuY2FsbGluZ0NvZGU7XG4gICAgICByZXR1cm4gaW50ZXJuYXRpb25hbCAmJiAhY2FsbGluZ0NvZGU7XG4gICAgfSAvLyBFeHRyYWN0cyBhIGNvdW50cnkgY2FsbGluZyBjb2RlIGZyb20gYSBudW1iZXJcbiAgICAvLyBiZWluZyBlbnRlcmVkIGluIGludGVybmF0b25hbCBmb3JtYXQuXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RDb3VudHJ5Q2FsbGluZ0NvZGUoc3RhdGUpIHtcbiAgICAgIHZhciBfZXh0cmFjdENvdW50cnlDYWxsaW4gPSBfZXh0cmFjdENvdW50cnlDYWxsaW5nQ29kZSgnKycgKyBzdGF0ZS5nZXREaWdpdHNXaXRob3V0SW50ZXJuYXRpb25hbFByZWZpeCgpLCB0aGlzLmRlZmF1bHRDb3VudHJ5LCB0aGlzLmRlZmF1bHRDYWxsaW5nQ29kZSwgdGhpcy5tZXRhZGF0YS5tZXRhZGF0YSksXG4gICAgICAgICAgY291bnRyeUNhbGxpbmdDb2RlID0gX2V4dHJhY3RDb3VudHJ5Q2FsbGluLmNvdW50cnlDYWxsaW5nQ29kZSxcbiAgICAgICAgICBudW1iZXIgPSBfZXh0cmFjdENvdW50cnlDYWxsaW4ubnVtYmVyO1xuXG4gICAgICBpZiAoY291bnRyeUNhbGxpbmdDb2RlKSB7XG4gICAgICAgIHN0YXRlLnNldENhbGxpbmdDb2RlKGNvdW50cnlDYWxsaW5nQ29kZSk7XG4gICAgICAgIHN0YXRlLnVwZGF0ZSh7XG4gICAgICAgICAgbmF0aW9uYWxTaWduaWZpY2FudE51bWJlcjogbnVtYmVyXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwicmVzZXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQobnVtYmVyaW5nUGxhbikge1xuICAgICAgaWYgKG51bWJlcmluZ1BsYW4pIHtcbiAgICAgICAgdGhpcy5oYXNTZWxlY3RlZE51bWJlcmluZ1BsYW4gPSB0cnVlO1xuXG4gICAgICAgIHZhciBuYXRpb25hbFByZWZpeEZvclBhcnNpbmcgPSBudW1iZXJpbmdQbGFuLl9uYXRpb25hbFByZWZpeEZvclBhcnNpbmcoKTtcblxuICAgICAgICB0aGlzLmNvdWxkUG9zc2libHlFeHRyYWN0QW5vdGhlck5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIgPSBuYXRpb25hbFByZWZpeEZvclBhcnNpbmcgJiYgQ09NUExFWF9OQVRJT05BTF9QUkVGSVgudGVzdChuYXRpb25hbFByZWZpeEZvclBhcnNpbmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5oYXNTZWxlY3RlZE51bWJlcmluZ1BsYW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuY291bGRQb3NzaWJseUV4dHJhY3RBbm90aGVyTmF0aW9uYWxTaWduaWZpY2FudE51bWJlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgLyoqXHJcbiAgICAgKiBFeHRyYWN0cyBhIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIGZyb20gdXNlciBpbnB1dC5cclxuICAgICAqIEdvb2dsZSdzIGxpYnJhcnkgaXMgZGlmZmVyZW50IGluIHRoYXQgaXQgb25seSBhcHBsaWVzIGBuYXRpb25hbF9wcmVmaXhfZm9yX3BhcnNpbmdgXHJcbiAgICAgKiBhbmQgZG9lc24ndCBhcHBseSBgbmF0aW9uYWxfcHJlZml4X3RyYW5zZm9ybV9ydWxlYCBhZnRlciB0aGF0LlxyXG4gICAgICogaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9saWJwaG9uZW51bWJlci9ibG9iL2EzZDcwYjA0ODc4NzU0NzVlNmFkNjU5YWY0MDQ5NDMyMTFkMjY0NTYvamF2YS9saWJwaG9uZW51bWJlci9zcmMvY29tL2dvb2dsZS9pMThuL3Bob25lbnVtYmVycy9Bc1lvdVR5cGVGb3JtYXR0ZXIuamF2YSNMNTM5XHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBbZXh0cmFjdGVkXVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0TmF0aW9uYWxTaWduaWZpY2FudE51bWJlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0TmF0aW9uYWxTaWduaWZpY2FudE51bWJlcihuYXRpb25hbERpZ2l0cywgc2V0U3RhdGUpIHtcbiAgICAgIGlmICghdGhpcy5oYXNTZWxlY3RlZE51bWJlcmluZ1BsYW4pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgX2V4dHJhY3ROYXRpb25hbE51bWJlID0gZXh0cmFjdE5hdGlvbmFsTnVtYmVyRnJvbVBvc3NpYmx5SW5jb21wbGV0ZU51bWJlcihuYXRpb25hbERpZ2l0cywgdGhpcy5tZXRhZGF0YSksXG4gICAgICAgICAgbmF0aW9uYWxQcmVmaXggPSBfZXh0cmFjdE5hdGlvbmFsTnVtYmUubmF0aW9uYWxQcmVmaXgsXG4gICAgICAgICAgbmF0aW9uYWxOdW1iZXIgPSBfZXh0cmFjdE5hdGlvbmFsTnVtYmUubmF0aW9uYWxOdW1iZXIsXG4gICAgICAgICAgY2FycmllckNvZGUgPSBfZXh0cmFjdE5hdGlvbmFsTnVtYmUuY2FycmllckNvZGU7XG5cbiAgICAgIGlmIChuYXRpb25hbE51bWJlciA9PT0gbmF0aW9uYWxEaWdpdHMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLm9uRXh0cmFjdGVkTmF0aW9uYWxOdW1iZXIobmF0aW9uYWxQcmVmaXgsIGNhcnJpZXJDb2RlLCBuYXRpb25hbE51bWJlciwgbmF0aW9uYWxEaWdpdHMsIHNldFN0YXRlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIEluIEdvb2dsZSdzIGNvZGUgdGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgXCJhdHRlbXB0IHRvIGV4dHJhY3QgbG9uZ2VyIE5ERFwiLlxyXG4gICAgICogXCJTb21lIG5hdGlvbmFsIHByZWZpeGVzIGFyZSBhIHN1YnN0cmluZyBvZiBvdGhlcnNcIiwgdGhleSBzYXkuXHJcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBbcmVzdWx0XSDigJQgUmV0dXJucyBgdHJ1ZWAgaWYgZXh0cmFjdGluZyBhIG5hdGlvbmFsIHByZWZpeCBwcm9kdWNlZCBkaWZmZXJlbnQgcmVzdWx0cyBmcm9tIHdoYXQgdGhleSB3ZXJlLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0QW5vdGhlck5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0cmFjdEFub3RoZXJOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKG5hdGlvbmFsRGlnaXRzLCBwcmV2TmF0aW9uYWxTaWduaWZpY2FudE51bWJlciwgc2V0U3RhdGUpIHtcbiAgICAgIGlmICghdGhpcy5oYXNFeHRyYWN0ZWROYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dHJhY3ROYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKG5hdGlvbmFsRGlnaXRzLCBzZXRTdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5jb3VsZFBvc3NpYmx5RXh0cmFjdEFub3RoZXJOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIF9leHRyYWN0TmF0aW9uYWxOdW1iZTIgPSBleHRyYWN0TmF0aW9uYWxOdW1iZXJGcm9tUG9zc2libHlJbmNvbXBsZXRlTnVtYmVyKG5hdGlvbmFsRGlnaXRzLCB0aGlzLm1ldGFkYXRhKSxcbiAgICAgICAgICBuYXRpb25hbFByZWZpeCA9IF9leHRyYWN0TmF0aW9uYWxOdW1iZTIubmF0aW9uYWxQcmVmaXgsXG4gICAgICAgICAgbmF0aW9uYWxOdW1iZXIgPSBfZXh0cmFjdE5hdGlvbmFsTnVtYmUyLm5hdGlvbmFsTnVtYmVyLFxuICAgICAgICAgIGNhcnJpZXJDb2RlID0gX2V4dHJhY3ROYXRpb25hbE51bWJlMi5jYXJyaWVyQ29kZTsgLy8gSWYgYSBuYXRpb25hbCBwcmVmaXggaGFzIGJlZW4gZXh0cmFjdGVkIHByZXZpb3VzbHksXG4gICAgICAvLyB0aGVuIGl0J3MgYWx3YXlzIGV4dHJhY3RlZCBhcyBhZGRpdGlvbmFsIGRpZ2l0cyBhcmUgYWRkZWQuXG4gICAgICAvLyBUaGF0J3MgYXNzdW1pbmcgYGV4dHJhY3ROYXRpb25hbE51bWJlckZyb21Qb3NzaWJseUluY29tcGxldGVOdW1iZXIoKWBcbiAgICAgIC8vIGRvZXNuJ3QgZG8gYW55dGhpbmcgZGlmZmVyZW50IGZyb20gd2hhdCBpdCBjdXJyZW50bHkgZG9lcy5cbiAgICAgIC8vIFNvLCBqdXN0IGluIGNhc2UsIGhlcmUncyB0aGlzIGNoZWNrLCB0aG91Z2ggaXQgZG9lc24ndCBvY2N1ci5cblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cblxuICAgICAgaWYgKG5hdGlvbmFsTnVtYmVyID09PSBwcmV2TmF0aW9uYWxTaWduaWZpY2FudE51bWJlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMub25FeHRyYWN0ZWROYXRpb25hbE51bWJlcihuYXRpb25hbFByZWZpeCwgY2FycmllckNvZGUsIG5hdGlvbmFsTnVtYmVyLCBuYXRpb25hbERpZ2l0cywgc2V0U3RhdGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm9uRXh0cmFjdGVkTmF0aW9uYWxOdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gb25FeHRyYWN0ZWROYXRpb25hbE51bWJlcihuYXRpb25hbFByZWZpeCwgY2FycmllckNvZGUsIG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIsIG5hdGlvbmFsRGlnaXRzLCBzZXRTdGF0ZSkge1xuICAgICAgdmFyIGNvbXBsZXhQcmVmaXhCZWZvcmVOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyO1xuICAgICAgdmFyIG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJNYXRjaGVzSW5wdXQ7IC8vIFRoaXMgY2hlY2sgYWxzbyB3b3JrcyB3aXRoIGVtcHR5IGB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJgLlxuXG4gICAgICB2YXIgbmF0aW9uYWxTaWduaWZpY2FudE51bWJlckluZGV4ID0gbmF0aW9uYWxEaWdpdHMubGFzdEluZGV4T2YobmF0aW9uYWxTaWduaWZpY2FudE51bWJlcik7IC8vIElmIHRoZSBleHRyYWN0ZWQgbmF0aW9uYWwgKHNpZ25pZmljYW50KSBudW1iZXIgaXMgdGhlXG4gICAgICAvLyBsYXN0IHN1YnN0cmluZyBvZiB0aGUgYGRpZ2l0c2AsIHRoZW4gaXQgbWVhbnMgdGhhdCBpdCBoYXNuJ3QgYmVlbiBhbHRlcmVkOlxuICAgICAgLy8gbm8gZGlnaXRzIGhhdmUgYmVlbiByZW1vdmVkIGZyb20gdGhlIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyXG4gICAgICAvLyB3aGlsZSBhcHBseWluZyBgbmF0aW9uYWxfcHJlZml4X3RyYW5zZm9ybV9ydWxlYC5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0bGFiLmNvbS9jYXRhbXBoZXRhbWluZS9saWJwaG9uZW51bWJlci1qcy8tL2Jsb2IvbWFzdGVyL01FVEFEQVRBLm1kI25hdGlvbmFsX3ByZWZpeF9mb3JfcGFyc2luZy0tbmF0aW9uYWxfcHJlZml4X3RyYW5zZm9ybV9ydWxlXG5cbiAgICAgIGlmIChuYXRpb25hbFNpZ25pZmljYW50TnVtYmVySW5kZXggPj0gMCAmJiBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVySW5kZXggPT09IG5hdGlvbmFsRGlnaXRzLmxlbmd0aCAtIG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIubGVuZ3RoKSB7XG4gICAgICAgIG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJNYXRjaGVzSW5wdXQgPSB0cnVlOyAvLyBJZiBhIHByZWZpeCBvZiBhIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIGlzIG5vdCBhcyBzaW1wbGVcbiAgICAgICAgLy8gYXMganVzdCBhIGJhc2ljIG5hdGlvbmFsIHByZWZpeCwgdGhlbiBzdWNoIHByZWZpeCBpcyBzdG9yZWQgaW5cbiAgICAgICAgLy8gYHRoaXMuY29tcGxleFByZWZpeEJlZm9yZU5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJgIHByb3BlcnR5IGFuZCB3aWxsIGJlXG4gICAgICAgIC8vIHByZXBlbmRlZCBcImFzIGlzXCIgdG8gdGhlIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIHRvIHByb2R1Y2VcbiAgICAgICAgLy8gYSBmb3JtYXR0ZWQgcmVzdWx0LlxuXG4gICAgICAgIHZhciBwcmVmaXhCZWZvcmVOYXRpb25hbE51bWJlciA9IG5hdGlvbmFsRGlnaXRzLnNsaWNlKDAsIG5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJJbmRleCk7IC8vIGBwcmVmaXhCZWZvcmVOYXRpb25hbE51bWJlcmAgaXMgYWx3YXlzIG5vbi1lbXB0eSxcbiAgICAgICAgLy8gYmVjYXVzZSBgb25FeHRyYWN0ZWROYXRpb25hbE51bWJlcigpYCBpc24ndCBjYWxsZWRcbiAgICAgICAgLy8gd2hlbiBhIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIGhhc24ndCBiZWVuIGFjdHVhbGx5IFwiZXh0cmFjdGVkXCI6XG4gICAgICAgIC8vIHdoZW4gYSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlciBpcyBlcXVhbCB0byB0aGUgbmF0aW9uYWwgcGFydCBvZiBgZGlnaXRzYCxcbiAgICAgICAgLy8gdGhlbiBgb25FeHRyYWN0ZWROYXRpb25hbE51bWJlcigpYCBkb2Vzbid0IGdldCBjYWxsZWQuXG5cbiAgICAgICAgaWYgKHByZWZpeEJlZm9yZU5hdGlvbmFsTnVtYmVyICE9PSBuYXRpb25hbFByZWZpeCkge1xuICAgICAgICAgIGNvbXBsZXhQcmVmaXhCZWZvcmVOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyID0gcHJlZml4QmVmb3JlTmF0aW9uYWxOdW1iZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBuYXRpb25hbFByZWZpeDogbmF0aW9uYWxQcmVmaXgsXG4gICAgICAgIGNhcnJpZXJDb2RlOiBjYXJyaWVyQ29kZSxcbiAgICAgICAgbmF0aW9uYWxTaWduaWZpY2FudE51bWJlcjogbmF0aW9uYWxTaWduaWZpY2FudE51bWJlcixcbiAgICAgICAgbmF0aW9uYWxTaWduaWZpY2FudE51bWJlck1hdGNoZXNJbnB1dDogbmF0aW9uYWxTaWduaWZpY2FudE51bWJlck1hdGNoZXNJbnB1dCxcbiAgICAgICAgY29tcGxleFByZWZpeEJlZm9yZU5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXI6IGNvbXBsZXhQcmVmaXhCZWZvcmVOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyXG4gICAgICB9KTsgLy8gYG9uRXh0cmFjdGVkTmF0aW9uYWxOdW1iZXIoKWAgaXMgb25seSBjYWxsZWQgd2hlblxuICAgICAgLy8gdGhlIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIGFjdHVhbGx5IGRpZCBjaGFuZ2UuXG5cbiAgICAgIHRoaXMuaGFzRXh0cmFjdGVkTmF0aW9uYWxTaWduaWZpY2FudE51bWJlciA9IHRydWU7XG4gICAgICB0aGlzLm9uTmF0aW9uYWxTaWduaWZpY2FudE51bWJlckNoYW5nZSgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJyZUV4dHJhY3ROYXRpb25hbFNpZ25pZmljYW50TnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlRXh0cmFjdE5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIoc3RhdGUpIHtcbiAgICAgIC8vIEF0dGVtcHQgdG8gZXh0cmFjdCBhIG5hdGlvbmFsIHByZWZpeC5cbiAgICAgIC8vXG4gICAgICAvLyBTb21lIHBlb3BsZSBpbmNvcnJlY3RseSBpbnB1dCBuYXRpb25hbCBwcmVmaXhcbiAgICAgIC8vIGluIGFuIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVyLlxuICAgICAgLy8gRm9yIGV4YW1wbGUsIHNvbWUgcGVvcGxlIHdyaXRlIEJyaXRpc2ggcGhvbmUgbnVtYmVycyBhcyBgKzQ0KDApLi4uYC5cbiAgICAgIC8vXG4gICAgICAvLyBBbHNvLCBpbiBzb21lIHJhcmUgY2FzZXMsIGl0IGlzIHZhbGlkIGZvciBhIG5hdGlvbmFsIHByZWZpeFxuICAgICAgLy8gdG8gYmUgYSBwYXJ0IG9mIGFuIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVyLlxuICAgICAgLy8gRm9yIGV4YW1wbGUsIG1vYmlsZSBwaG9uZSBudW1iZXJzIGluIE1leGljbyBhcmUgc3VwcG9zZWQgdG8gYmVcbiAgICAgIC8vIGRpYWxsZWQgaW50ZXJuYXRpb25hbGx5IHVzaW5nIGEgYDFgIG5hdGlvbmFsIHByZWZpeCxcbiAgICAgIC8vIHNvIHRoZSBuYXRpb25hbCBwcmVmaXggd2lsbCBiZSBwYXJ0IG9mIGFuIGludGVybmF0aW9uYWwgbnVtYmVyLlxuICAgICAgLy9cbiAgICAgIC8vIFF1b3RlIGZyb206XG4gICAgICAvLyBodHRwczovL3d3dy5tZXhwZXJpZW5jZS5jb20vZGlhbGluZy1jZWxsLXBob25lcy1pbi1tZXhpY28vXG4gICAgICAvL1xuICAgICAgLy8gXCJEaWFsaW5nIGEgTWV4aWNhbiBjZWxsIHBob25lIGZyb20gYWJyb2FkXG4gICAgICAvLyBXaGVuIHlvdSBhcmUgY2FsbGluZyBhIGNlbGwgcGhvbmUgbnVtYmVyIGluIE1leGljbyBmcm9tIG91dHNpZGUgTWV4aWNvLFxuICAgICAgLy8gaXTigJlzIG5lY2Vzc2FyeSB0byBkaWFsIGFuIGFkZGl0aW9uYWwg4oCcMeKAnSBhZnRlciBNZXhpY2/igJlzIGNvdW50cnkgY29kZVxuICAgICAgLy8gKHdoaWNoIGlzIOKAnDUy4oCdKSBhbmQgYmVmb3JlIHRoZSBhcmVhIGNvZGUuXG4gICAgICAvLyBZb3UgYWxzbyBpZ25vcmUgdGhlIDA0NSwgYW5kIHNpbXBseSBkaWFsIHRoZSBhcmVhIGNvZGUgYW5kIHRoZVxuICAgICAgLy8gY2VsbCBwaG9uZeKAmXMgbnVtYmVyLlxuICAgICAgLy9cbiAgICAgIC8vIElmIHlvdSBkb27igJl0IGFkZCB0aGUg4oCcMeKAnSwgeW914oCZbGwgcmVjZWl2ZSBhIHJlY29yZGVkIGFubm91bmNlbWVudFxuICAgICAgLy8gYXNraW5nIHlvdSB0byByZWRpYWwgdXNpbmcgaXQuXG4gICAgICAvL1xuICAgICAgLy8gRm9yIGV4YW1wbGUsIGlmIHlvdSBhcmUgY2FsbGluZyBmcm9tIHRoZSBVU0EgdG8gYSBjZWxsIHBob25lXG4gICAgICAvLyBpbiBNZXhpY28gQ2l0eSwgeW91IHdvdWxkIGRpYWwgKzUyIOKAkyAxIOKAkyA1NSDigJMgMTIzNCA1Njc4LlxuICAgICAgLy8gKE5vdGUgdGhhdCB0aGlzIGlzIGRpZmZlcmVudCB0byBjYWxsaW5nIGEgbGFuZCBsaW5lIGluIE1leGljbyBDaXR5XG4gICAgICAvLyBmcm9tIGFicm9hZCwgd2hlcmUgdGhlIG51bWJlciBkaWFsZWQgd291bGQgYmUgKzUyIOKAkyA1NSDigJMgMTIzNCA1Njc4KVwiLlxuICAgICAgLy9cbiAgICAgIC8vIEdvb2dsZSdzIGRlbW8gb3V0cHV0OlxuICAgICAgLy8gaHR0cHM6Ly9saWJwaG9uZW51bWJlci5hcHBzcG90LmNvbS9waG9uZW51bWJlcnBhcnNlcj9udW1iZXI9JTJiNTIxNTUxMjM0NTY3OCZjb3VudHJ5PU1YXG4gICAgICAvL1xuICAgICAgaWYgKHRoaXMuZXh0cmFjdEFub3RoZXJOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKHN0YXRlLmdldE5hdGlvbmFsRGlnaXRzKCksIHN0YXRlLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIsIGZ1bmN0aW9uIChzdGF0ZVVwZGF0ZSkge1xuICAgICAgICByZXR1cm4gc3RhdGUudXBkYXRlKHN0YXRlVXBkYXRlKTtcbiAgICAgIH0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSAvLyBJZiBubyBmb3JtYXQgbWF0Y2hlcyB0aGUgcGhvbmUgbnVtYmVyLCB0aGVuIGl0IGNvdWxkIGJlXG4gICAgICAvLyBcImEgcmVhbGx5IGxvbmcgSUREXCIgKHF1b3RlIGZyb20gYSBjb21tZW50IGluIEdvb2dsZSdzIGxpYnJhcnkpLlxuICAgICAgLy8gQW4gSUREIHByZWZpeCBpcyBmaXJzdCBleHRyYWN0ZWQgd2hlbiB0aGUgdXNlciBoYXMgZW50ZXJlZCBhdCBsZWFzdCAzIGRpZ2l0cyxcbiAgICAgIC8vIGFuZCB0aGVuIGhlcmUg4oCUIGV2ZXJ5IHRpbWUgd2hlbiB0aGVyZSdzIGEgbmV3IGRpZ2l0IGFuZCB0aGUgbnVtYmVyXG4gICAgICAvLyBjb3VsZG4ndCBiZSBmb3JtYXR0ZWQuXG4gICAgICAvLyBGb3IgZXhhbXBsZSwgaW4gQXVzdHJhbGlhIHRoZSBkZWZhdWx0IElERCBwcmVmaXggaXMgYDAwMTFgLFxuICAgICAgLy8gYW5kIGl0IGNvdWxkIGV2ZW4gYmUgYXMgbG9uZyBhcyBgMTQ4ODAwMTFgLlxuICAgICAgLy9cbiAgICAgIC8vIENvdWxkIGFsc28gY2hlY2sgYCFoYXNSZWNlaXZlZFRocmVlTGVhZGluZ0RpZ2l0c2AgaGVyZVxuICAgICAgLy8gdG8gZmlsdGVyIG91dCB0aGUgY2FzZSB3aGVuIHRoaXMgY2hlY2sgZHVwbGljYXRlcyB0aGUgb25lXG4gICAgICAvLyBhbHJlYWR5IHBlcmZvcm1lZCB3aGVuIHRoZXJlJ3JlIDMgbGVhZGluZyBkaWdpdHMsXG4gICAgICAvLyBidXQgaXQncyBub3QgYSBiaWcgZGVhbCwgYW5kIGluIG1vc3QgY2FzZXMgdGhlcmVcbiAgICAgIC8vIHdpbGwgYmUgYSBzdWl0YWJsZSBgZm9ybWF0YCB3aGVuIHRoZXJlJ3JlIDMgbGVhZGluZyBkaWdpdHMuXG4gICAgICAvL1xuXG5cbiAgICAgIGlmICh0aGlzLmV4dHJhY3RJZGRQcmVmaXgoc3RhdGUpKSB7XG4gICAgICAgIHRoaXMuZXh0cmFjdENhbGxpbmdDb2RlQW5kTmF0aW9uYWxTaWduaWZpY2FudE51bWJlcihzdGF0ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSAvLyBHb29nbGUncyBBc1lvdVR5cGUgZm9ybWF0dGVyIHN1cHBvcnRzIHNvcnQgb2YgYW4gXCJhdXRvY29ycmVjdGlvblwiIGZlYXR1cmVcbiAgICAgIC8vIHdoZW4gaXQgXCJhdXRvY29ycmVjdHNcIiBudW1iZXJzIHRoYXQgaGF2ZSBiZWVuIGlucHV0IGZvciBhIGNvdW50cnlcbiAgICAgIC8vIHdpdGggdGhhdCBjb3VudHJ5J3MgY2FsbGluZyBjb2RlLlxuICAgICAgLy8gU3VjaCBcImF1dG9jb3JyZWN0aW9uXCIgZmVhdHVyZSBsb29rcyB3ZWlyZCwgYnV0IGRpZmZlcmVudCBwZW9wbGUgaGF2ZSBiZWVuIHJlcXVlc3RpbmcgaXQ6XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2F0YW1waGV0YW1pbmUvbGlicGhvbmVudW1iZXItanMvaXNzdWVzLzM3NlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2NhdGFtcGhldGFtaW5lL2xpYnBob25lbnVtYmVyLWpzL2lzc3Vlcy8zNzVcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRhbXBoZXRhbWluZS9saWJwaG9uZW51bWJlci1qcy9pc3N1ZXMvMzE2XG5cblxuICAgICAgaWYgKHRoaXMuZml4TWlzc2luZ1BsdXMoc3RhdGUpKSB7XG4gICAgICAgIHRoaXMuZXh0cmFjdENhbGxpbmdDb2RlQW5kTmF0aW9uYWxTaWduaWZpY2FudE51bWJlcihzdGF0ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJleHRyYWN0SWRkUHJlZml4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RJZGRQcmVmaXgoc3RhdGUpIHtcbiAgICAgIC8vIEFuIElERCBwcmVmaXggY2FuJ3QgYmUgcHJlc2VudCBpbiBhIG51bWJlciB3cml0dGVuIHdpdGggYSBgK2AuXG4gICAgICAvLyBBbHNvLCBkb24ndCByZS1leHRyYWN0IGFuIElERCBwcmVmaXggaWYgaGFzIGFscmVhZHkgYmVlbiBleHRyYWN0ZWQuXG4gICAgICB2YXIgaW50ZXJuYXRpb25hbCA9IHN0YXRlLmludGVybmF0aW9uYWwsXG4gICAgICAgICAgSUREUHJlZml4ID0gc3RhdGUuSUREUHJlZml4LFxuICAgICAgICAgIGRpZ2l0cyA9IHN0YXRlLmRpZ2l0cyxcbiAgICAgICAgICBuYXRpb25hbFNpZ25pZmljYW50TnVtYmVyID0gc3RhdGUubmF0aW9uYWxTaWduaWZpY2FudE51bWJlcjtcblxuICAgICAgaWYgKGludGVybmF0aW9uYWwgfHwgSUREUHJlZml4KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gU29tZSB1c2VycyBpbnB1dCB0aGVpciBwaG9uZSBudW1iZXIgaW4gXCJvdXQtb2YtY291bnRyeVwiXG4gICAgICAvLyBkaWFsaW5nIGZvcm1hdCBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBsZWFkaW5nIGArYC5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRhbXBoZXRhbWluZS9saWJwaG9uZW51bWJlci1qcy9pc3N1ZXMvMTg1XG4gICAgICAvLyBEZXRlY3Qgc3VjaCBudW1iZXJzLlxuXG5cbiAgICAgIHZhciBudW1iZXJXaXRob3V0SUREID0gc3RyaXBJZGRQcmVmaXgoZGlnaXRzLCB0aGlzLmRlZmF1bHRDb3VudHJ5LCB0aGlzLmRlZmF1bHRDYWxsaW5nQ29kZSwgdGhpcy5tZXRhZGF0YS5tZXRhZGF0YSk7XG5cbiAgICAgIGlmIChudW1iZXJXaXRob3V0SUREICE9PSB1bmRlZmluZWQgJiYgbnVtYmVyV2l0aG91dElERCAhPT0gZGlnaXRzKSB7XG4gICAgICAgIC8vIElmIGFuIElERCBwcmVmaXggd2FzIHN0cmlwcGVkIHRoZW4gY29udmVydCB0aGUgSURELXByZWZpeGVkIG51bWJlclxuICAgICAgICAvLyB0byBpbnRlcm5hdGlvbmFsIG51bWJlciBmb3Igc3Vic2VxdWVudCBwYXJzaW5nLlxuICAgICAgICBzdGF0ZS51cGRhdGUoe1xuICAgICAgICAgIElERFByZWZpeDogZGlnaXRzLnNsaWNlKDAsIGRpZ2l0cy5sZW5ndGggLSBudW1iZXJXaXRob3V0SURELmxlbmd0aClcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RhcnRJbnRlcm5hdGlvbmFsTnVtYmVyKHN0YXRlLCB7XG4gICAgICAgICAgY291bnRyeTogdW5kZWZpbmVkLFxuICAgICAgICAgIGNhbGxpbmdDb2RlOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmaXhNaXNzaW5nUGx1c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmaXhNaXNzaW5nUGx1cyhzdGF0ZSkge1xuICAgICAgaWYgKCFzdGF0ZS5pbnRlcm5hdGlvbmFsKSB7XG4gICAgICAgIHZhciBfZXh0cmFjdENvdW50cnlDYWxsaW4yID0gZXh0cmFjdENvdW50cnlDYWxsaW5nQ29kZUZyb21JbnRlcm5hdGlvbmFsTnVtYmVyV2l0aG91dFBsdXNTaWduKHN0YXRlLmRpZ2l0cywgdGhpcy5kZWZhdWx0Q291bnRyeSwgdGhpcy5kZWZhdWx0Q2FsbGluZ0NvZGUsIHRoaXMubWV0YWRhdGEubWV0YWRhdGEpLFxuICAgICAgICAgICAgbmV3Q2FsbGluZ0NvZGUgPSBfZXh0cmFjdENvdW50cnlDYWxsaW4yLmNvdW50cnlDYWxsaW5nQ29kZSxcbiAgICAgICAgICAgIG51bWJlciA9IF9leHRyYWN0Q291bnRyeUNhbGxpbjIubnVtYmVyO1xuXG4gICAgICAgIGlmIChuZXdDYWxsaW5nQ29kZSkge1xuICAgICAgICAgIHN0YXRlLnVwZGF0ZSh7XG4gICAgICAgICAgICBtaXNzaW5nUGx1czogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuc3RhcnRJbnRlcm5hdGlvbmFsTnVtYmVyKHN0YXRlLCB7XG4gICAgICAgICAgICBjb3VudHJ5OiBzdGF0ZS5jb3VudHJ5LFxuICAgICAgICAgICAgY2FsbGluZ0NvZGU6IG5ld0NhbGxpbmdDb2RlXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwic3RhcnRJbnRlcm5hdGlvbmFsTnVtYmVyXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0SW50ZXJuYXRpb25hbE51bWJlcihzdGF0ZSwgX3JlZjMpIHtcbiAgICAgIHZhciBjb3VudHJ5ID0gX3JlZjMuY291bnRyeSxcbiAgICAgICAgICBjYWxsaW5nQ29kZSA9IF9yZWYzLmNhbGxpbmdDb2RlO1xuICAgICAgc3RhdGUuc3RhcnRJbnRlcm5hdGlvbmFsTnVtYmVyKGNvdW50cnksIGNhbGxpbmdDb2RlKTsgLy8gSWYgYSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlciBoYXMgYmVlbiBleHRyYWN0ZWQgYmVmb3JlLCByZXNldCBpdC5cblxuICAgICAgaWYgKHN0YXRlLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIpIHtcbiAgICAgICAgc3RhdGUucmVzZXROYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKCk7XG4gICAgICAgIHRoaXMub25OYXRpb25hbFNpZ25pZmljYW50TnVtYmVyQ2hhbmdlKCk7XG4gICAgICAgIHRoaXMuaGFzRXh0cmFjdGVkTmF0aW9uYWxTaWduaWZpY2FudE51bWJlciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXh0cmFjdENhbGxpbmdDb2RlQW5kTmF0aW9uYWxTaWduaWZpY2FudE51bWJlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleHRyYWN0Q2FsbGluZ0NvZGVBbmROYXRpb25hbFNpZ25pZmljYW50TnVtYmVyKHN0YXRlKSB7XG4gICAgICBpZiAodGhpcy5leHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlKHN0YXRlKSkge1xuICAgICAgICAvLyBgdGhpcy5leHRyYWN0Q2FsbGluZ0NvZGUoKWAgaXMgY3VycmVudGx5IGNhbGxlZCB3aGVuIHRoZSBudW1iZXJcbiAgICAgICAgLy8gY291bGRuJ3QgYmUgZm9ybWF0dGVkIGR1cmluZyB0aGUgc3RhbmRhcmQgcHJvY2VkdXJlLlxuICAgICAgICAvLyBOb3JtYWxseSwgdGhlIG5hdGlvbmFsIHByZWZpeCB3b3VsZCBiZSByZS1leHRyYWN0ZWRcbiAgICAgICAgLy8gZm9yIGFuIGludGVybmF0aW9uYWwgbnVtYmVyIGlmIHN1Y2ggbnVtYmVyIGNvdWxkbid0IGJlIGZvcm1hdHRlZCxcbiAgICAgICAgLy8gYnV0IHNpbmNlIGl0J3MgYWxyZWFkeSBub3QgYWJsZSB0byBiZSBmb3JtYXR0ZWQsXG4gICAgICAgIC8vIHRoZXJlIHdvbid0IGJlIHlldCBhbm90aGVyIHJldHJ5LCBzbyBhbHNvIGV4dHJhY3QgbmF0aW9uYWwgcHJlZml4IGhlcmUuXG4gICAgICAgIHRoaXMuZXh0cmFjdE5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIoc3RhdGUuZ2V0TmF0aW9uYWxEaWdpdHMoKSwgZnVuY3Rpb24gKHN0YXRlVXBkYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLnVwZGF0ZShzdGF0ZVVwZGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBBc1lvdVR5cGVQYXJzZXI7XG59KCk7XG4vKipcclxuICogRXh0cmFjdHMgZm9ybWF0dGVkIHBob25lIG51bWJlciBmcm9tIHRleHQgKGlmIHRoZXJlJ3MgYW55KS5cclxuICogQHBhcmFtICB7c3RyaW5nfSB0ZXh0XHJcbiAqIEByZXR1cm4ge3N0cmluZ30gW2Zvcm1hdHRlZFBob25lTnVtYmVyXVxyXG4gKi9cblxuXG5leHBvcnQgeyBBc1lvdVR5cGVQYXJzZXIgYXMgZGVmYXVsdCB9O1xuXG5mdW5jdGlvbiBleHRyYWN0Rm9ybWF0dGVkUGhvbmVOdW1iZXIodGV4dCkge1xuICAvLyBBdHRlbXB0IHRvIGV4dHJhY3QgYSBwb3NzaWJsZSBudW1iZXIgZnJvbSB0aGUgc3RyaW5nIHBhc3NlZCBpbi5cbiAgdmFyIHN0YXJ0c0F0ID0gdGV4dC5zZWFyY2goVkFMSURfRk9STUFUVEVEX1BIT05FX05VTUJFUl9QQVJUKTtcblxuICBpZiAoc3RhcnRzQXQgPCAwKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIFRyaW0gZXZlcnl0aGluZyB0byB0aGUgbGVmdCBvZiB0aGUgcGhvbmUgbnVtYmVyLlxuXG5cbiAgdGV4dCA9IHRleHQuc2xpY2Uoc3RhcnRzQXQpOyAvLyBUcmltIHRoZSBgK2AuXG5cbiAgdmFyIGhhc1BsdXM7XG5cbiAgaWYgKHRleHRbMF0gPT09ICcrJykge1xuICAgIGhhc1BsdXMgPSB0cnVlO1xuICAgIHRleHQgPSB0ZXh0LnNsaWNlKCcrJy5sZW5ndGgpO1xuICB9IC8vIFRyaW0gZXZlcnl0aGluZyB0byB0aGUgcmlnaHQgb2YgdGhlIHBob25lIG51bWJlci5cblxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoQUZURVJfUEhPTkVfTlVNQkVSX0RJR0lUU19FTkRfUEFUVEVSTiwgJycpOyAvLyBSZS1hZGQgdGhlIHByZXZpb3VzbHkgdHJpbW1lZCBgK2AuXG5cbiAgaWYgKGhhc1BsdXMpIHtcbiAgICB0ZXh0ID0gJysnICsgdGV4dDtcbiAgfVxuXG4gIHJldHVybiB0ZXh0O1xufVxuLyoqXHJcbiAqIEV4dHJhY3RzIGZvcm1hdHRlZCBwaG9uZSBudW1iZXIgZGlnaXRzIChhbmQgYSBgK2ApIGZyb20gdGV4dCAoaWYgdGhlcmUncmUgYW55KS5cclxuICogQHBhcmFtICB7c3RyaW5nfSB0ZXh0XHJcbiAqIEByZXR1cm4ge2FueVtdfVxyXG4gKi9cblxuXG5mdW5jdGlvbiBfZXh0cmFjdEZvcm1hdHRlZERpZ2l0c0FuZFBsdXModGV4dCkge1xuICAvLyBFeHRyYWN0IGEgZm9ybWF0dGVkIHBob25lIG51bWJlciBwYXJ0IGZyb20gdGV4dC5cbiAgdmFyIGV4dHJhY3RlZE51bWJlciA9IGV4dHJhY3RGb3JtYXR0ZWRQaG9uZU51bWJlcih0ZXh0KSB8fCAnJzsgLy8gVHJpbSBhIGArYC5cblxuICBpZiAoZXh0cmFjdGVkTnVtYmVyWzBdID09PSAnKycpIHtcbiAgICByZXR1cm4gW2V4dHJhY3RlZE51bWJlci5zbGljZSgnKycubGVuZ3RoKSwgdHJ1ZV07XG4gIH1cblxuICByZXR1cm4gW2V4dHJhY3RlZE51bWJlcl07XG59XG4vKipcclxuICogRXh0cmFjdHMgZm9ybWF0dGVkIHBob25lIG51bWJlciBkaWdpdHMgKGFuZCBhIGArYCkgZnJvbSB0ZXh0IChpZiB0aGVyZSdyZSBhbnkpLlxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRleHRcclxuICogQHJldHVybiB7YW55W119XHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0Rm9ybWF0dGVkRGlnaXRzQW5kUGx1cyh0ZXh0KSB7XG4gIHZhciBfZXh0cmFjdEZvcm1hdHRlZERpZ2kzID0gX2V4dHJhY3RGb3JtYXR0ZWREaWdpdHNBbmRQbHVzKHRleHQpLFxuICAgICAgX2V4dHJhY3RGb3JtYXR0ZWREaWdpNCA9IF9zbGljZWRUb0FycmF5KF9leHRyYWN0Rm9ybWF0dGVkRGlnaTMsIDIpLFxuICAgICAgZm9ybWF0dGVkRGlnaXRzID0gX2V4dHJhY3RGb3JtYXR0ZWREaWdpNFswXSxcbiAgICAgIGhhc1BsdXMgPSBfZXh0cmFjdEZvcm1hdHRlZERpZ2k0WzFdOyAvLyBJZiB0aGUgZXh0cmFjdGVkIHBob25lIG51bWJlciBwYXJ0XG4gIC8vIGNhbiBwb3NzaWJseSBiZSBhIHBhcnQgb2Ygc29tZSB2YWxpZCBwaG9uZSBudW1iZXJcbiAgLy8gdGhlbiBwYXJzZSBwaG9uZSBudW1iZXIgY2hhcmFjdGVycyBmcm9tIGEgZm9ybWF0dGVkIHBob25lIG51bWJlci5cblxuXG4gIGlmICghVkFMSURfRk9STUFUVEVEX1BIT05FX05VTUJFUl9ESUdJVFNfUEFSVF9QQVRURVJOLnRlc3QoZm9ybWF0dGVkRGlnaXRzKSkge1xuICAgIGZvcm1hdHRlZERpZ2l0cyA9ICcnO1xuICB9XG5cbiAgcmV0dXJuIFtmb3JtYXR0ZWREaWdpdHMsIGhhc1BsdXNdO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXNZb3VUeXBlUGFyc2VyLmpzLm1hcCIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxudmFyIEFzWW91VHlwZVN0YXRlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gQXNZb3VUeXBlU3RhdGUoX3JlZikge1xuICAgIHZhciBvbkNvdW50cnlDaGFuZ2UgPSBfcmVmLm9uQ291bnRyeUNoYW5nZSxcbiAgICAgICAgb25DYWxsaW5nQ29kZUNoYW5nZSA9IF9yZWYub25DYWxsaW5nQ29kZUNoYW5nZTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBBc1lvdVR5cGVTdGF0ZSk7XG5cbiAgICB0aGlzLm9uQ291bnRyeUNoYW5nZSA9IG9uQ291bnRyeUNoYW5nZTtcbiAgICB0aGlzLm9uQ2FsbGluZ0NvZGVDaGFuZ2UgPSBvbkNhbGxpbmdDb2RlQ2hhbmdlO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKEFzWW91VHlwZVN0YXRlLCBbe1xuICAgIGtleTogXCJyZXNldFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldChfcmVmMikge1xuICAgICAgdmFyIGNvdW50cnkgPSBfcmVmMi5jb3VudHJ5LFxuICAgICAgICAgIGNhbGxpbmdDb2RlID0gX3JlZjIuY2FsbGluZ0NvZGU7XG4gICAgICB0aGlzLmludGVybmF0aW9uYWwgPSBmYWxzZTtcbiAgICAgIHRoaXMuSUREUHJlZml4ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5taXNzaW5nUGx1cyA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuY2FsbGluZ0NvZGUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRpZ2l0cyA9ICcnO1xuICAgICAgdGhpcy5yZXNldE5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIoKTtcbiAgICAgIHRoaXMuaW5pdENvdW50cnlBbmRDYWxsaW5nQ29kZShjb3VudHJ5LCBjYWxsaW5nQ29kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInJlc2V0TmF0aW9uYWxTaWduaWZpY2FudE51bWJlclwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldE5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIoKSB7XG4gICAgICB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXIgPSB0aGlzLmdldE5hdGlvbmFsRGlnaXRzKCk7XG4gICAgICB0aGlzLm5hdGlvbmFsU2lnbmlmaWNhbnROdW1iZXJNYXRjaGVzSW5wdXQgPSB0cnVlO1xuICAgICAgdGhpcy5uYXRpb25hbFByZWZpeCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuY2FycmllckNvZGUgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmNvbXBsZXhQcmVmaXhCZWZvcmVOYXRpb25hbFNpZ25pZmljYW50TnVtYmVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgIGZvciAodmFyIF9pID0gMCwgX09iamVjdCRrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyk7IF9pIDwgX09iamVjdCRrZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIga2V5ID0gX09iamVjdCRrZXlzW19pXTtcbiAgICAgICAgdGhpc1trZXldID0gcHJvcGVydGllc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpbml0Q291bnRyeUFuZENhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRDb3VudHJ5QW5kQ2FsbGluZ0NvZGUoY291bnRyeSwgY2FsbGluZ0NvZGUpIHtcbiAgICAgIHRoaXMuc2V0Q291bnRyeShjb3VudHJ5KTtcbiAgICAgIHRoaXMuc2V0Q2FsbGluZ0NvZGUoY2FsbGluZ0NvZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRDb3VudHJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldENvdW50cnkoY291bnRyeSkge1xuICAgICAgdGhpcy5jb3VudHJ5ID0gY291bnRyeTtcbiAgICAgIHRoaXMub25Db3VudHJ5Q2hhbmdlKGNvdW50cnkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZXRDYWxsaW5nQ29kZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDYWxsaW5nQ29kZShjYWxsaW5nQ29kZSkge1xuICAgICAgdGhpcy5jYWxsaW5nQ29kZSA9IGNhbGxpbmdDb2RlO1xuICAgICAgdGhpcy5vbkNhbGxpbmdDb2RlQ2hhbmdlKGNhbGxpbmdDb2RlLCB0aGlzLmNvdW50cnkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzdGFydEludGVybmF0aW9uYWxOdW1iZXJcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRJbnRlcm5hdGlvbmFsTnVtYmVyKGNvdW50cnksIGNhbGxpbmdDb2RlKSB7XG4gICAgICAvLyBQcmVwZW5kIHRoZSBgK2AgdG8gcGFyc2VkIGlucHV0LlxuICAgICAgdGhpcy5pbnRlcm5hdGlvbmFsID0gdHJ1ZTsgLy8gSWYgYSBkZWZhdWx0IGNvdW50cnkgd2FzIHNldCB0aGVuIHJlc2V0IGl0XG4gICAgICAvLyBiZWNhdXNlIGFuIGV4cGxpY2l0bHkgaW50ZXJuYXRpb25hbCBwaG9uZVxuICAgICAgLy8gbnVtYmVyIGlzIGJlaW5nIGVudGVyZWQuXG5cbiAgICAgIHRoaXMuaW5pdENvdW50cnlBbmRDYWxsaW5nQ29kZShjb3VudHJ5LCBjYWxsaW5nQ29kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImFwcGVuZERpZ2l0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmREaWdpdHMobmV4dERpZ2l0cykge1xuICAgICAgdGhpcy5kaWdpdHMgKz0gbmV4dERpZ2l0cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiYXBwZW5kTmF0aW9uYWxTaWduaWZpY2FudE51bWJlckRpZ2l0c1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBlbmROYXRpb25hbFNpZ25pZmljYW50TnVtYmVyRGlnaXRzKG5leHREaWdpdHMpIHtcbiAgICAgIHRoaXMubmF0aW9uYWxTaWduaWZpY2FudE51bWJlciArPSBuZXh0RGlnaXRzO1xuICAgIH1cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgdGhlIHBhcnQgb2YgYHRoaXMuZGlnaXRzYCB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBuYXRpb25hbCBudW1iZXIuXHJcbiAgICAgKiBCYXNpY2FsbHksIGFsbCBkaWdpdHMgdGhhdCBoYXZlIGJlZW4gaW5wdXQgYnkgdGhlIHVzZXIsIGV4Y2VwdCBmb3IgdGhlXHJcbiAgICAgKiBpbnRlcm5hdGlvbmFsIHByZWZpeCBhbmQgdGhlIGNvdW50cnkgY2FsbGluZyBjb2RlIHBhcnRcclxuICAgICAqIChpZiB0aGUgbnVtYmVyIGlzIGFuIGludGVybmF0aW9uYWwgb25lKS5cclxuICAgICAqIEByZXR1cm4ge3N0cmluZ31cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0TmF0aW9uYWxEaWdpdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TmF0aW9uYWxEaWdpdHMoKSB7XG4gICAgICBpZiAodGhpcy5pbnRlcm5hdGlvbmFsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpZ2l0cy5zbGljZSgodGhpcy5JRERQcmVmaXggPyB0aGlzLklERFByZWZpeC5sZW5ndGggOiAwKSArICh0aGlzLmNhbGxpbmdDb2RlID8gdGhpcy5jYWxsaW5nQ29kZS5sZW5ndGggOiAwKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmRpZ2l0cztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0RGlnaXRzV2l0aG91dEludGVybmF0aW9uYWxQcmVmaXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGlnaXRzV2l0aG91dEludGVybmF0aW9uYWxQcmVmaXgoKSB7XG4gICAgICBpZiAodGhpcy5pbnRlcm5hdGlvbmFsKSB7XG4gICAgICAgIGlmICh0aGlzLklERFByZWZpeCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmRpZ2l0cy5zbGljZSh0aGlzLklERFByZWZpeC5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmRpZ2l0cztcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQXNZb3VUeXBlU3RhdGU7XG59KCk7XG5cbmV4cG9ydCB7IEFzWW91VHlwZVN0YXRlIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzWW91VHlwZVN0YXRlLmpzLm1hcCIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoc3ViQ2xhc3MsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7IHJldHVybiBjYWxsOyB9IGVsc2UgaWYgKGNhbGwgIT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRGVyaXZlZCBjb25zdHJ1Y3RvcnMgbWF5IG9ubHkgcmV0dXJuIG9iamVjdCBvciB1bmRlZmluZWRcIik7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH1cblxuZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgdmFyIF9jYWNoZSA9IHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIiA/IG5ldyBNYXAoKSA6IHVuZGVmaW5lZDsgX3dyYXBOYXRpdmVTdXBlciA9IGZ1bmN0aW9uIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpIHsgaWYgKENsYXNzID09PSBudWxsIHx8ICFfaXNOYXRpdmVGdW5jdGlvbihDbGFzcykpIHJldHVybiBDbGFzczsgaWYgKHR5cGVvZiBDbGFzcyAhPT0gXCJmdW5jdGlvblwiKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTsgfSBpZiAodHlwZW9mIF9jYWNoZSAhPT0gXCJ1bmRlZmluZWRcIikgeyBpZiAoX2NhY2hlLmhhcyhDbGFzcykpIHJldHVybiBfY2FjaGUuZ2V0KENsYXNzKTsgX2NhY2hlLnNldChDbGFzcywgV3JhcHBlcik7IH0gZnVuY3Rpb24gV3JhcHBlcigpIHsgcmV0dXJuIF9jb25zdHJ1Y3QoQ2xhc3MsIGFyZ3VtZW50cywgX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yKTsgfSBXcmFwcGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBXcmFwcGVyLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyByZXR1cm4gX3NldFByb3RvdHlwZU9mKFdyYXBwZXIsIENsYXNzKTsgfTsgcmV0dXJuIF93cmFwTmF0aXZlU3VwZXIoQ2xhc3MpOyB9XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyBpZiAoX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpKSB7IF9jb25zdHJ1Y3QgPSBSZWZsZWN0LmNvbnN0cnVjdDsgfSBlbHNlIHsgX2NvbnN0cnVjdCA9IGZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyB2YXIgYSA9IFtudWxsXTsgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpOyB2YXIgQ29uc3RydWN0b3IgPSBGdW5jdGlvbi5iaW5kLmFwcGx5KFBhcmVudCwgYSk7IHZhciBpbnN0YW5jZSA9IG5ldyBDb25zdHJ1Y3RvcigpOyBpZiAoQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihpbnN0YW5jZSwgQ2xhc3MucHJvdG90eXBlKTsgcmV0dXJuIGluc3RhbmNlOyB9OyB9IHJldHVybiBfY29uc3RydWN0LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7IH1cblxuZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0cnVlOyB0cnkgeyBCb29sZWFuLnByb3RvdHlwZS52YWx1ZU9mLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoQm9vbGVhbiwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9pc05hdGl2ZUZ1bmN0aW9uKGZuKSB7IHJldHVybiBGdW5jdGlvbi50b1N0cmluZy5jYWxsKGZuKS5pbmRleE9mKFwiW25hdGl2ZSBjb2RlXVwiKSAhPT0gLTE7IH1cblxuZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDY5NzEwNDQvOTcwNzY5XG4vLyBcIkJyZWFraW5nIGNoYW5nZXMgaW4gVHlwZXNjcmlwdCAyLjFcIlxuLy8gXCJFeHRlbmRpbmcgYnVpbHQtaW5zIGxpa2UgRXJyb3IsIEFycmF5LCBhbmQgTWFwIG1heSBubyBsb25nZXIgd29yay5cIlxuLy8gXCJBcyBhIHJlY29tbWVuZGF0aW9uLCB5b3UgY2FuIG1hbnVhbGx5IGFkanVzdCB0aGUgcHJvdG90eXBlIGltbWVkaWF0ZWx5IGFmdGVyIGFueSBzdXBlciguLi4pIGNhbGxzLlwiXG4vLyBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L1R5cGVTY3JpcHQtd2lraS9ibG9iL21haW4vQnJlYWtpbmctQ2hhbmdlcy5tZCNleHRlbmRpbmctYnVpbHQtaW5zLWxpa2UtZXJyb3ItYXJyYXktYW5kLW1hcC1tYXktbm8tbG9uZ2VyLXdvcmtcbnZhciBQYXJzZUVycm9yID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfRXJyb3IpIHtcbiAgX2luaGVyaXRzKFBhcnNlRXJyb3IsIF9FcnJvcik7XG5cbiAgdmFyIF9zdXBlciA9IF9jcmVhdGVTdXBlcihQYXJzZUVycm9yKTtcblxuICBmdW5jdGlvbiBQYXJzZUVycm9yKGNvZGUpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFyc2VFcnJvcik7XG5cbiAgICBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGNvZGUpOyAvLyBTZXQgdGhlIHByb3RvdHlwZSBleHBsaWNpdGx5LlxuICAgIC8vIEFueSBzdWJjbGFzcyBvZiBGb29FcnJvciB3aWxsIGhhdmUgdG8gbWFudWFsbHkgc2V0IHRoZSBwcm90b3R5cGUgYXMgd2VsbC5cblxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihfYXNzZXJ0VGhpc0luaXRpYWxpemVkKF90aGlzKSwgUGFyc2VFcnJvci5wcm90b3R5cGUpO1xuICAgIF90aGlzLm5hbWUgPSBfdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBfY3JlYXRlQ2xhc3MoUGFyc2VFcnJvcik7XG59KCAvKiNfX1BVUkVfXyovX3dyYXBOYXRpdmVTdXBlcihFcnJvcikpO1xuXG5leHBvcnQgeyBQYXJzZUVycm9yIGFzIGRlZmF1bHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBhcnNlRXJyb3IuanMubWFwIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb25zdHJ1Y3RvciwgXCJwcm90b3R5cGVcIiwgeyB3cml0YWJsZTogZmFsc2UgfSk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfVxuXG5pbXBvcnQgTWV0YWRhdGEgZnJvbSAnLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgaXNQb3NzaWJsZU51bWJlciBmcm9tICcuL2lzUG9zc2libGUuanMnO1xuaW1wb3J0IGlzVmFsaWROdW1iZXIgZnJvbSAnLi9pc1ZhbGlkLmpzJzsgLy8gaW1wb3J0IGNoZWNrTnVtYmVyTGVuZ3RoIGZyb20gJy4vaGVscGVycy9jaGVja051bWJlckxlbmd0aC5qcydcblxuaW1wb3J0IGdldE51bWJlclR5cGUgZnJvbSAnLi9oZWxwZXJzL2dldE51bWJlclR5cGUuanMnO1xuaW1wb3J0IGdldFBvc3NpYmxlQ291bnRyaWVzRm9yTnVtYmVyIGZyb20gJy4vaGVscGVycy9nZXRQb3NzaWJsZUNvdW50cmllc0Zvck51bWJlci5qcyc7XG5pbXBvcnQgZm9ybWF0TnVtYmVyIGZyb20gJy4vZm9ybWF0LmpzJztcbnZhciBVU0VfTk9OX0dFT0dSQVBISUNfQ09VTlRSWV9DT0RFID0gZmFsc2U7XG5cbnZhciBQaG9uZU51bWJlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIC8qKlxyXG4gICAqIEBwYXJhbSAge3N0cmluZ30gY291bnRyeU9yQ291bnRyeUNhbGxpbmdDb2RlXHJcbiAgICogQHBhcmFtICB7c3RyaW5nfSBuYXRpb25hbE51bWJlclxyXG4gICAqIEBwYXJhbSAge29iamVjdH0gbWV0YWRhdGEg4oCUIE1ldGFkYXRhIEpTT05cclxuICAgKiBAcmV0dXJuIHtQaG9uZU51bWJlcn1cclxuICAgKi9cbiAgZnVuY3Rpb24gUGhvbmVOdW1iZXIoY291bnRyeU9yQ291bnRyeUNhbGxpbmdDb2RlLCBuYXRpb25hbE51bWJlciwgbWV0YWRhdGEpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGhvbmVOdW1iZXIpO1xuXG4gICAgaWYgKCFjb3VudHJ5T3JDb3VudHJ5Q2FsbGluZ0NvZGUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2Bjb3VudHJ5YCBvciBgY291bnRyeUNhbGxpbmdDb2RlYCBub3QgcGFzc2VkJyk7XG4gICAgfVxuXG4gICAgaWYgKCFuYXRpb25hbE51bWJlcikge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYG5hdGlvbmFsTnVtYmVyYCBub3QgcGFzc2VkJyk7XG4gICAgfVxuXG4gICAgaWYgKCFtZXRhZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYG1ldGFkYXRhYCBub3QgcGFzc2VkJyk7XG4gICAgfVxuXG4gICAgdmFyIF9nZXRDb3VudHJ5QW5kQ291bnRyeSA9IGdldENvdW50cnlBbmRDb3VudHJ5Q2FsbGluZ0NvZGUoY291bnRyeU9yQ291bnRyeUNhbGxpbmdDb2RlLCBtZXRhZGF0YSksXG4gICAgICAgIGNvdW50cnkgPSBfZ2V0Q291bnRyeUFuZENvdW50cnkuY291bnRyeSxcbiAgICAgICAgY291bnRyeUNhbGxpbmdDb2RlID0gX2dldENvdW50cnlBbmRDb3VudHJ5LmNvdW50cnlDYWxsaW5nQ29kZTtcblxuICAgIHRoaXMuY291bnRyeSA9IGNvdW50cnk7XG4gICAgdGhpcy5jb3VudHJ5Q2FsbGluZ0NvZGUgPSBjb3VudHJ5Q2FsbGluZ0NvZGU7XG4gICAgdGhpcy5uYXRpb25hbE51bWJlciA9IG5hdGlvbmFsTnVtYmVyO1xuICAgIHRoaXMubnVtYmVyID0gJysnICsgdGhpcy5jb3VudHJ5Q2FsbGluZ0NvZGUgKyB0aGlzLm5hdGlvbmFsTnVtYmVyO1xuICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhQaG9uZU51bWJlciwgW3tcbiAgICBrZXk6IFwic2V0RXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEV4dChleHQpIHtcbiAgICAgIHRoaXMuZXh0ID0gZXh0O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRQb3NzaWJsZUNvdW50cmllc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQb3NzaWJsZUNvdW50cmllcygpIHtcbiAgICAgIGlmICh0aGlzLmNvdW50cnkpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmNvdW50cnldO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0UG9zc2libGVDb3VudHJpZXNGb3JOdW1iZXIodGhpcy5jb3VudHJ5Q2FsbGluZ0NvZGUsIHRoaXMubmF0aW9uYWxOdW1iZXIsIHRoaXMubWV0YWRhdGEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc1Bvc3NpYmxlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzUG9zc2libGUoKSB7XG4gICAgICByZXR1cm4gaXNQb3NzaWJsZU51bWJlcih0aGlzLCB7XG4gICAgICAgIHYyOiB0cnVlXG4gICAgICB9LCB0aGlzLm1ldGFkYXRhKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaXNWYWxpZFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc1ZhbGlkKCkge1xuICAgICAgcmV0dXJuIGlzVmFsaWROdW1iZXIodGhpcywge1xuICAgICAgICB2MjogdHJ1ZVxuICAgICAgfSwgdGhpcy5tZXRhZGF0YSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzTm9uR2VvZ3JhcGhpY1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc05vbkdlb2dyYXBoaWMoKSB7XG4gICAgICB2YXIgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEodGhpcy5tZXRhZGF0YSk7XG4gICAgICByZXR1cm4gbWV0YWRhdGEuaXNOb25HZW9ncmFwaGljQ2FsbGluZ0NvZGUodGhpcy5jb3VudHJ5Q2FsbGluZ0NvZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJpc0VxdWFsXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzRXF1YWwocGhvbmVOdW1iZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bWJlciA9PT0gcGhvbmVOdW1iZXIubnVtYmVyICYmIHRoaXMuZXh0ID09PSBwaG9uZU51bWJlci5leHQ7XG4gICAgfSAvLyBUaGlzIGZ1bmN0aW9uIHdhcyBvcmlnaW5hbGx5IG1lYW50IHRvIGJlIGFuIGVxdWl2YWxlbnQgZm9yIGB2YWxpZGF0ZVBob25lTnVtYmVyTGVuZ3RoKClgLFxuICAgIC8vIGJ1dCBsYXRlciBpdCB3YXMgZm91bmQgb3V0IHRoYXQgaXQgZG9lc24ndCBpbmNsdWRlIHRoZSBwb3NzaWJsZSBgVE9PX1NIT1JUYCByZXN1bHRcbiAgICAvLyByZXR1cm5lZCBmcm9tIGBwYXJzZVBob25lTnVtYmVyV2l0aEVycm9yKClgIGluIHRoZSBvcmlnaW5hbCBgdmFsaWRhdGVQaG9uZU51bWJlckxlbmd0aCgpYCxcbiAgICAvLyBzbyBldmVudHVhbGx5IEkgc2ltcGx5IGNvbW1lbnRlZCBvdXQgdGhpcyBtZXRob2QgZnJvbSB0aGUgYFBob25lTnVtYmVyYCBjbGFzc1xuICAgIC8vIGFuZCBqdXN0IGxlZnQgdGhlIGB2YWxpZGF0ZVBob25lTnVtYmVyTGVuZ3RoKClgIGZ1bmN0aW9uLCBldmVuIHRob3VnaCB0aGF0IG9uZSB3b3VsZCByZXF1aXJlXG4gICAgLy8gYW5kIGFkZGl0aW9uYWwgc3RlcCB0byBhbHNvIHZhbGlkYXRlIHRoZSBhY3R1YWwgY291bnRyeSAvIGNhbGxpbmcgY29kZSBvZiB0aGUgcGhvbmUgbnVtYmVyLlxuICAgIC8vIHZhbGlkYXRlTGVuZ3RoKCkge1xuICAgIC8vIFx0Y29uc3QgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEodGhpcy5tZXRhZGF0YSlcbiAgICAvLyBcdG1ldGFkYXRhLnNlbGVjdE51bWJlcmluZ1BsYW4odGhpcy5jb3VudHJ5Q2FsbGluZ0NvZGUpXG4gICAgLy8gXHRjb25zdCByZXN1bHQgPSBjaGVja051bWJlckxlbmd0aCh0aGlzLm5hdGlvbmFsTnVtYmVyLCBtZXRhZGF0YSlcbiAgICAvLyBcdGlmIChyZXN1bHQgIT09ICdJU19QT1NTSUJMRScpIHtcbiAgICAvLyBcdFx0cmV0dXJuIHJlc3VsdFxuICAgIC8vIFx0fVxuICAgIC8vIH1cblxuICB9LCB7XG4gICAga2V5OiBcImdldFR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VHlwZSgpIHtcbiAgICAgIHJldHVybiBnZXROdW1iZXJUeXBlKHRoaXMsIHtcbiAgICAgICAgdjI6IHRydWVcbiAgICAgIH0sIHRoaXMubWV0YWRhdGEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JtYXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KF9mb3JtYXQsIG9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBmb3JtYXROdW1iZXIodGhpcywgX2Zvcm1hdCwgb3B0aW9ucyA/IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucyksIHt9LCB7XG4gICAgICAgIHYyOiB0cnVlXG4gICAgICB9KSA6IHtcbiAgICAgICAgdjI6IHRydWVcbiAgICAgIH0sIHRoaXMubWV0YWRhdGEpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JtYXROYXRpb25hbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmb3JtYXROYXRpb25hbChvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQoJ05BVElPTkFMJywgb3B0aW9ucyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdEludGVybmF0aW9uYWxcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0SW50ZXJuYXRpb25hbChvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQoJ0lOVEVSTkFUSU9OQUwnLCBvcHRpb25zKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZ2V0VVJJXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVSSShvcHRpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5mb3JtYXQoJ1JGQzM5NjYnLCBvcHRpb25zKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUGhvbmVOdW1iZXI7XG59KCk7XG5cbmV4cG9ydCB7IFBob25lTnVtYmVyIGFzIGRlZmF1bHQgfTtcblxudmFyIGlzQ291bnRyeUNvZGUgPSBmdW5jdGlvbiBpc0NvdW50cnlDb2RlKHZhbHVlKSB7XG4gIHJldHVybiAvXltBLVpdezJ9JC8udGVzdCh2YWx1ZSk7XG59O1xuXG5mdW5jdGlvbiBnZXRDb3VudHJ5QW5kQ291bnRyeUNhbGxpbmdDb2RlKGNvdW50cnlPckNvdW50cnlDYWxsaW5nQ29kZSwgbWV0YWRhdGFKc29uKSB7XG4gIHZhciBjb3VudHJ5O1xuICB2YXIgY291bnRyeUNhbGxpbmdDb2RlO1xuICB2YXIgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEobWV0YWRhdGFKc29uKTsgLy8gSWYgY291bnRyeSBjb2RlIGlzIHBhc3NlZCB0aGVuIGRlcml2ZSBgY291bnRyeUNhbGxpbmdDb2RlYCBmcm9tIGl0LlxuICAvLyBBbHNvIHN0b3JlIHRoZSBjb3VudHJ5IGNvZGUgYXMgYC5jb3VudHJ5YC5cblxuICBpZiAoaXNDb3VudHJ5Q29kZShjb3VudHJ5T3JDb3VudHJ5Q2FsbGluZ0NvZGUpKSB7XG4gICAgY291bnRyeSA9IGNvdW50cnlPckNvdW50cnlDYWxsaW5nQ29kZTtcbiAgICBtZXRhZGF0YS5zZWxlY3ROdW1iZXJpbmdQbGFuKGNvdW50cnkpO1xuICAgIGNvdW50cnlDYWxsaW5nQ29kZSA9IG1ldGFkYXRhLmNvdW50cnlDYWxsaW5nQ29kZSgpO1xuICB9IGVsc2Uge1xuICAgIGNvdW50cnlDYWxsaW5nQ29kZSA9IGNvdW50cnlPckNvdW50cnlDYWxsaW5nQ29kZTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cblxuICAgIGlmIChVU0VfTk9OX0dFT0dSQVBISUNfQ09VTlRSWV9DT0RFKSB7XG4gICAgICBpZiAobWV0YWRhdGEuaXNOb25HZW9ncmFwaGljQ2FsbGluZ0NvZGUoY291bnRyeUNhbGxpbmdDb2RlKSkge1xuICAgICAgICBjb3VudHJ5ID0gJzAwMSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjb3VudHJ5OiBjb3VudHJ5LFxuICAgIGNvdW50cnlDYWxsaW5nQ29kZTogY291bnRyeUNhbGxpbmdDb2RlXG4gIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QaG9uZU51bWJlci5qcy5tYXAiLCIvLyBUaGUgbWluaW11bSBsZW5ndGggb2YgdGhlIG5hdGlvbmFsIHNpZ25pZmljYW50IG51bWJlci5cbmV4cG9ydCB2YXIgTUlOX0xFTkdUSF9GT1JfTlNOID0gMjsgLy8gVGhlIElUVSBzYXlzIHRoZSBtYXhpbXVtIGxlbmd0aCBzaG91bGQgYmUgMTUsXG4vLyBidXQgb25lIGNhbiBmaW5kIGxvbmdlciBudW1iZXJzIGluIEdlcm1hbnkuXG5cbmV4cG9ydCB2YXIgTUFYX0xFTkdUSF9GT1JfTlNOID0gMTc7IC8vIFRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgY291bnRyeSBjYWxsaW5nIGNvZGUuXG5cbmV4cG9ydCB2YXIgTUFYX0xFTkdUSF9DT1VOVFJZX0NPREUgPSAzOyAvLyBEaWdpdHMgYWNjZXB0ZWQgaW4gcGhvbmUgbnVtYmVyc1xuLy8gKGFzY2lpLCBmdWxsd2lkdGgsIGFyYWJpYy1pbmRpYywgYW5kIGVhc3Rlcm4gYXJhYmljIGRpZ2l0cykuXG5cbmV4cG9ydCB2YXIgVkFMSURfRElHSVRTID0gXCIwLTlcXHVGRjEwLVxcdUZGMTlcXHUwNjYwLVxcdTA2NjlcXHUwNkYwLVxcdTA2RjlcIjsgLy8gYERBU0hFU2Agd2lsbCBiZSByaWdodCBhZnRlciB0aGUgb3BlbmluZyBzcXVhcmUgYnJhY2tldCBvZiB0aGUgXCJjaGFyYWN0ZXIgY2xhc3NcIlxuXG52YXIgREFTSEVTID0gXCItXFx1MjAxMC1cXHUyMDE1XFx1MjIxMlxcdTMwRkNcXHVGRjBEXCI7XG52YXIgU0xBU0hFUyA9IFwiXFx1RkYwRi9cIjtcbnZhciBET1RTID0gXCJcXHVGRjBFLlwiO1xuZXhwb3J0IHZhciBXSElURVNQQUNFID0gXCIgXFx4QTBcXHhBRFxcdTIwMEJcXHUyMDYwXFx1MzAwMFwiO1xudmFyIEJSQUNLRVRTID0gXCIoKVxcdUZGMDhcXHVGRjA5XFx1RkYzQlxcdUZGM0RcXFxcW1xcXFxdXCI7IC8vIGV4cG9ydCBjb25zdCBPUEVOSU5HX0JSQUNLRVRTID0gJyhcXHVGRjA4XFx1RkYzQlxcXFxcXFsnXG5cbnZhciBUSUxERVMgPSBcIn5cXHUyMDUzXFx1MjIzQ1xcdUZGNUVcIjsgLy8gUmVndWxhciBleHByZXNzaW9uIG9mIGFjY2VwdGFibGUgcHVuY3R1YXRpb24gZm91bmQgaW4gcGhvbmUgbnVtYmVycy4gVGhpc1xuLy8gZXhjbHVkZXMgcHVuY3R1YXRpb24gZm91bmQgYXMgYSBsZWFkaW5nIGNoYXJhY3RlciBvbmx5LiBUaGlzIGNvbnNpc3RzIG9mIGRhc2hcbi8vIGNoYXJhY3RlcnMsIHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMsIGZ1bGwgc3RvcHMsIHNsYXNoZXMsIHNxdWFyZSBicmFja2V0cyxcbi8vIHBhcmVudGhlc2VzIGFuZCB0aWxkZXMuIEZ1bGwtd2lkdGggdmFyaWFudHMgYXJlIGFsc28gcHJlc2VudC5cblxuZXhwb3J0IHZhciBWQUxJRF9QVU5DVFVBVElPTiA9IFwiXCIuY29uY2F0KERBU0hFUykuY29uY2F0KFNMQVNIRVMpLmNvbmNhdChET1RTKS5jb25jYXQoV0hJVEVTUEFDRSkuY29uY2F0KEJSQUNLRVRTKS5jb25jYXQoVElMREVTKTtcbmV4cG9ydCB2YXIgUExVU19DSEFSUyA9IFwiK1xcdUZGMEJcIjsgLy8gY29uc3QgTEVBRElOR19QTFVTX0NIQVJTX1BBVFRFUk4gPSBuZXcgUmVnRXhwKCdeWycgKyBQTFVTX0NIQVJTICsgJ10rJylcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCJmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdOyBpZiAoaXQpIHJldHVybiAoaXQgPSBpdC5jYWxsKG8pKS5uZXh0LmJpbmQoaXQpOyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHJldHVybiBmdW5jdGlvbiAoKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLy8gVGhpcyBpcyBhIHBvcnQgb2YgR29vZ2xlIEFuZHJvaWQgYGxpYnBob25lbnVtYmVyYCdzXG4vLyBgcGhvbmVudW1iZXJ1dGlsLmpzYCBvZiBEZWNlbWJlciAzMXRoLCAyMDE4LlxuLy9cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVpMThuL2xpYnBob25lbnVtYmVyL2NvbW1pdHMvbWFzdGVyL2phdmFzY3JpcHQvaTE4bi9waG9uZW51bWJlcnMvcGhvbmVudW1iZXJ1dGlsLmpzXG5pbXBvcnQgbWF0Y2hlc0VudGlyZWx5IGZyb20gJy4vaGVscGVycy9tYXRjaGVzRW50aXJlbHkuanMnO1xuaW1wb3J0IGZvcm1hdE5hdGlvbmFsTnVtYmVyVXNpbmdGb3JtYXQgZnJvbSAnLi9oZWxwZXJzL2Zvcm1hdE5hdGlvbmFsTnVtYmVyVXNpbmdGb3JtYXQuanMnO1xuaW1wb3J0IE1ldGFkYXRhLCB7IGdldENvdW50cnlDYWxsaW5nQ29kZSB9IGZyb20gJy4vbWV0YWRhdGEuanMnO1xuaW1wb3J0IGdldElkZFByZWZpeCBmcm9tICcuL2hlbHBlcnMvZ2V0SWRkUHJlZml4LmpzJztcbmltcG9ydCB7IGZvcm1hdFJGQzM5NjYgfSBmcm9tICcuL2hlbHBlcnMvUkZDMzk2Ni5qcyc7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBmb3JtYXRFeHRlbnNpb246IGZ1bmN0aW9uIGZvcm1hdEV4dGVuc2lvbihmb3JtYXR0ZWROdW1iZXIsIGV4dGVuc2lvbiwgbWV0YWRhdGEpIHtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoZm9ybWF0dGVkTnVtYmVyKS5jb25jYXQobWV0YWRhdGEuZXh0KCkpLmNvbmNhdChleHRlbnNpb24pO1xuICB9XG59O1xuLyoqXHJcbiAqIEZvcm1hdHMgYSBwaG9uZSBudW1iZXIuXHJcbiAqXHJcbiAqIGZvcm1hdChwaG9uZU51bWJlckluc3RhbmNlLCAnSU5URVJOQVRJT05BTCcsIHsgLi4uLCB2MjogdHJ1ZSB9LCBtZXRhZGF0YSlcclxuICogZm9ybWF0KHBob25lTnVtYmVySW5zdGFuY2UsICdOQVRJT05BTCcsIHsgLi4uLCB2MjogdHJ1ZSB9LCBtZXRhZGF0YSlcclxuICpcclxuICogZm9ybWF0KHsgcGhvbmU6ICc4MDA1NTUzNTM1JywgY291bnRyeTogJ1JVJyB9LCAnSU5URVJOQVRJT05BTCcsIHsgLi4uIH0sIG1ldGFkYXRhKVxyXG4gKiBmb3JtYXQoeyBwaG9uZTogJzgwMDU1NTM1MzUnLCBjb3VudHJ5OiAnUlUnIH0sICdOQVRJT05BTCcsIHVuZGVmaW5lZCwgbWV0YWRhdGEpXHJcbiAqXHJcbiAqIEBwYXJhbSAge29iamVjdHxQaG9uZU51bWJlcn0gaW5wdXQg4oCUIElmIGBvcHRpb25zLnYyOiB0cnVlYCBmbGFnIGlzIHBhc3NlZCwgdGhlIGBpbnB1dGAgc2hvdWxkIGJlIGEgYFBob25lTnVtYmVyYCBpbnN0YW5jZS4gT3RoZXJ3aXNlLCBpdCBzaG91bGQgYmUgYW4gb2JqZWN0IG9mIHNoYXBlIGB7IHBob25lOiAnLi4uJywgY291bnRyeTogJy4uLicgfWAuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gZm9ybWF0XHJcbiAqIEBwYXJhbSAge29iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBwYXJhbSAge29iamVjdH0gbWV0YWRhdGFcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0TnVtYmVyKGlucHV0LCBmb3JtYXQsIG9wdGlvbnMsIG1ldGFkYXRhKSB7XG4gIC8vIEFwcGx5IGRlZmF1bHQgb3B0aW9ucy5cbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBERUZBVUxUX09QVElPTlMpLCBvcHRpb25zKTtcbiAgfSBlbHNlIHtcbiAgICBvcHRpb25zID0gREVGQVVMVF9PUFRJT05TO1xuICB9XG5cbiAgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEobWV0YWRhdGEpO1xuXG4gIGlmIChpbnB1dC5jb3VudHJ5ICYmIGlucHV0LmNvdW50cnkgIT09ICcwMDEnKSB7XG4gICAgLy8gVmFsaWRhdGUgYGlucHV0LmNvdW50cnlgLlxuICAgIGlmICghbWV0YWRhdGEuaGFzQ291bnRyeShpbnB1dC5jb3VudHJ5KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjb3VudHJ5OiBcIi5jb25jYXQoaW5wdXQuY291bnRyeSkpO1xuICAgIH1cblxuICAgIG1ldGFkYXRhLmNvdW50cnkoaW5wdXQuY291bnRyeSk7XG4gIH0gZWxzZSBpZiAoaW5wdXQuY291bnRyeUNhbGxpbmdDb2RlKSB7XG4gICAgbWV0YWRhdGEuc2VsZWN0TnVtYmVyaW5nUGxhbihpbnB1dC5jb3VudHJ5Q2FsbGluZ0NvZGUpO1xuICB9IGVsc2UgcmV0dXJuIGlucHV0LnBob25lIHx8ICcnO1xuXG4gIHZhciBjb3VudHJ5Q2FsbGluZ0NvZGUgPSBtZXRhZGF0YS5jb3VudHJ5Q2FsbGluZ0NvZGUoKTtcbiAgdmFyIG5hdGlvbmFsTnVtYmVyID0gb3B0aW9ucy52MiA/IGlucHV0Lm5hdGlvbmFsTnVtYmVyIDogaW5wdXQucGhvbmU7IC8vIFRoaXMgdmFyaWFibGUgc2hvdWxkIGhhdmUgYmVlbiBkZWNsYXJlZCBpbnNpZGUgYGNhc2Vgc1xuICAvLyBidXQgQmFiZWwgaGFzIGEgYnVnIGFuZCBpdCBzYXlzIFwiZHVwbGljYXRlIHZhcmlhYmxlIGRlY2xhcmF0aW9uXCIuXG5cbiAgdmFyIG51bWJlcjtcblxuICBzd2l0Y2ggKGZvcm1hdCkge1xuICAgIGNhc2UgJ05BVElPTkFMJzpcbiAgICAgIC8vIExlZ2FjeSBhcmd1bWVudCBzdXBwb3J0LlxuICAgICAgLy8gKGB7IGNvdW50cnk6IC4uLiwgcGhvbmU6ICcnIH1gKVxuICAgICAgaWYgKCFuYXRpb25hbE51bWJlcikge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIG51bWJlciA9IGZvcm1hdE5hdGlvbmFsTnVtYmVyKG5hdGlvbmFsTnVtYmVyLCBpbnB1dC5jYXJyaWVyQ29kZSwgJ05BVElPTkFMJywgbWV0YWRhdGEsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGFkZEV4dGVuc2lvbihudW1iZXIsIGlucHV0LmV4dCwgbWV0YWRhdGEsIG9wdGlvbnMuZm9ybWF0RXh0ZW5zaW9uKTtcblxuICAgIGNhc2UgJ0lOVEVSTkFUSU9OQUwnOlxuICAgICAgLy8gTGVnYWN5IGFyZ3VtZW50IHN1cHBvcnQuXG4gICAgICAvLyAoYHsgY291bnRyeTogLi4uLCBwaG9uZTogJycgfWApXG4gICAgICBpZiAoIW5hdGlvbmFsTnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBcIitcIi5jb25jYXQoY291bnRyeUNhbGxpbmdDb2RlKTtcbiAgICAgIH1cblxuICAgICAgbnVtYmVyID0gZm9ybWF0TmF0aW9uYWxOdW1iZXIobmF0aW9uYWxOdW1iZXIsIG51bGwsICdJTlRFUk5BVElPTkFMJywgbWV0YWRhdGEsIG9wdGlvbnMpO1xuICAgICAgbnVtYmVyID0gXCIrXCIuY29uY2F0KGNvdW50cnlDYWxsaW5nQ29kZSwgXCIgXCIpLmNvbmNhdChudW1iZXIpO1xuICAgICAgcmV0dXJuIGFkZEV4dGVuc2lvbihudW1iZXIsIGlucHV0LmV4dCwgbWV0YWRhdGEsIG9wdGlvbnMuZm9ybWF0RXh0ZW5zaW9uKTtcblxuICAgIGNhc2UgJ0UuMTY0JzpcbiAgICAgIC8vIGBFLjE2NGAgZG9lc24ndCBkZWZpbmUgXCJwaG9uZSBudW1iZXIgZXh0ZW5zaW9uc1wiLlxuICAgICAgcmV0dXJuIFwiK1wiLmNvbmNhdChjb3VudHJ5Q2FsbGluZ0NvZGUpLmNvbmNhdChuYXRpb25hbE51bWJlcik7XG5cbiAgICBjYXNlICdSRkMzOTY2JzpcbiAgICAgIHJldHVybiBmb3JtYXRSRkMzOTY2KHtcbiAgICAgICAgbnVtYmVyOiBcIitcIi5jb25jYXQoY291bnRyeUNhbGxpbmdDb2RlKS5jb25jYXQobmF0aW9uYWxOdW1iZXIpLFxuICAgICAgICBleHQ6IGlucHV0LmV4dFxuICAgICAgfSk7XG4gICAgLy8gRm9yIHJlZmVyZW5jZSwgaGVyZSdzIEdvb2dsZSdzIElERCBmb3JtYXR0ZXI6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9saWJwaG9uZW51bWJlci9ibG9iLzMyNzE5Y2Y3NGU2ODc5Njc4OGQxY2E0NWFiYzg1ZGNkYzYzYmE1YjkvamF2YS9saWJwaG9uZW51bWJlci9zcmMvY29tL2dvb2dsZS9pMThuL3Bob25lbnVtYmVycy9QaG9uZU51bWJlclV0aWwuamF2YSNMMTU0NlxuICAgIC8vIE5vdCBzYXlpbmcgdGhhdCB0aGlzIElERCBmb3JtYXR0ZXIgcmVwbGljYXRlcyBpdCAxOjEsIGJ1dCBpdCBzZWVtcyB0byB3b3JrLlxuICAgIC8vIFdobyB3b3VsZCBldmVuIG5lZWQgdG8gZm9ybWF0IHBob25lIG51bWJlcnMgaW4gSUREIGZvcm1hdCBhbnl3YXk/XG5cbiAgICBjYXNlICdJREQnOlxuICAgICAgaWYgKCFvcHRpb25zLmZyb21Db3VudHJ5KSB7XG4gICAgICAgIHJldHVybjsgLy8gdGhyb3cgbmV3IEVycm9yKCdgZnJvbUNvdW50cnlgIG9wdGlvbiBub3QgcGFzc2VkIGZvciBJREQtcHJlZml4ZWQgZm9ybWF0dGluZy4nKVxuICAgICAgfVxuXG4gICAgICB2YXIgZm9ybWF0dGVkTnVtYmVyID0gZm9ybWF0SUREKG5hdGlvbmFsTnVtYmVyLCBpbnB1dC5jYXJyaWVyQ29kZSwgY291bnRyeUNhbGxpbmdDb2RlLCBvcHRpb25zLmZyb21Db3VudHJ5LCBtZXRhZGF0YSk7XG4gICAgICByZXR1cm4gYWRkRXh0ZW5zaW9uKGZvcm1hdHRlZE51bWJlciwgaW5wdXQuZXh0LCBtZXRhZGF0YSwgb3B0aW9ucy5mb3JtYXRFeHRlbnNpb24pO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gXFxcImZvcm1hdFxcXCIgYXJndW1lbnQgcGFzc2VkIHRvIFxcXCJmb3JtYXROdW1iZXIoKVxcXCI6IFxcXCJcIi5jb25jYXQoZm9ybWF0LCBcIlxcXCJcIikpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE5hdGlvbmFsTnVtYmVyKG51bWJlciwgY2FycmllckNvZGUsIGZvcm1hdEFzLCBtZXRhZGF0YSwgb3B0aW9ucykge1xuICB2YXIgZm9ybWF0ID0gY2hvb3NlRm9ybWF0Rm9yTnVtYmVyKG1ldGFkYXRhLmZvcm1hdHMoKSwgbnVtYmVyKTtcblxuICBpZiAoIWZvcm1hdCkge1xuICAgIHJldHVybiBudW1iZXI7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0TmF0aW9uYWxOdW1iZXJVc2luZ0Zvcm1hdChudW1iZXIsIGZvcm1hdCwge1xuICAgIHVzZUludGVybmF0aW9uYWxGb3JtYXQ6IGZvcm1hdEFzID09PSAnSU5URVJOQVRJT05BTCcsXG4gICAgd2l0aE5hdGlvbmFsUHJlZml4OiBmb3JtYXQubmF0aW9uYWxQcmVmaXhJc09wdGlvbmFsV2hlbkZvcm1hdHRpbmdJbk5hdGlvbmFsRm9ybWF0KCkgJiYgb3B0aW9ucyAmJiBvcHRpb25zLm5hdGlvbmFsUHJlZml4ID09PSBmYWxzZSA/IGZhbHNlIDogdHJ1ZSxcbiAgICBjYXJyaWVyQ29kZTogY2FycmllckNvZGUsXG4gICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hvb3NlRm9ybWF0Rm9yTnVtYmVyKGF2YWlsYWJsZUZvcm1hdHMsIG5hdGlvbmFsTm51bWJlcikge1xuICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKGF2YWlsYWJsZUZvcm1hdHMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgIHZhciBmb3JtYXQgPSBfc3RlcC52YWx1ZTtcblxuICAgIC8vIFZhbGlkYXRlIGxlYWRpbmcgZGlnaXRzLlxuICAgIC8vIFRoZSB0ZXN0IGNhc2UgZm9yIFwiZWxzZSBwYXRoXCIgY291bGQgYmUgZm91bmQgYnkgc2VhcmNoaW5nIGZvclxuICAgIC8vIFwiZm9ybWF0LmxlYWRpbmdEaWdpdHNQYXR0ZXJucygpLmxlbmd0aCA9PT0gMFwiLlxuICAgIGlmIChmb3JtYXQubGVhZGluZ0RpZ2l0c1BhdHRlcm5zKCkubGVuZ3RoID4gMCkge1xuICAgICAgLy8gVGhlIGxhc3QgbGVhZGluZ19kaWdpdHNfcGF0dGVybiBpcyB1c2VkIGhlcmUsIGFzIGl0IGlzIHRoZSBtb3N0IGRldGFpbGVkXG4gICAgICB2YXIgbGFzdExlYWRpbmdEaWdpdHNQYXR0ZXJuID0gZm9ybWF0LmxlYWRpbmdEaWdpdHNQYXR0ZXJucygpW2Zvcm1hdC5sZWFkaW5nRGlnaXRzUGF0dGVybnMoKS5sZW5ndGggLSAxXTsgLy8gSWYgbGVhZGluZyBkaWdpdHMgZG9uJ3QgbWF0Y2ggdGhlbiBtb3ZlIG9uIHRvIHRoZSBuZXh0IHBob25lIG51bWJlciBmb3JtYXRcblxuICAgICAgaWYgKG5hdGlvbmFsTm51bWJlci5zZWFyY2gobGFzdExlYWRpbmdEaWdpdHNQYXR0ZXJuKSAhPT0gMCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9IC8vIENoZWNrIHRoYXQgdGhlIG5hdGlvbmFsIG51bWJlciBtYXRjaGVzIHRoZSBwaG9uZSBudW1iZXIgZm9ybWF0IHJlZ3VsYXIgZXhwcmVzc2lvblxuXG5cbiAgICBpZiAobWF0Y2hlc0VudGlyZWx5KG5hdGlvbmFsTm51bWJlciwgZm9ybWF0LnBhdHRlcm4oKSkpIHtcbiAgICAgIHJldHVybiBmb3JtYXQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZEV4dGVuc2lvbihmb3JtYXR0ZWROdW1iZXIsIGV4dCwgbWV0YWRhdGEsIGZvcm1hdEV4dGVuc2lvbikge1xuICByZXR1cm4gZXh0ID8gZm9ybWF0RXh0ZW5zaW9uKGZvcm1hdHRlZE51bWJlciwgZXh0LCBtZXRhZGF0YSkgOiBmb3JtYXR0ZWROdW1iZXI7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdElERChuYXRpb25hbE51bWJlciwgY2FycmllckNvZGUsIGNvdW50cnlDYWxsaW5nQ29kZSwgZnJvbUNvdW50cnksIG1ldGFkYXRhKSB7XG4gIHZhciBmcm9tQ291bnRyeUNhbGxpbmdDb2RlID0gZ2V0Q291bnRyeUNhbGxpbmdDb2RlKGZyb21Db3VudHJ5LCBtZXRhZGF0YS5tZXRhZGF0YSk7IC8vIFdoZW4gY2FsbGluZyB3aXRoaW4gdGhlIHNhbWUgY291bnRyeSBjYWxsaW5nIGNvZGUuXG5cbiAgaWYgKGZyb21Db3VudHJ5Q2FsbGluZ0NvZGUgPT09IGNvdW50cnlDYWxsaW5nQ29kZSkge1xuICAgIHZhciBmb3JtYXR0ZWROdW1iZXIgPSBmb3JtYXROYXRpb25hbE51bWJlcihuYXRpb25hbE51bWJlciwgY2FycmllckNvZGUsICdOQVRJT05BTCcsIG1ldGFkYXRhKTsgLy8gRm9yIE5BTlBBIHJlZ2lvbnMsIHJldHVybiB0aGUgbmF0aW9uYWwgZm9ybWF0IGZvciB0aGVzZSByZWdpb25zXG4gICAgLy8gYnV0IHByZWZpeCBpdCB3aXRoIHRoZSBjb3VudHJ5IGNhbGxpbmcgY29kZS5cblxuICAgIGlmIChjb3VudHJ5Q2FsbGluZ0NvZGUgPT09ICcxJykge1xuICAgICAgcmV0dXJuIGNvdW50cnlDYWxsaW5nQ29kZSArICcgJyArIGZvcm1hdHRlZE51bWJlcjtcbiAgICB9IC8vIElmIHJlZ2lvbnMgc2hhcmUgYSBjb3VudHJ5IGNhbGxpbmcgY29kZSwgdGhlIGNvdW50cnkgY2FsbGluZyBjb2RlIG5lZWRcbiAgICAvLyBub3QgYmUgZGlhbGxlZC4gVGhpcyBhbHNvIGFwcGxpZXMgd2hlbiBkaWFsbGluZyB3aXRoaW4gYSByZWdpb24sIHNvIHRoaXNcbiAgICAvLyBpZiBjbGF1c2UgY292ZXJzIGJvdGggdGhlc2UgY2FzZXMuIFRlY2huaWNhbGx5IHRoaXMgaXMgdGhlIGNhc2UgZm9yXG4gICAgLy8gZGlhbGxpbmcgZnJvbSBMYSBSZXVuaW9uIHRvIG90aGVyIG92ZXJzZWFzIGRlcGFydG1lbnRzIG9mIEZyYW5jZSAoRnJlbmNoXG4gICAgLy8gR3VpYW5hLCBNYXJ0aW5pcXVlLCBHdWFkZWxvdXBlKSwgYnV0IG5vdCB2aWNlIHZlcnNhIC0gc28gd2UgZG9uJ3QgY292ZXJcbiAgICAvLyB0aGlzIGVkZ2UgY2FzZSBmb3Igbm93IGFuZCBmb3IgdGhvc2UgY2FzZXMgcmV0dXJuIHRoZSB2ZXJzaW9uIGluY2x1ZGluZ1xuICAgIC8vIGNvdW50cnkgY2FsbGluZyBjb2RlLiBEZXRhaWxzIGhlcmU6XG4gICAgLy8gaHR0cDovL3d3dy5wZXRpdGZ1dGUuY29tL3ZveWFnZS8yMjUtaW5mby1wcmF0aXF1ZXMtcmV1bmlvblxuICAgIC8vXG5cblxuICAgIHJldHVybiBmb3JtYXR0ZWROdW1iZXI7XG4gIH1cblxuICB2YXIgaWRkUHJlZml4ID0gZ2V0SWRkUHJlZml4KGZyb21Db3VudHJ5LCB1bmRlZmluZWQsIG1ldGFkYXRhLm1ldGFkYXRhKTtcblxuICBpZiAoaWRkUHJlZml4KSB7XG4gICAgcmV0dXJuIFwiXCIuY29uY2F0KGlkZFByZWZpeCwgXCIgXCIpLmNvbmNhdChjb3VudHJ5Q2FsbGluZ0NvZGUsIFwiIFwiKS5jb25jYXQoZm9ybWF0TmF0aW9uYWxOdW1iZXIobmF0aW9uYWxOdW1iZXIsIG51bGwsICdJTlRFUk5BVElPTkFMJywgbWV0YWRhdGEpKTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0LmpzLm1hcCIsImZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmIChpdCkgcmV0dXJuIChpdCA9IGl0LmNhbGwobykpLm5leHQuYmluZChpdCk7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5pbXBvcnQgaXNWaWFibGVQaG9uZU51bWJlciBmcm9tICcuL2lzVmlhYmxlUGhvbmVOdW1iZXIuanMnOyAvLyBodHRwczovL3d3dy5pZXRmLm9yZy9yZmMvcmZjMzk2Ni50eHRcblxuLyoqXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCAtIFBob25lIFVSSSAoUkZDIDM5NjYpLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IGB7ID9udW1iZXIsID9leHQgfWAuXHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VSRkMzOTY2KHRleHQpIHtcbiAgdmFyIG51bWJlcjtcbiAgdmFyIGV4dDsgLy8gUmVwbGFjZSBcInRlbDpcIiB3aXRoIFwidGVsPVwiIGZvciBwYXJzaW5nIGNvbnZlbmllbmNlLlxuXG4gIHRleHQgPSB0ZXh0LnJlcGxhY2UoL150ZWw6LywgJ3RlbD0nKTtcblxuICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHRleHQuc3BsaXQoJzsnKSksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgdmFyIHBhcnQgPSBfc3RlcC52YWx1ZTtcblxuICAgIHZhciBfcGFydCRzcGxpdCA9IHBhcnQuc3BsaXQoJz0nKSxcbiAgICAgICAgX3BhcnQkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX3BhcnQkc3BsaXQsIDIpLFxuICAgICAgICBuYW1lID0gX3BhcnQkc3BsaXQyWzBdLFxuICAgICAgICB2YWx1ZSA9IF9wYXJ0JHNwbGl0MlsxXTtcblxuICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgY2FzZSAndGVsJzpcbiAgICAgICAgbnVtYmVyID0gdmFsdWU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdleHQnOlxuICAgICAgICBleHQgPSB2YWx1ZTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3Bob25lLWNvbnRleHQnOlxuICAgICAgICAvLyBPbmx5IFwiY291bnRyeSBjb250ZXh0c1wiIGFyZSBzdXBwb3J0ZWQuXG4gICAgICAgIC8vIFwiRG9tYWluIGNvbnRleHRzXCIgYXJlIGlnbm9yZWQuXG4gICAgICAgIGlmICh2YWx1ZVswXSA9PT0gJysnKSB7XG4gICAgICAgICAgbnVtYmVyID0gdmFsdWUgKyBudW1iZXI7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH0gLy8gSWYgdGhlIHBob25lIG51bWJlciBpcyBub3QgdmlhYmxlLCB0aGVuIGFib3J0LlxuXG5cbiAgaWYgKCFpc1ZpYWJsZVBob25lTnVtYmVyKG51bWJlcikpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICB2YXIgcmVzdWx0ID0ge1xuICAgIG51bWJlcjogbnVtYmVyXG4gIH07XG5cbiAgaWYgKGV4dCkge1xuICAgIHJlc3VsdC5leHQgPSBleHQ7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXHJcbiAqIEBwYXJhbSAge29iamVjdH0gLSBgeyA/bnVtYmVyLCA/ZXh0ZW5zaW9uIH1gLlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFBob25lIFVSSSAoUkZDIDM5NjYpLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFJGQzM5NjYoX3JlZikge1xuICB2YXIgbnVtYmVyID0gX3JlZi5udW1iZXIsXG4gICAgICBleHQgPSBfcmVmLmV4dDtcblxuICBpZiAoIW51bWJlcikge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChudW1iZXJbMF0gIT09ICcrJykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlxcXCJmb3JtYXRSRkMzOTY2KClcXFwiIGV4cGVjdHMgXFxcIm51bWJlclxcXCIgdG8gYmUgaW4gRS4xNjQgZm9ybWF0LlwiKTtcbiAgfVxuXG4gIHJldHVybiBcInRlbDpcIi5jb25jYXQobnVtYmVyKS5jb25jYXQoZXh0ID8gJztleHQ9JyArIGV4dCA6ICcnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVJGQzM5NjYuanMubWFwIiwiaW1wb3J0IHsgVkFMSURfUFVOQ1RVQVRJT04gfSBmcm9tICcuLi9jb25zdGFudHMuanMnOyAvLyBSZW1vdmVzIGJyYWNrZXRzIGFuZCByZXBsYWNlcyBkYXNoZXMgd2l0aCBzcGFjZXMuXG4vL1xuLy8gRS5nLiBcIig5OTkpIDExMS0yMi0zM1wiIC0+IFwiOTk5IDExMSAyMiAzM1wiXG4vL1xuLy8gRm9yIHNvbWUgcmVhc29uIEdvb2dsZSdzIG1ldGFkYXRhIGNvbnRhaW5zIGA8aW50bEZvcm1hdC8+YHMgd2l0aCBicmFja2V0cyBhbmQgZGFzaGVzLlxuLy8gTWVhbndoaWxlLCB0aGVyZSdzIG5vIHNpbmdsZSBvcGluaW9uIGFib3V0IHVzaW5nIHB1bmN0dWF0aW9uIGluIGludGVybmF0aW9uYWwgcGhvbmUgbnVtYmVycy5cbi8vXG4vLyBGb3IgZXhhbXBsZSwgR29vZ2xlJ3MgYDxpbnRsRm9ybWF0Lz5gIGZvciBVU0EgaXMgYCsxIDIxMy0zNzMtNDI1M2AuXG4vLyBBbmQgaGVyZSdzIGEgcXVvdGUgZnJvbSBXaWtpUGVkaWEncyBcIk5vcnRoIEFtZXJpY2FuIE51bWJlcmluZyBQbGFuXCIgcGFnZTpcbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL05vcnRoX0FtZXJpY2FuX051bWJlcmluZ19QbGFuXG4vL1xuLy8gXCJUaGUgY291bnRyeSBjYWxsaW5nIGNvZGUgZm9yIGFsbCBjb3VudHJpZXMgcGFydGljaXBhdGluZyBpbiB0aGUgTkFOUCBpcyAxLlxuLy8gSW4gaW50ZXJuYXRpb25hbCBmb3JtYXQsIGFuIE5BTlAgbnVtYmVyIHNob3VsZCBiZSBsaXN0ZWQgYXMgKzEgMzAxIDU1NSAwMSAwMCxcbi8vIHdoZXJlIDMwMSBpcyBhbiBhcmVhIGNvZGUgKE1hcnlsYW5kKS5cIlxuLy9cbi8vIEkgcGVyc29uYWxseSBwcmVmZXIgdGhlIGludGVybmF0aW9uYWwgZm9ybWF0IHdpdGhvdXQgYW55IHB1bmN0dWF0aW9uLlxuLy8gRm9yIGV4YW1wbGUsIGJyYWNrZXRzIGFyZSByZW1uYW50cyBvZiB0aGUgb2xkIGFnZSwgbWVhbmluZyB0aGF0IHRoZVxuLy8gcGhvbmUgbnVtYmVyIHBhcnQgaW4gYnJhY2tldHMgKHNvIGNhbGxlZCBcImFyZWEgY29kZVwiKSBjYW4gYmUgb21pdHRlZFxuLy8gaWYgZGlhbGluZyB3aXRoaW4gdGhlIHNhbWUgXCJhcmVhXCIuXG4vLyBBbmQgaHlwaGVucyB3ZXJlIGNsZWFybHkgaW50cm9kdWNlZCBmb3Igc3BsaXR0aW5nIGxvY2FsIG51bWJlcnMgaW50byBtZW1vcml6YWJsZSBncm91cHMuXG4vLyBGb3IgZXhhbXBsZSwgcmVtZW1iZXJpbmcgXCI1NTUzNTM1XCIgaXMgZGlmZmljdWx0IGJ1dCBcIjU1NS0zNS0zNVwiIGlzIG11Y2ggc2ltcGxlci5cbi8vIEltYWdpbmUgYSBtYW4gdGFraW5nIGEgYnVzIGZyb20gaG9tZSB0byB3b3JrIGFuZCBzZWVpbmcgYW4gYWQgd2l0aCBhIHBob25lIG51bWJlci5cbi8vIEhlIGhhcyBhIGNvdXBsZSBvZiBzZWNvbmRzIHRvIG1lbW9yaXplIHRoYXQgbnVtYmVyIHVudGlsIGl0IHBhc3NlcyBieS5cbi8vIElmIGl0IHdlcmUgc3BhY2VzIGluc3RlYWQgb2YgaHlwaGVucyB0aGUgbWFuIHdvdWxkbid0IG5lY2Vzc2FyaWx5IGdldCBpdCxcbi8vIGJ1dCB3aXRoIGh5cGhlbnMgaW5zdGVhZCBvZiBzcGFjZXMgdGhlIGdyb3VwaW5nIGlzIG1vcmUgZXhwbGljaXQuXG4vLyBJIHBlcnNvbmFsbHkgdGhpbmsgdGhhdCBoeXBoZW5zIGludHJvZHVjZSB2aXN1YWwgY2x1dHRlcixcbi8vIHNvIEkgcHJlZmVyIHJlcGxhY2luZyB0aGVtIHdpdGggc3BhY2VzIGluIGludGVybmF0aW9uYWwgbnVtYmVycy5cbi8vIEluIHRoZSBtb2Rlcm4gYWdlIGFsbCBvdXRwdXQgaXMgZG9uZSBvbiBkaXNwbGF5cyB3aGVyZSBzcGFjZXMgYXJlIGNsZWFybHkgZGlzdGluZ3Vpc2hhYmxlXG4vLyBzbyBoeXBoZW5zIGNhbiBiZSBzYWZlbHkgcmVwbGFjZWQgd2l0aCBzcGFjZXMgd2l0aG91dCBsb3NpbmcgYW55IGxlZ2liaWxpdHkuXG4vL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhcHBseUludGVybmF0aW9uYWxTZXBhcmF0b3JTdHlsZShmb3JtYXR0ZWROdW1iZXIpIHtcbiAgcmV0dXJuIGZvcm1hdHRlZE51bWJlci5yZXBsYWNlKG5ldyBSZWdFeHAoXCJbXCIuY29uY2F0KFZBTElEX1BVTkNUVUFUSU9OLCBcIl0rXCIpLCAnZycpLCAnICcpLnRyaW0oKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcGx5SW50ZXJuYXRpb25hbFNlcGFyYXRvclN0eWxlLmpzLm1hcCIsImltcG9ydCBtZXJnZUFycmF5cyBmcm9tICcuL21lcmdlQXJyYXlzLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoZWNrTnVtYmVyTGVuZ3RoKG5hdGlvbmFsTnVtYmVyLCBtZXRhZGF0YSkge1xuICByZXR1cm4gY2hlY2tOdW1iZXJMZW5ndGhGb3JUeXBlKG5hdGlvbmFsTnVtYmVyLCB1bmRlZmluZWQsIG1ldGFkYXRhKTtcbn0gLy8gQ2hlY2tzIHdoZXRoZXIgYSBudW1iZXIgaXMgcG9zc2libGUgZm9yIHRoZSBjb3VudHJ5IGJhc2VkIG9uIGl0cyBsZW5ndGguXG4vLyBTaG91bGQgb25seSBiZSBjYWxsZWQgZm9yIHRoZSBcIm5ld1wiIG1ldGFkYXRhIHdoaWNoIGhhcyBcInBvc3NpYmxlIGxlbmd0aHNcIi5cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTnVtYmVyTGVuZ3RoRm9yVHlwZShuYXRpb25hbE51bWJlciwgdHlwZSwgbWV0YWRhdGEpIHtcbiAgdmFyIHR5cGVfaW5mbyA9IG1ldGFkYXRhLnR5cGUodHlwZSk7IC8vIFRoZXJlIHNob3VsZCBhbHdheXMgYmUgXCI8cG9zc2libGVQZW5ndGhzLz5cIiBzZXQgZm9yIGV2ZXJ5IHR5cGUgZWxlbWVudC5cbiAgLy8gVGhpcyBpcyBkZWNsYXJlZCBpbiB0aGUgWE1MIHNjaGVtYS5cbiAgLy8gRm9yIHNpemUgZWZmaWNpZW5jeSwgd2hlcmUgYSBzdWItZGVzY3JpcHRpb24gKGUuZy4gZml4ZWQtbGluZSlcbiAgLy8gaGFzIHRoZSBzYW1lIFwiPHBvc3NpYmxlUGVuZ3Rocy8+XCIgYXMgdGhlIFwiZ2VuZXJhbCBkZXNjcmlwdGlvblwiLCB0aGlzIGlzIG1pc3NpbmcsXG4gIC8vIHNvIHdlIGZhbGwgYmFjayB0byB0aGUgXCJnZW5lcmFsIGRlc2NyaXB0aW9uXCIuIFdoZXJlIG5vIG51bWJlcnMgb2YgdGhlIHR5cGVcbiAgLy8gZXhpc3QgYXQgYWxsLCB0aGVyZSBpcyBvbmUgcG9zc2libGUgbGVuZ3RoICgtMSkgd2hpY2ggaXMgZ3VhcmFudGVlZFxuICAvLyBub3QgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiBhbnkgcmVhbCBwaG9uZSBudW1iZXIuXG5cbiAgdmFyIHBvc3NpYmxlX2xlbmd0aHMgPSB0eXBlX2luZm8gJiYgdHlwZV9pbmZvLnBvc3NpYmxlTGVuZ3RocygpIHx8IG1ldGFkYXRhLnBvc3NpYmxlTGVuZ3RocygpOyAvLyBsZXQgbG9jYWxfbGVuZ3RocyAgICA9IHR5cGVfaW5mbyAmJiB0eXBlLnBvc3NpYmxlTGVuZ3Roc0xvY2FsKCkgfHwgbWV0YWRhdGEucG9zc2libGVMZW5ndGhzTG9jYWwoKVxuICAvLyBNZXRhZGF0YSBiZWZvcmUgdmVyc2lvbiBgMS4wLjE4YCBkaWRuJ3QgY29udGFpbiBgcG9zc2libGVfbGVuZ3Roc2AuXG5cbiAgaWYgKCFwb3NzaWJsZV9sZW5ndGhzKSB7XG4gICAgcmV0dXJuICdJU19QT1NTSUJMRSc7XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ0ZJWEVEX0xJTkVfT1JfTU9CSUxFJykge1xuICAgIC8vIE5vIHN1Y2ggY291bnRyeSBpbiBtZXRhZGF0YS5cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgaWYgKCFtZXRhZGF0YS50eXBlKCdGSVhFRF9MSU5FJykpIHtcbiAgICAgIC8vIFRoZSByYXJlIGNhc2UgaGFzIGJlZW4gZW5jb3VudGVyZWQgd2hlcmUgbm8gZml4ZWRMaW5lIGRhdGEgaXMgYXZhaWxhYmxlXG4gICAgICAvLyAodHJ1ZSBmb3Igc29tZSBub24tZ2VvZ3JhcGhpYyBlbnRpdGllcyksIHNvIHdlIGp1c3QgY2hlY2sgbW9iaWxlLlxuICAgICAgcmV0dXJuIGNoZWNrTnVtYmVyTGVuZ3RoRm9yVHlwZShuYXRpb25hbE51bWJlciwgJ01PQklMRScsIG1ldGFkYXRhKTtcbiAgICB9XG5cbiAgICB2YXIgbW9iaWxlX3R5cGUgPSBtZXRhZGF0YS50eXBlKCdNT0JJTEUnKTtcblxuICAgIGlmIChtb2JpbGVfdHlwZSkge1xuICAgICAgLy8gTWVyZ2UgdGhlIG1vYmlsZSBkYXRhIGluIGlmIHRoZXJlIHdhcyBhbnkuIFwiQ29uY2F0XCIgY3JlYXRlcyBhIG5ld1xuICAgICAgLy8gYXJyYXksIGl0IGRvZXNuJ3QgZWRpdCBwb3NzaWJsZV9sZW5ndGhzIGluIHBsYWNlLCBzbyB3ZSBkb24ndCBuZWVkIGEgY29weS5cbiAgICAgIC8vIE5vdGUgdGhhdCB3aGVuIGFkZGluZyB0aGUgcG9zc2libGUgbGVuZ3RocyBmcm9tIG1vYmlsZSwgd2UgaGF2ZVxuICAgICAgLy8gdG8gYWdhaW4gY2hlY2sgdGhleSBhcmVuJ3QgZW1wdHkgc2luY2UgaWYgdGhleSBhcmUgdGhpcyBpbmRpY2F0ZXNcbiAgICAgIC8vIHRoZXkgYXJlIHRoZSBzYW1lIGFzIHRoZSBnZW5lcmFsIGRlc2MgYW5kIHNob3VsZCBiZSBvYnRhaW5lZCBmcm9tIHRoZXJlLlxuICAgICAgcG9zc2libGVfbGVuZ3RocyA9IG1lcmdlQXJyYXlzKHBvc3NpYmxlX2xlbmd0aHMsIG1vYmlsZV90eXBlLnBvc3NpYmxlTGVuZ3RocygpKTsgLy8gVGhlIGN1cnJlbnQgbGlzdCBpcyBzb3J0ZWQ7IHdlIG5lZWQgdG8gbWVyZ2UgaW4gdGhlIG5ldyBsaXN0IGFuZFxuICAgICAgLy8gcmUtc29ydCAoZHVwbGljYXRlcyBhcmUgb2theSkuIFNvcnRpbmcgaXNuJ3Qgc28gZXhwZW5zaXZlIGJlY2F1c2VcbiAgICAgIC8vIHRoZSBsaXN0cyBhcmUgdmVyeSBzbWFsbC5cbiAgICAgIC8vIGlmIChsb2NhbF9sZW5ndGhzKSB7XG4gICAgICAvLyBcdGxvY2FsX2xlbmd0aHMgPSBtZXJnZUFycmF5cyhsb2NhbF9sZW5ndGhzLCBtb2JpbGVfdHlwZS5wb3NzaWJsZUxlbmd0aHNMb2NhbCgpKVxuICAgICAgLy8gfSBlbHNlIHtcbiAgICAgIC8vIFx0bG9jYWxfbGVuZ3RocyA9IG1vYmlsZV90eXBlLnBvc3NpYmxlTGVuZ3Roc0xvY2FsKClcbiAgICAgIC8vIH1cbiAgICB9XG4gIH0gLy8gSWYgdGhlIHR5cGUgZG9lc24ndCBleGlzdCB0aGVuIHJldHVybiAnSU5WQUxJRF9MRU5HVEgnLlxuICBlbHNlIGlmICh0eXBlICYmICF0eXBlX2luZm8pIHtcbiAgICByZXR1cm4gJ0lOVkFMSURfTEVOR1RIJztcbiAgfVxuXG4gIHZhciBhY3R1YWxfbGVuZ3RoID0gbmF0aW9uYWxOdW1iZXIubGVuZ3RoOyAvLyBJbiBgbGlicGhvbmVudW1iZXItanNgIGFsbCBcImxvY2FsLW9ubHlcIiBmb3JtYXRzIGFyZSBkcm9wcGVkIGZvciBzaW1wbGljaXR5LlxuICAvLyAvLyBUaGlzIGlzIHNhZmUgYmVjYXVzZSB0aGVyZSBpcyBuZXZlciBhbiBvdmVybGFwIGJld2VlbiB0aGUgcG9zc2libGUgbGVuZ3Roc1xuICAvLyAvLyBhbmQgdGhlIGxvY2FsLW9ubHkgbGVuZ3RoczsgdGhpcyBpcyBjaGVja2VkIGF0IGJ1aWxkIHRpbWUuXG4gIC8vIGlmIChsb2NhbF9sZW5ndGhzICYmIGxvY2FsX2xlbmd0aHMuaW5kZXhPZihuYXRpb25hbE51bWJlci5sZW5ndGgpID49IDApXG4gIC8vIHtcbiAgLy8gXHRyZXR1cm4gJ0lTX1BPU1NJQkxFX0xPQ0FMX09OTFknXG4gIC8vIH1cblxuICB2YXIgbWluaW11bV9sZW5ndGggPSBwb3NzaWJsZV9sZW5ndGhzWzBdO1xuXG4gIGlmIChtaW5pbXVtX2xlbmd0aCA9PT0gYWN0dWFsX2xlbmd0aCkge1xuICAgIHJldHVybiAnSVNfUE9TU0lCTEUnO1xuICB9XG5cbiAgaWYgKG1pbmltdW1fbGVuZ3RoID4gYWN0dWFsX2xlbmd0aCkge1xuICAgIHJldHVybiAnVE9PX1NIT1JUJztcbiAgfVxuXG4gIGlmIChwb3NzaWJsZV9sZW5ndGhzW3Bvc3NpYmxlX2xlbmd0aHMubGVuZ3RoIC0gMV0gPCBhY3R1YWxfbGVuZ3RoKSB7XG4gICAgcmV0dXJuICdUT09fTE9ORyc7XG4gIH0gLy8gV2Ugc2tpcCB0aGUgZmlyc3QgZWxlbWVudCBzaW5jZSB3ZSd2ZSBhbHJlYWR5IGNoZWNrZWQgaXQuXG5cblxuICByZXR1cm4gcG9zc2libGVfbGVuZ3Rocy5pbmRleE9mKGFjdHVhbF9sZW5ndGgsIDEpID49IDAgPyAnSVNfUE9TU0lCTEUnIDogJ0lOVkFMSURfTEVOR1RIJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNoZWNrTnVtYmVyTGVuZ3RoLmpzLm1hcCIsImltcG9ydCB7IFZBTElEX0RJR0lUUyB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy5qcyc7IC8vIFRoZSBSRkMgMzk2NiBmb3JtYXQgZm9yIGV4dGVuc2lvbnMuXG5cbnZhciBSRkMzOTY2X0VYVE5fUFJFRklYID0gJztleHQ9Jztcbi8qKlxyXG4gKiBIZWxwZXIgbWV0aG9kIGZvciBjb25zdHJ1Y3RpbmcgcmVndWxhciBleHByZXNzaW9ucyBmb3IgcGFyc2luZy4gQ3JlYXRlc1xyXG4gKiBhbiBleHByZXNzaW9uIHRoYXQgY2FwdHVyZXMgdXAgdG8gbWF4X2xlbmd0aCBkaWdpdHMuXHJcbiAqIEByZXR1cm4ge3N0cmluZ30gUmVnRXggcGF0dGVybiB0byBjYXB0dXJlIGV4dGVuc2lvbiBkaWdpdHMuXHJcbiAqL1xuXG52YXIgZ2V0RXh0ZW5zaW9uRGlnaXRzUGF0dGVybiA9IGZ1bmN0aW9uIGdldEV4dGVuc2lvbkRpZ2l0c1BhdHRlcm4obWF4TGVuZ3RoKSB7XG4gIHJldHVybiBcIihbXCIuY29uY2F0KFZBTElEX0RJR0lUUywgXCJdezEsXCIpLmNvbmNhdChtYXhMZW5ndGgsIFwifSlcIik7XG59O1xuLyoqXHJcbiAqIEhlbHBlciBpbml0aWFsaXNlciBtZXRob2QgdG8gY3JlYXRlIHRoZSByZWd1bGFyLWV4cHJlc3Npb24gcGF0dGVybiB0byBtYXRjaFxyXG4gKiBleHRlbnNpb25zLlxyXG4gKiBDb3B5LXBhc3RlZCBmcm9tIEdvb2dsZSdzIGBsaWJwaG9uZW51bWJlcmA6XHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvbGlicGhvbmVudW1iZXIvYmxvYi81NWIyNjQ2ZWM5MzkzZjRkM2Q2NjYxYjljODJlZjllMjU4ZThiODI5L2phdmFzY3JpcHQvaTE4bi9waG9uZW51bWJlcnMvcGhvbmVudW1iZXJ1dGlsLmpzI0w3NTktTDc2NlxyXG4gKiBAcmV0dXJuIHtzdHJpbmd9IFJlZ0V4IHBhdHRlcm4gdG8gY2FwdHVyZSBleHRlbnNpb25zLlxyXG4gKi9cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVFeHRlbnNpb25QYXR0ZXJuKHB1cnBvc2UpIHtcbiAgLy8gV2UgY2FwIHRoZSBtYXhpbXVtIGxlbmd0aCBvZiBhbiBleHRlbnNpb24gYmFzZWQgb24gdGhlIGFtYmlndWl0eSBvZiB0aGUgd2F5XG4gIC8vIHRoZSBleHRlbnNpb24gaXMgcHJlZml4ZWQuIEFzIHBlciBJVFUsIHRoZSBvZmZpY2lhbGx5IGFsbG93ZWQgbGVuZ3RoIGZvclxuICAvLyBleHRlbnNpb25zIGlzIGFjdHVhbGx5IDQwLCBidXQgd2UgZG9uJ3Qgc3VwcG9ydCB0aGlzIHNpbmNlIHdlIGhhdmVuJ3Qgc2VlbiByZWFsXG4gIC8vIGV4YW1wbGVzIGFuZCB0aGlzIGludHJvZHVjZXMgbWFueSBmYWxzZSBpbnRlcnByZXRhdGlvbnMgYXMgdGhlIGV4dGVuc2lvbiBsYWJlbHNcbiAgLy8gYXJlIG5vdCBzdGFuZGFyZGl6ZWQuXG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG4gIHZhciBleHRMaW1pdEFmdGVyRXhwbGljaXRMYWJlbCA9ICcyMCc7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gIHZhciBleHRMaW1pdEFmdGVyTGlrZWx5TGFiZWwgPSAnMTUnO1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICB2YXIgZXh0TGltaXRBZnRlckFtYmlndW91c0NoYXIgPSAnOSc7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gIHZhciBleHRMaW1pdFdoZW5Ob3RTdXJlID0gJzYnO1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICB2YXIgcG9zc2libGVTZXBhcmF0b3JzQmV0d2Vlbk51bWJlckFuZEV4dExhYmVsID0gXCJbIFxceEEwXFxcXHQsXSpcIjsgLy8gT3B0aW9uYWwgZnVsbCBzdG9wICguKSBvciBjb2xvbiwgZm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlcy90YWJzL2NvbW1hcy5cblxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICB2YXIgcG9zc2libGVDaGFyc0FmdGVyRXh0TGFiZWwgPSBcIls6XFxcXC5cXHVGRjBFXT9bIFxceEEwXFxcXHQsLV0qXCI7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gIHZhciBvcHRpb25hbEV4dG5TdWZmaXggPSBcIiM/XCI7IC8vIEhlcmUgdGhlIGV4dGVuc2lvbiBpcyBjYWxsZWQgb3V0IGluIG1vcmUgZXhwbGljaXQgd2F5LCBpLmUgbWVudGlvbmluZyBpdCBvYnZpb3VzXG4gIC8vIHBhdHRlcm5zIGxpa2UgXCJleHQuXCIuXG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgdmFyIGV4cGxpY2l0RXh0TGFiZWxzID0gXCIoPzplP3h0KD86ZW5zaSg/Om9cXHUwMzAxP3xcXHhGMykpP24/fFxcdUZGNDU/XFx1RkY1OFxcdUZGNTRcXHVGRjRFP3xcXHUwNDM0XFx1MDQzRVxcdTA0MzF8YW5leG8pXCI7IC8vIE9uZS1jaGFyYWN0ZXIgc3ltYm9scyB0aGF0IGNhbiBiZSB1c2VkIHRvIGluZGljYXRlIGFuIGV4dGVuc2lvbiwgYW5kIGxlc3NcbiAgLy8gY29tbW9ubHkgdXNlZCBvciBtb3JlIGFtYmlndW91cyBleHRlbnNpb24gbGFiZWxzLlxuXG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gIHZhciBhbWJpZ3VvdXNFeHRMYWJlbHMgPSBcIig/Olt4XFx1RkY1OCNcXHVGRjAzflxcdUZGNUVdfGludHxcXHVGRjQ5XFx1RkY0RVxcdUZGNTQpXCI7IC8vIFdoZW4gZXh0ZW5zaW9uIGlzIG5vdCBzZXBhcmF0ZWQgY2xlYXJseS5cblxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICB2YXIgYW1iaWd1b3VzU2VwYXJhdG9yID0gXCJbLSBdK1wiOyAvLyBUaGlzIGlzIHRoZSBzYW1lIGFzIHBvc3NpYmxlU2VwYXJhdG9yc0JldHdlZW5OdW1iZXJBbmRFeHRMYWJlbCwgYnV0IG5vdCBtYXRjaGluZ1xuICAvLyBjb21tYSBhcyBleHRlbnNpb24gbGFiZWwgbWF5IGhhdmUgaXQuXG5cbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgdmFyIHBvc3NpYmxlU2VwYXJhdG9yc051bWJlckV4dExhYmVsTm9Db21tYSA9IFwiWyBcXHhBMFxcXFx0XSpcIjsgLy8gXCIsLFwiIGlzIGNvbW1vbmx5IHVzZWQgZm9yIGF1dG8gZGlhbGxpbmcgdGhlIGV4dGVuc2lvbiB3aGVuIGNvbm5lY3RlZC4gRmlyc3RcbiAgLy8gY29tbWEgaXMgbWF0Y2hlZCB0aHJvdWdoIHBvc3NpYmxlU2VwYXJhdG9yc0JldHdlZW5OdW1iZXJBbmRFeHRMYWJlbCwgc28gd2UgZG9cbiAgLy8gbm90IHJlcGVhdCBpdCBoZXJlLiBTZW1pLWNvbG9uIHdvcmtzIGluIElwaG9uZSBhbmQgQW5kcm9pZCBhbHNvIHRvIHBvcCB1cCBhXG4gIC8vIGJ1dHRvbiB3aXRoIHRoZSBleHRlbnNpb24gbnVtYmVyIGZvbGxvd2luZy5cblxuICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICB2YXIgYXV0b0RpYWxsaW5nQW5kRXh0TGFiZWxzRm91bmQgPSBcIig/Oix7Mn18OylcIjtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgdmFyIHJmY0V4dG4gPSBSRkMzOTY2X0VYVE5fUFJFRklYICsgZ2V0RXh0ZW5zaW9uRGlnaXRzUGF0dGVybihleHRMaW1pdEFmdGVyRXhwbGljaXRMYWJlbCk7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gIHZhciBleHBsaWNpdEV4dG4gPSBwb3NzaWJsZVNlcGFyYXRvcnNCZXR3ZWVuTnVtYmVyQW5kRXh0TGFiZWwgKyBleHBsaWNpdEV4dExhYmVscyArIHBvc3NpYmxlQ2hhcnNBZnRlckV4dExhYmVsICsgZ2V0RXh0ZW5zaW9uRGlnaXRzUGF0dGVybihleHRMaW1pdEFmdGVyRXhwbGljaXRMYWJlbCkgKyBvcHRpb25hbEV4dG5TdWZmaXg7XG4gIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuXG4gIHZhciBhbWJpZ3VvdXNFeHRuID0gcG9zc2libGVTZXBhcmF0b3JzQmV0d2Vlbk51bWJlckFuZEV4dExhYmVsICsgYW1iaWd1b3VzRXh0TGFiZWxzICsgcG9zc2libGVDaGFyc0FmdGVyRXh0TGFiZWwgKyBnZXRFeHRlbnNpb25EaWdpdHNQYXR0ZXJuKGV4dExpbWl0QWZ0ZXJBbWJpZ3VvdXNDaGFyKSArIG9wdGlvbmFsRXh0blN1ZmZpeDtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgdmFyIGFtZXJpY2FuU3R5bGVFeHRuV2l0aFN1ZmZpeCA9IGFtYmlndW91c1NlcGFyYXRvciArIGdldEV4dGVuc2lvbkRpZ2l0c1BhdHRlcm4oZXh0TGltaXRXaGVuTm90U3VyZSkgKyBcIiNcIjtcbiAgLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5cbiAgdmFyIGF1dG9EaWFsbGluZ0V4dG4gPSBwb3NzaWJsZVNlcGFyYXRvcnNOdW1iZXJFeHRMYWJlbE5vQ29tbWEgKyBhdXRvRGlhbGxpbmdBbmRFeHRMYWJlbHNGb3VuZCArIHBvc3NpYmxlQ2hhcnNBZnRlckV4dExhYmVsICsgZ2V0RXh0ZW5zaW9uRGlnaXRzUGF0dGVybihleHRMaW1pdEFmdGVyTGlrZWx5TGFiZWwpICsgb3B0aW9uYWxFeHRuU3VmZml4O1xuICAvKiogQHR5cGUge3N0cmluZ30gKi9cblxuICB2YXIgb25seUNvbW1hc0V4dG4gPSBwb3NzaWJsZVNlcGFyYXRvcnNOdW1iZXJFeHRMYWJlbE5vQ29tbWEgKyBcIig/OiwpK1wiICsgcG9zc2libGVDaGFyc0FmdGVyRXh0TGFiZWwgKyBnZXRFeHRlbnNpb25EaWdpdHNQYXR0ZXJuKGV4dExpbWl0QWZ0ZXJBbWJpZ3VvdXNDaGFyKSArIG9wdGlvbmFsRXh0blN1ZmZpeDsgLy8gVGhlIGZpcnN0IHJlZ3VsYXIgZXhwcmVzc2lvbiBjb3ZlcnMgUkZDIDM5NjYgZm9ybWF0LCB3aGVyZSB0aGUgZXh0ZW5zaW9uIGlzIGFkZGVkXG4gIC8vIHVzaW5nIFwiO2V4dD1cIi4gVGhlIHNlY29uZCBtb3JlIGdlbmVyaWMgd2hlcmUgZXh0ZW5zaW9uIGlzIG1lbnRpb25lZCB3aXRoIGV4cGxpY2l0XG4gIC8vIGxhYmVscyBsaWtlIFwiZXh0OlwiLiBJbiBib3RoIHRoZSBhYm92ZSBjYXNlcyB3ZSBhbGxvdyBtb3JlIG51bWJlcnMgaW4gZXh0ZW5zaW9uIHRoYW5cbiAgLy8gYW55IG90aGVyIGV4dGVuc2lvbiBsYWJlbHMuIFRoZSB0aGlyZCBvbmUgY2FwdHVyZXMgd2hlbiBzaW5nbGUgY2hhcmFjdGVyIGV4dGVuc2lvblxuICAvLyBsYWJlbHMgb3IgbGVzcyBjb21tb25seSB1c2VkIGxhYmVscyBhcmUgdXNlZC4gSW4gc3VjaCBjYXNlcyB3ZSBjYXB0dXJlIGZld2VyXG4gIC8vIGV4dGVuc2lvbiBkaWdpdHMgaW4gb3JkZXIgdG8gcmVkdWNlIHRoZSBjaGFuY2Ugb2YgZmFsc2VseSBpbnRlcnByZXRpbmcgdHdvXG4gIC8vIG51bWJlcnMgYmVzaWRlIGVhY2ggb3RoZXIgYXMgYSBudW1iZXIgKyBleHRlbnNpb24uIFRoZSBmb3VydGggb25lIGNvdmVycyB0aGVcbiAgLy8gc3BlY2lhbCBjYXNlIG9mIEFtZXJpY2FuIG51bWJlcnMgd2hlcmUgdGhlIGV4dGVuc2lvbiBpcyB3cml0dGVuIHdpdGggYSBoYXNoXG4gIC8vIGF0IHRoZSBlbmQsIHN1Y2ggYXMgXCItIDUwMyNcIi4gVGhlIGZpZnRoIG9uZSBpcyBleGNsdXNpdmVseSBmb3IgZXh0ZW5zaW9uXG4gIC8vIGF1dG9kaWFsbGluZyBmb3JtYXRzIHdoaWNoIGFyZSB1c2VkIHdoZW4gZGlhbGxpbmcgYW5kIGluIHRoaXMgY2FzZSB3ZSBhY2NlcHQgbG9uZ2VyXG4gIC8vIGV4dGVuc2lvbnMuIFRoZSBsYXN0IG9uZSBpcyBtb3JlIGxpYmVyYWwgb24gdGhlIG51bWJlciBvZiBjb21tYXMgdGhhdCBhY3RzIGFzXG4gIC8vIGV4dGVuc2lvbiBsYWJlbHMsIHNvIHdlIGhhdmUgYSBzdHJpY3QgY2FwIG9uIHRoZSBudW1iZXIgb2YgZGlnaXRzIGluIHN1Y2ggZXh0ZW5zaW9ucy5cblxuICByZXR1cm4gcmZjRXh0biArIFwifFwiICsgZXhwbGljaXRFeHRuICsgXCJ8XCIgKyBhbWJpZ3VvdXNFeHRuICsgXCJ8XCIgKyBhbWVyaWNhblN0eWxlRXh0bldpdGhTdWZmaXggKyBcInxcIiArIGF1dG9EaWFsbGluZ0V4dG4gKyBcInxcIiArIG9ubHlDb21tYXNFeHRuO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXh0ZW5zaW9uUGF0dGVybi5qcy5tYXAiLCJpbXBvcnQgY3JlYXRlRXh0ZW5zaW9uUGF0dGVybiBmcm9tICcuL2NyZWF0ZUV4dGVuc2lvblBhdHRlcm4uanMnOyAvLyBSZWdleHAgb2YgYWxsIGtub3duIGV4dGVuc2lvbiBwcmVmaXhlcyB1c2VkIGJ5IGRpZmZlcmVudCByZWdpb25zIGZvbGxvd2VkIGJ5XG4vLyAxIG9yIG1vcmUgdmFsaWQgZGlnaXRzLCBmb3IgdXNlIHdoZW4gcGFyc2luZy5cblxudmFyIEVYVE5fUEFUVEVSTiA9IG5ldyBSZWdFeHAoJyg/OicgKyBjcmVhdGVFeHRlbnNpb25QYXR0ZXJuKCkgKyAnKSQnLCAnaScpOyAvLyBTdHJpcHMgYW55IGV4dGVuc2lvbiAoYXMgaW4sIHRoZSBwYXJ0IG9mIHRoZSBudW1iZXIgZGlhbGxlZCBhZnRlciB0aGUgY2FsbCBpc1xuLy8gY29ubmVjdGVkLCB1c3VhbGx5IGluZGljYXRlZCB3aXRoIGV4dG4sIGV4dCwgeCBvciBzaW1pbGFyKSBmcm9tIHRoZSBlbmQgb2Zcbi8vIHRoZSBudW1iZXIsIGFuZCByZXR1cm5zIGl0LlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0RXh0ZW5zaW9uKG51bWJlcikge1xuICB2YXIgc3RhcnQgPSBudW1iZXIuc2VhcmNoKEVYVE5fUEFUVEVSTik7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHJldHVybiB7fTtcbiAgfSAvLyBJZiB3ZSBmaW5kIGEgcG90ZW50aWFsIGV4dGVuc2lvbiwgYW5kIHRoZSBudW1iZXIgcHJlY2VkaW5nIHRoaXMgaXMgYSB2aWFibGVcbiAgLy8gbnVtYmVyLCB3ZSBhc3N1bWUgaXQgaXMgYW4gZXh0ZW5zaW9uLlxuXG5cbiAgdmFyIG51bWJlcldpdGhvdXRFeHRlbnNpb24gPSBudW1iZXIuc2xpY2UoMCwgc3RhcnQpO1xuICB2YXIgbWF0Y2hlcyA9IG51bWJlci5tYXRjaChFWFROX1BBVFRFUk4pO1xuICB2YXIgaSA9IDE7XG5cbiAgd2hpbGUgKGkgPCBtYXRjaGVzLmxlbmd0aCkge1xuICAgIGlmIChtYXRjaGVzW2ldKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBudW1iZXI6IG51bWJlcldpdGhvdXRFeHRlbnNpb24sXG4gICAgICAgIGV4dDogbWF0Y2hlc1tpXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpKys7XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4dHJhY3RFeHRlbnNpb24uanMubWFwIiwiaW1wb3J0IHN0cmlwSWRkUHJlZml4IGZyb20gJy4vc3RyaXBJZGRQcmVmaXguanMnO1xuaW1wb3J0IGV4dHJhY3RDb3VudHJ5Q2FsbGluZ0NvZGVGcm9tSW50ZXJuYXRpb25hbE51bWJlcldpdGhvdXRQbHVzU2lnbiBmcm9tICcuL2V4dHJhY3RDb3VudHJ5Q2FsbGluZ0NvZGVGcm9tSW50ZXJuYXRpb25hbE51bWJlcldpdGhvdXRQbHVzU2lnbi5qcyc7XG5pbXBvcnQgTWV0YWRhdGEgZnJvbSAnLi4vbWV0YWRhdGEuanMnO1xuaW1wb3J0IHsgTUFYX0xFTkdUSF9DT1VOVFJZX0NPREUgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuLyoqXHJcbiAqIENvbnZlcnRzIGEgcGhvbmUgbnVtYmVyIGRpZ2l0cyAocG9zc2libHkgd2l0aCBhIGArYClcclxuICogaW50byBhIGNhbGxpbmcgY29kZSBhbmQgdGhlIHJlc3QgcGhvbmUgbnVtYmVyIGRpZ2l0cy5cclxuICogVGhlIFwicmVzdCBwaG9uZSBudW1iZXIgZGlnaXRzXCIgY291bGQgaW5jbHVkZVxyXG4gKiBhIG5hdGlvbmFsIHByZWZpeCwgY2FycmllciBjb2RlLCBhbmQgbmF0aW9uYWxcclxuICogKHNpZ25pZmljYW50KSBudW1iZXIuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbnVtYmVyIOKAlCBQaG9uZSBudW1iZXIgZGlnaXRzIChwb3NzaWJseSB3aXRoIGEgYCtgKS5cclxuICogQHBhcmFtICB7c3RyaW5nfSBbY291bnRyeV0g4oCUwqBEZWZhdWx0IGNvdW50cnkuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gW2NhbGxpbmdDb2RlXSDigJQgRGVmYXVsdCBjYWxsaW5nIGNvZGUgKHNvbWUgcGhvbmUgbnVtYmVyaW5nIHBsYW5zIGFyZSBub24tZ2VvZ3JhcGhpYykuXHJcbiAqIEBwYXJhbSAge29iamVjdH0gbWV0YWRhdGFcclxuICogQHJldHVybiB7b2JqZWN0fSBgeyBjb3VudHJ5Q2FsbGluZ0NvZGVTb3VyY2U6IHN0cmluZz8sIGNvdW50cnlDYWxsaW5nQ29kZTogc3RyaW5nPywgbnVtYmVyOiBzdHJpbmcgfWBcclxuICogQGV4YW1wbGVcclxuICogLy8gUmV0dXJucyBgeyBjb3VudHJ5Q2FsbGluZ0NvZGU6IFwiMVwiLCBudW1iZXI6IFwiMjEzMzczNDI1M1wiIH1gLlxyXG4gKiBleHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlKCcyMTMzNzM0MjUzJywgJ1VTJywgbnVsbCwgbWV0YWRhdGEpXHJcbiAqIGV4dHJhY3RDb3VudHJ5Q2FsbGluZ0NvZGUoJzIxMzM3MzQyNTMnLCBudWxsLCAnMScsIG1ldGFkYXRhKVxyXG4gKiBleHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlKCcrMTIxMzM3MzQyNTMnLCBudWxsLCBudWxsLCBtZXRhZGF0YSlcclxuICogZXh0cmFjdENvdW50cnlDYWxsaW5nQ29kZSgnKzEyMTMzNzM0MjUzJywgJ1JVJywgbnVsbCwgbWV0YWRhdGEpXHJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlKG51bWJlciwgY291bnRyeSwgY2FsbGluZ0NvZGUsIG1ldGFkYXRhKSB7XG4gIGlmICghbnVtYmVyKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgdmFyIGlzTnVtYmVyV2l0aElkZFByZWZpeDsgLy8gSWYgdGhpcyBpcyBub3QgYW4gaW50ZXJuYXRpb25hbCBwaG9uZSBudW1iZXIsXG4gIC8vIHRoZW4gZWl0aGVyIGV4dHJhY3QgYW4gXCJJRERcIiBwcmVmaXgsIG9yIGV4dHJhY3QgYVxuICAvLyBjb3VudHJ5IGNhbGxpbmcgY29kZSBmcm9tIGEgbnVtYmVyIGJ5IGF1dG9jb3JyZWN0aW5nIGl0XG4gIC8vIGJ5IHByZXBlbmRpbmcgYSBsZWFkaW5nIGArYCBpbiBjYXNlcyB3aGVuIGl0IHN0YXJ0c1xuICAvLyB3aXRoIHRoZSBjb3VudHJ5IGNhbGxpbmcgY29kZS5cbiAgLy8gaHR0cHM6Ly93aWtpdHJhdmVsLm9yZy9lbi9JbnRlcm5hdGlvbmFsX2RpYWxsaW5nX3ByZWZpeFxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2F0YW1waGV0YW1pbmUvbGlicGhvbmVudW1iZXItanMvaXNzdWVzLzM3NlxuXG4gIGlmIChudW1iZXJbMF0gIT09ICcrJykge1xuICAgIC8vIENvbnZlcnQgYW4gXCJvdXQtb2YtY291bnRyeVwiIGRpYWxpbmcgcGhvbmUgbnVtYmVyXG4gICAgLy8gdG8gYSBwcm9wZXIgaW50ZXJuYXRpb25hbCBwaG9uZSBudW1iZXIuXG4gICAgdmFyIG51bWJlcldpdGhvdXRJREQgPSBzdHJpcElkZFByZWZpeChudW1iZXIsIGNvdW50cnksIGNhbGxpbmdDb2RlLCBtZXRhZGF0YSk7IC8vIElmIGFuIElERCBwcmVmaXggd2FzIHN0cmlwcGVkIHRoZW5cbiAgICAvLyBjb252ZXJ0IHRoZSBudW1iZXIgdG8gaW50ZXJuYXRpb25hbCBvbmVcbiAgICAvLyBmb3Igc3Vic2VxdWVudCBwYXJzaW5nLlxuXG4gICAgaWYgKG51bWJlcldpdGhvdXRJREQgJiYgbnVtYmVyV2l0aG91dElERCAhPT0gbnVtYmVyKSB7XG4gICAgICBpc051bWJlcldpdGhJZGRQcmVmaXggPSB0cnVlO1xuICAgICAgbnVtYmVyID0gJysnICsgbnVtYmVyV2l0aG91dElERDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2hlY2sgdG8gc2VlIGlmIHRoZSBudW1iZXIgc3RhcnRzIHdpdGggdGhlIGNvdW50cnkgY2FsbGluZyBjb2RlXG4gICAgICAvLyBmb3IgdGhlIGRlZmF1bHQgY291bnRyeS4gSWYgc28sIHdlIHJlbW92ZSB0aGUgY291bnRyeSBjYWxsaW5nIGNvZGUsXG4gICAgICAvLyBhbmQgZG8gc29tZSBjaGVja3Mgb24gdGhlIHZhbGlkaXR5IG9mIHRoZSBudW1iZXIgYmVmb3JlIGFuZCBhZnRlci5cbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jYXRhbXBoZXRhbWluZS9saWJwaG9uZW51bWJlci1qcy9pc3N1ZXMvMzc2XG4gICAgICBpZiAoY291bnRyeSB8fCBjYWxsaW5nQ29kZSkge1xuICAgICAgICB2YXIgX2V4dHJhY3RDb3VudHJ5Q2FsbGluID0gZXh0cmFjdENvdW50cnlDYWxsaW5nQ29kZUZyb21JbnRlcm5hdGlvbmFsTnVtYmVyV2l0aG91dFBsdXNTaWduKG51bWJlciwgY291bnRyeSwgY2FsbGluZ0NvZGUsIG1ldGFkYXRhKSxcbiAgICAgICAgICAgIGNvdW50cnlDYWxsaW5nQ29kZSA9IF9leHRyYWN0Q291bnRyeUNhbGxpbi5jb3VudHJ5Q2FsbGluZ0NvZGUsXG4gICAgICAgICAgICBzaG9ydGVyTnVtYmVyID0gX2V4dHJhY3RDb3VudHJ5Q2FsbGluLm51bWJlcjtcblxuICAgICAgICBpZiAoY291bnRyeUNhbGxpbmdDb2RlKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvdW50cnlDYWxsaW5nQ29kZVNvdXJjZTogJ0ZST01fTlVNQkVSX1dJVEhPVVRfUExVU19TSUdOJyxcbiAgICAgICAgICAgIGNvdW50cnlDYWxsaW5nQ29kZTogY291bnRyeUNhbGxpbmdDb2RlLFxuICAgICAgICAgICAgbnVtYmVyOiBzaG9ydGVyTnVtYmVyXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAvLyBObyBuZWVkIHRvIHNldCBpdCB0byBgVU5TUEVDSUZJRURgLiBJdCBjYW4gYmUganVzdCBgdW5kZWZpbmVkYC5cbiAgICAgICAgLy8gY291bnRyeUNhbGxpbmdDb2RlU291cmNlOiAnVU5TUEVDSUZJRUQnLFxuICAgICAgICBudW1iZXI6IG51bWJlclxuICAgICAgfTtcbiAgICB9XG4gIH0gLy8gRmFzdCBhYm9ydGlvbjogY291bnRyeSBjb2RlcyBkbyBub3QgYmVnaW4gd2l0aCBhICcwJ1xuXG5cbiAgaWYgKG51bWJlclsxXSA9PT0gJzAnKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEobWV0YWRhdGEpOyAvLyBUaGUgdGhpbmcgd2l0aCBjb3VudHJ5IHBob25lIGNvZGVzXG4gIC8vIGlzIHRoYXQgdGhleSBhcmUgb3J0aG9nb25hbCB0byBlYWNoIG90aGVyXG4gIC8vIGkuZS4gdGhlcmUncyBubyBzdWNoIGNvdW50cnkgcGhvbmUgY29kZSBBXG4gIC8vIGZvciB3aGljaCBjb3VudHJ5IHBob25lIGNvZGUgQiBleGlzdHNcbiAgLy8gd2hlcmUgQiBzdGFydHMgd2l0aCBBLlxuICAvLyBUaGVyZWZvcmUsIHdoaWxlIHNjYW5uaW5nIGRpZ2l0cyxcbiAgLy8gaWYgYSB2YWxpZCBjb3VudHJ5IGNvZGUgaXMgZm91bmQsXG4gIC8vIHRoYXQgbWVhbnMgdGhhdCBpdCBpcyB0aGUgY291bnRyeSBjb2RlLlxuICAvL1xuXG4gIHZhciBpID0gMjtcblxuICB3aGlsZSAoaSAtIDEgPD0gTUFYX0xFTkdUSF9DT1VOVFJZX0NPREUgJiYgaSA8PSBudW1iZXIubGVuZ3RoKSB7XG4gICAgdmFyIF9jb3VudHJ5Q2FsbGluZ0NvZGUgPSBudW1iZXIuc2xpY2UoMSwgaSk7XG5cbiAgICBpZiAobWV0YWRhdGEuaGFzQ2FsbGluZ0NvZGUoX2NvdW50cnlDYWxsaW5nQ29kZSkpIHtcbiAgICAgIG1ldGFkYXRhLnNlbGVjdE51bWJlcmluZ1BsYW4oX2NvdW50cnlDYWxsaW5nQ29kZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3VudHJ5Q2FsbGluZ0NvZGVTb3VyY2U6IGlzTnVtYmVyV2l0aElkZFByZWZpeCA/ICdGUk9NX05VTUJFUl9XSVRIX0lERCcgOiAnRlJPTV9OVU1CRVJfV0lUSF9QTFVTX1NJR04nLFxuICAgICAgICBjb3VudHJ5Q2FsbGluZ0NvZGU6IF9jb3VudHJ5Q2FsbGluZ0NvZGUsXG4gICAgICAgIG51bWJlcjogbnVtYmVyLnNsaWNlKGkpXG4gICAgICB9O1xuICAgIH1cblxuICAgIGkrKztcbiAgfVxuXG4gIHJldHVybiB7fTtcbn0gLy8gVGhlIHBvc3NpYmxlIHZhbHVlcyBmb3IgdGhlIHJldHVybmVkIGBjb3VudHJ5Q2FsbGluZ0NvZGVTb3VyY2VgIGFyZTpcbi8vXG4vLyBDb3B5LXBhc3RlZCBmcm9tOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9saWJwaG9uZW51bWJlci9ibG9iL21hc3Rlci9yZXNvdXJjZXMvcGhvbmVudW1iZXIucHJvdG9cbi8vXG4vLyAvLyBUaGUgc291cmNlIGZyb20gd2hpY2ggdGhlIGNvdW50cnlfY29kZSBpcyBkZXJpdmVkLiBUaGlzIGlzIG5vdCBzZXQgaW4gdGhlXG4vLyAvLyBnZW5lcmFsIHBhcnNpbmcgbWV0aG9kLCBidXQgaW4gdGhlIG1ldGhvZCB0aGF0IHBhcnNlcyBhbmQga2VlcHMgcmF3X2lucHV0LlxuLy8gLy8gTmV3IGZpZWxkcyBjb3VsZCBiZSBhZGRlZCB1cG9uIHJlcXVlc3QuXG4vLyBlbnVtIENvdW50cnlDb2RlU291cmNlIHtcbi8vICAvLyBEZWZhdWx0IHZhbHVlIHJldHVybmVkIGlmIHRoaXMgaXMgbm90IHNldCwgYmVjYXVzZSB0aGUgcGhvbmUgbnVtYmVyIHdhc1xuLy8gIC8vIGNyZWF0ZWQgdXNpbmcgcGFyc2UsIG5vdCBwYXJzZUFuZEtlZXBSYXdJbnB1dC4gaGFzQ291bnRyeUNvZGVTb3VyY2Ugd2lsbFxuLy8gIC8vIHJldHVybiBmYWxzZSBpZiB0aGlzIGlzIHRoZSBjYXNlLlxuLy8gIFVOU1BFQ0lGSUVEID0gMDtcbi8vXG4vLyAgLy8gVGhlIGNvdW50cnlfY29kZSBpcyBkZXJpdmVkIGJhc2VkIG9uIGEgcGhvbmUgbnVtYmVyIHdpdGggYSBsZWFkaW5nIFwiK1wiLFxuLy8gIC8vIGUuZy4gdGhlIEZyZW5jaCBudW1iZXIgXCIrMzMgMSA0MiA2OCA1MyAwMFwiLlxuLy8gIEZST01fTlVNQkVSX1dJVEhfUExVU19TSUdOID0gMTtcbi8vXG4vLyAgLy8gVGhlIGNvdW50cnlfY29kZSBpcyBkZXJpdmVkIGJhc2VkIG9uIGEgcGhvbmUgbnVtYmVyIHdpdGggYSBsZWFkaW5nIElERCxcbi8vICAvLyBlLmcuIHRoZSBGcmVuY2ggbnVtYmVyIFwiMDExIDMzIDEgNDIgNjggNTMgMDBcIiwgYXMgaXQgaXMgZGlhbGxlZCBmcm9tIFVTLlxuLy8gIEZST01fTlVNQkVSX1dJVEhfSUREID0gNTtcbi8vXG4vLyAgLy8gVGhlIGNvdW50cnlfY29kZSBpcyBkZXJpdmVkIGJhc2VkIG9uIGEgcGhvbmUgbnVtYmVyIHdpdGhvdXQgYSBsZWFkaW5nXG4vLyAgLy8gXCIrXCIsIGUuZy4gdGhlIEZyZW5jaCBudW1iZXIgXCIzMyAxIDQyIDY4IDUzIDAwXCIgd2hlbiBkZWZhdWx0Q291bnRyeSBpc1xuLy8gIC8vIHN1cHBsaWVkIGFzIEZyYW5jZS5cbi8vICBGUk9NX05VTUJFUl9XSVRIT1VUX1BMVVNfU0lHTiA9IDEwO1xuLy9cbi8vICAvLyBUaGUgY291bnRyeV9jb2RlIGlzIGRlcml2ZWQgTk9UIGJhc2VkIG9uIHRoZSBwaG9uZSBudW1iZXIgaXRzZWxmLCBidXRcbi8vICAvLyBmcm9tIHRoZSBkZWZhdWx0Q291bnRyeSBwYXJhbWV0ZXIgcHJvdmlkZWQgaW4gdGhlIHBhcnNpbmcgZnVuY3Rpb24gYnkgdGhlXG4vLyAgLy8gY2xpZW50cy4gVGhpcyBoYXBwZW5zIG1vc3RseSBmb3IgbnVtYmVycyB3cml0dGVuIGluIHRoZSBuYXRpb25hbCBmb3JtYXRcbi8vICAvLyAod2l0aG91dCBjb3VudHJ5IGNvZGUpLiBGb3IgZXhhbXBsZSwgdGhpcyB3b3VsZCBiZSBzZXQgd2hlbiBwYXJzaW5nIHRoZVxuLy8gIC8vIEZyZW5jaCBudW1iZXIgXCIwMSA0MiA2OCA1MyAwMFwiLCB3aGVuIGRlZmF1bHRDb3VudHJ5IGlzIHN1cHBsaWVkIGFzXG4vLyAgLy8gRnJhbmNlLlxuLy8gIEZST01fREVGQVVMVF9DT1VOVFJZID0gMjA7XG4vLyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlLmpzLm1hcCIsImltcG9ydCBNZXRhZGF0YSBmcm9tICcuLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgbWF0Y2hlc0VudGlyZWx5IGZyb20gJy4vbWF0Y2hlc0VudGlyZWx5LmpzJztcbmltcG9ydCBleHRyYWN0TmF0aW9uYWxOdW1iZXIgZnJvbSAnLi9leHRyYWN0TmF0aW9uYWxOdW1iZXIuanMnO1xuaW1wb3J0IGNoZWNrTnVtYmVyTGVuZ3RoIGZyb20gJy4vY2hlY2tOdW1iZXJMZW5ndGguanMnO1xuaW1wb3J0IGdldENvdW50cnlDYWxsaW5nQ29kZSBmcm9tICcuLi9nZXRDb3VudHJ5Q2FsbGluZ0NvZGUuanMnO1xuLyoqXHJcbiAqIFNvbWV0aW1lcyBzb21lIHBlb3BsZSBpbmNvcnJlY3RseSBpbnB1dCBpbnRlcm5hdGlvbmFsIHBob25lIG51bWJlcnNcclxuICogd2l0aG91dCB0aGUgbGVhZGluZyBgK2AuIFRoaXMgZnVuY3Rpb24gY29ycmVjdHMgc3VjaCBpbnB1dC5cclxuICogQHBhcmFtICB7c3RyaW5nfSBudW1iZXIg4oCUIFBob25lIG51bWJlciBkaWdpdHMuXHJcbiAqIEBwYXJhbSAge3N0cmluZz99IGNvdW50cnlcclxuICogQHBhcmFtICB7c3RyaW5nP30gY2FsbGluZ0NvZGVcclxuICogQHBhcmFtICB7b2JqZWN0fSBtZXRhZGF0YVxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IGB7IGNvdW50cnlDYWxsaW5nQ29kZTogc3RyaW5nPywgbnVtYmVyOiBzdHJpbmcgfWAuXHJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRyYWN0Q291bnRyeUNhbGxpbmdDb2RlRnJvbUludGVybmF0aW9uYWxOdW1iZXJXaXRob3V0UGx1c1NpZ24obnVtYmVyLCBjb3VudHJ5LCBjYWxsaW5nQ29kZSwgbWV0YWRhdGEpIHtcbiAgdmFyIGNvdW50cnlDYWxsaW5nQ29kZSA9IGNvdW50cnkgPyBnZXRDb3VudHJ5Q2FsbGluZ0NvZGUoY291bnRyeSwgbWV0YWRhdGEpIDogY2FsbGluZ0NvZGU7XG5cbiAgaWYgKG51bWJlci5pbmRleE9mKGNvdW50cnlDYWxsaW5nQ29kZSkgPT09IDApIHtcbiAgICBtZXRhZGF0YSA9IG5ldyBNZXRhZGF0YShtZXRhZGF0YSk7XG4gICAgbWV0YWRhdGEuc2VsZWN0TnVtYmVyaW5nUGxhbihjb3VudHJ5LCBjYWxsaW5nQ29kZSk7XG4gICAgdmFyIHBvc3NpYmxlU2hvcnRlck51bWJlciA9IG51bWJlci5zbGljZShjb3VudHJ5Q2FsbGluZ0NvZGUubGVuZ3RoKTtcblxuICAgIHZhciBfZXh0cmFjdE5hdGlvbmFsTnVtYmUgPSBleHRyYWN0TmF0aW9uYWxOdW1iZXIocG9zc2libGVTaG9ydGVyTnVtYmVyLCBtZXRhZGF0YSksXG4gICAgICAgIHBvc3NpYmxlU2hvcnRlck5hdGlvbmFsTnVtYmVyID0gX2V4dHJhY3ROYXRpb25hbE51bWJlLm5hdGlvbmFsTnVtYmVyO1xuXG4gICAgdmFyIF9leHRyYWN0TmF0aW9uYWxOdW1iZTIgPSBleHRyYWN0TmF0aW9uYWxOdW1iZXIobnVtYmVyLCBtZXRhZGF0YSksXG4gICAgICAgIG5hdGlvbmFsTnVtYmVyID0gX2V4dHJhY3ROYXRpb25hbE51bWJlMi5uYXRpb25hbE51bWJlcjsgLy8gSWYgdGhlIG51bWJlciB3YXMgbm90IHZhbGlkIGJlZm9yZSBidXQgaXMgdmFsaWQgbm93LFxuICAgIC8vIG9yIGlmIGl0IHdhcyB0b28gbG9uZyBiZWZvcmUsIHdlIGNvbnNpZGVyIHRoZSBudW1iZXJcbiAgICAvLyB3aXRoIHRoZSBjb3VudHJ5IGNhbGxpbmcgY29kZSBzdHJpcHBlZCB0byBiZSBhIGJldHRlciByZXN1bHRcbiAgICAvLyBhbmQga2VlcCB0aGF0IGluc3RlYWQuXG4gICAgLy8gRm9yIGV4YW1wbGUsIGluIEdlcm1hbnkgKCs0OSksIGA0OWAgaXMgYSB2YWxpZCBhcmVhIGNvZGUsXG4gICAgLy8gc28gaWYgYSBudW1iZXIgc3RhcnRzIHdpdGggYDQ5YCwgaXQgY291bGQgYmUgYm90aCBhIHZhbGlkXG4gICAgLy8gbmF0aW9uYWwgR2VybWFuIG51bWJlciBvciBhbiBpbnRlcm5hdGlvbmFsIG51bWJlciB3aXRob3V0XG4gICAgLy8gYSBsZWFkaW5nIGArYC5cblxuXG4gICAgaWYgKCFtYXRjaGVzRW50aXJlbHkobmF0aW9uYWxOdW1iZXIsIG1ldGFkYXRhLm5hdGlvbmFsTnVtYmVyUGF0dGVybigpKSAmJiBtYXRjaGVzRW50aXJlbHkocG9zc2libGVTaG9ydGVyTmF0aW9uYWxOdW1iZXIsIG1ldGFkYXRhLm5hdGlvbmFsTnVtYmVyUGF0dGVybigpKSB8fCBjaGVja051bWJlckxlbmd0aChuYXRpb25hbE51bWJlciwgbWV0YWRhdGEpID09PSAnVE9PX0xPTkcnKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb3VudHJ5Q2FsbGluZ0NvZGU6IGNvdW50cnlDYWxsaW5nQ29kZSxcbiAgICAgICAgbnVtYmVyOiBwb3NzaWJsZVNob3J0ZXJOdW1iZXJcbiAgICAgIH07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBudW1iZXI6IG51bWJlclxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdENvdW50cnlDYWxsaW5nQ29kZUZyb21JbnRlcm5hdGlvbmFsTnVtYmVyV2l0aG91dFBsdXNTaWduLmpzLm1hcCIsImltcG9ydCBleHRyYWN0UGhvbmVDb250ZXh0LCB7IGlzUGhvbmVDb250ZXh0VmFsaWQsIFBMVVNfU0lHTiwgUkZDMzk2Nl9QUkVGSVhfLCBSRkMzOTY2X1BIT05FX0NPTlRFWFRfLCBSRkMzOTY2X0lTRE5fU1VCQUREUkVTU18gfSBmcm9tICcuL2V4dHJhY3RQaG9uZUNvbnRleHQuanMnO1xuaW1wb3J0IFBhcnNlRXJyb3IgZnJvbSAnLi4vUGFyc2VFcnJvci5qcyc7XG4vKipcclxuICogQHBhcmFtICB7c3RyaW5nfSBudW1iZXJUb1BhcnNlXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbmF0aW9uYWxOdW1iZXJcclxuICogQHJldHVybiB7fVxyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdEZvcm1hdHRlZFBob25lTnVtYmVyRnJvbVBvc3NpYmxlUmZjMzk2Nk51bWJlclVyaShudW1iZXJUb1BhcnNlLCBfcmVmKSB7XG4gIHZhciBleHRyYWN0Rm9ybWF0dGVkUGhvbmVOdW1iZXIgPSBfcmVmLmV4dHJhY3RGb3JtYXR0ZWRQaG9uZU51bWJlcjtcbiAgdmFyIHBob25lQ29udGV4dCA9IGV4dHJhY3RQaG9uZUNvbnRleHQobnVtYmVyVG9QYXJzZSk7XG5cbiAgaWYgKCFpc1Bob25lQ29udGV4dFZhbGlkKHBob25lQ29udGV4dCkpIHtcbiAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcignTk9UX0FfTlVNQkVSJyk7XG4gIH1cblxuICB2YXIgcGhvbmVOdW1iZXJTdHJpbmc7XG5cbiAgaWYgKHBob25lQ29udGV4dCA9PT0gbnVsbCkge1xuICAgIC8vIEV4dHJhY3QgYSBwb3NzaWJsZSBudW1iZXIgZnJvbSB0aGUgc3RyaW5nIHBhc3NlZCBpbi5cbiAgICAvLyAodGhpcyBzdHJpcHMgbGVhZGluZyBjaGFyYWN0ZXJzIHRoYXQgY291bGQgbm90IGJlIHRoZSBzdGFydCBvZiBhIHBob25lIG51bWJlcilcbiAgICBwaG9uZU51bWJlclN0cmluZyA9IGV4dHJhY3RGb3JtYXR0ZWRQaG9uZU51bWJlcihudW1iZXJUb1BhcnNlKSB8fCAnJztcbiAgfSBlbHNlIHtcbiAgICBwaG9uZU51bWJlclN0cmluZyA9ICcnOyAvLyBJZiB0aGUgcGhvbmUgY29udGV4dCBjb250YWlucyBhIHBob25lIG51bWJlciBwcmVmaXgsIHdlIG5lZWQgdG8gY2FwdHVyZVxuICAgIC8vIGl0LCB3aGVyZWFzIGRvbWFpbnMgd2lsbCBiZSBpZ25vcmVkLlxuXG4gICAgaWYgKHBob25lQ29udGV4dC5jaGFyQXQoMCkgPT09IFBMVVNfU0lHTikge1xuICAgICAgcGhvbmVOdW1iZXJTdHJpbmcgKz0gcGhvbmVDb250ZXh0O1xuICAgIH0gLy8gTm93IGFwcGVuZCBldmVyeXRoaW5nIGJldHdlZW4gdGhlIFwidGVsOlwiIHByZWZpeCBhbmQgdGhlIHBob25lLWNvbnRleHQuXG4gICAgLy8gVGhpcyBzaG91bGQgaW5jbHVkZSB0aGUgbmF0aW9uYWwgbnVtYmVyLCBhbiBvcHRpb25hbCBleHRlbnNpb24gb3JcbiAgICAvLyBpc2RuLXN1YmFkZHJlc3MgY29tcG9uZW50LiBOb3RlIHdlIGFsc28gaGFuZGxlIHRoZSBjYXNlIHdoZW4gXCJ0ZWw6XCIgaXNcbiAgICAvLyBtaXNzaW5nLCBhcyB3ZSBoYXZlIHNlZW4gaW4gc29tZSBvZiB0aGUgcGhvbmUgbnVtYmVyIGlucHV0cy5cbiAgICAvLyBJbiB0aGF0IGNhc2UsIHdlIGFwcGVuZCBldmVyeXRoaW5nIGZyb20gdGhlIGJlZ2lubmluZy5cblxuXG4gICAgdmFyIGluZGV4T2ZSZmMzOTY2UHJlZml4ID0gbnVtYmVyVG9QYXJzZS5pbmRleE9mKFJGQzM5NjZfUFJFRklYXyk7XG4gICAgdmFyIGluZGV4T2ZOYXRpb25hbE51bWJlcjsgLy8gUkZDIDM5NjYgXCJ0ZWw6XCIgcHJlZml4IGlzIHByZXNldCBhdCB0aGlzIHN0YWdlIGJlY2F1c2VcbiAgICAvLyBgaXNQaG9uZUNvbnRleHRWYWxpZCgpYCByZXF1aXJlcyBpdCB0byBiZSBwcmVzZW50LlxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cblxuICAgIGlmIChpbmRleE9mUmZjMzk2NlByZWZpeCA+PSAwKSB7XG4gICAgICBpbmRleE9mTmF0aW9uYWxOdW1iZXIgPSBpbmRleE9mUmZjMzk2NlByZWZpeCArIFJGQzM5NjZfUFJFRklYXy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4T2ZOYXRpb25hbE51bWJlciA9IDA7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4T2ZQaG9uZUNvbnRleHQgPSBudW1iZXJUb1BhcnNlLmluZGV4T2YoUkZDMzk2Nl9QSE9ORV9DT05URVhUXyk7XG4gICAgcGhvbmVOdW1iZXJTdHJpbmcgKz0gbnVtYmVyVG9QYXJzZS5zdWJzdHJpbmcoaW5kZXhPZk5hdGlvbmFsTnVtYmVyLCBpbmRleE9mUGhvbmVDb250ZXh0KTtcbiAgfSAvLyBEZWxldGUgdGhlIGlzZG4tc3ViYWRkcmVzcyBhbmQgZXZlcnl0aGluZyBhZnRlciBpdCBpZiBpdCBpcyBwcmVzZW50LlxuICAvLyBOb3RlIGV4dGVuc2lvbiB3b24ndCBhcHBlYXIgYXQgdGhlIHNhbWUgdGltZSB3aXRoIGlzZG4tc3ViYWRkcmVzc1xuICAvLyBhY2NvcmRpbmcgdG8gcGFyYWdyYXBoIDUuMyBvZiB0aGUgUkZDMzk2NiBzcGVjLlxuXG5cbiAgdmFyIGluZGV4T2ZJc2RuID0gcGhvbmVOdW1iZXJTdHJpbmcuaW5kZXhPZihSRkMzOTY2X0lTRE5fU1VCQUREUkVTU18pO1xuXG4gIGlmIChpbmRleE9mSXNkbiA+IDApIHtcbiAgICBwaG9uZU51bWJlclN0cmluZyA9IHBob25lTnVtYmVyU3RyaW5nLnN1YnN0cmluZygwLCBpbmRleE9mSXNkbik7XG4gIH0gLy8gSWYgYm90aCBwaG9uZSBjb250ZXh0IGFuZCBpc2RuLXN1YmFkZHJlc3MgYXJlIGFic2VudCBidXQgb3RoZXJcbiAgLy8gcGFyYW1ldGVycyBhcmUgcHJlc2VudCwgdGhlIHBhcmFtZXRlcnMgYXJlIGxlZnQgaW4gbmF0aW9uYWxOdW1iZXIuXG4gIC8vIFRoaXMgaXMgYmVjYXVzZSB3ZSBhcmUgY29uY2VybmVkIGFib3V0IGRlbGV0aW5nIGNvbnRlbnQgZnJvbSBhIHBvdGVudGlhbFxuICAvLyBudW1iZXIgc3RyaW5nIHdoZW4gdGhlcmUgaXMgbm8gc3Ryb25nIGV2aWRlbmNlIHRoYXQgdGhlIG51bWJlciBpc1xuICAvLyBhY3R1YWxseSB3cml0dGVuIGluIFJGQzM5NjYuXG5cblxuICBpZiAocGhvbmVOdW1iZXJTdHJpbmcgIT09ICcnKSB7XG4gICAgcmV0dXJuIHBob25lTnVtYmVyU3RyaW5nO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1leHRyYWN0Rm9ybWF0dGVkUGhvbmVOdW1iZXJGcm9tUG9zc2libGVSZmMzOTY2TnVtYmVyVXJpLmpzLm1hcCIsImltcG9ydCBleHRyYWN0TmF0aW9uYWxOdW1iZXJGcm9tUG9zc2libHlJbmNvbXBsZXRlTnVtYmVyIGZyb20gJy4vZXh0cmFjdE5hdGlvbmFsTnVtYmVyRnJvbVBvc3NpYmx5SW5jb21wbGV0ZU51bWJlci5qcyc7XG5pbXBvcnQgbWF0Y2hlc0VudGlyZWx5IGZyb20gJy4vbWF0Y2hlc0VudGlyZWx5LmpzJztcbmltcG9ydCBjaGVja051bWJlckxlbmd0aCBmcm9tICcuL2NoZWNrTnVtYmVyTGVuZ3RoLmpzJztcbi8qKlxyXG4gKiBTdHJpcHMgbmF0aW9uYWwgcHJlZml4IGFuZCBjYXJyaWVyIGNvZGUgZnJvbSBhIGNvbXBsZXRlIHBob25lIG51bWJlci5cclxuICogVGhlIGRpZmZlcmVuY2UgZnJvbSB0aGUgbm9uLVwiRnJvbUNvbXBsZXRlTnVtYmVyXCIgZnVuY3Rpb24gaXMgdGhhdFxyXG4gKiBpdCB3b24ndCBleHRyYWN0IG5hdGlvbmFsIHByZWZpeCBpZiB0aGUgcmVzdWx0YW50IG51bWJlciBpcyB0b28gc2hvcnRcclxuICogdG8gYmUgYSBjb21wbGV0ZSBudW1iZXIgZm9yIHRoZSBzZWxlY3RlZCBwaG9uZSBudW1iZXJpbmcgcGxhbi5cclxuICogQHBhcmFtICB7c3RyaW5nfSBudW1iZXIg4oCUIENvbXBsZXRlIHBob25lIG51bWJlciBkaWdpdHMuXHJcbiAqIEBwYXJhbSAge01ldGFkYXRhfSBtZXRhZGF0YSDigJQgTWV0YWRhdGEgd2l0aCBhIHBob25lIG51bWJlcmluZyBwbGFuIHNlbGVjdGVkLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IGB7IG5hdGlvbmFsTnVtYmVyOiBzdHJpbmcsIGNhcnJpZXJDb2RlOiBzdHJpbmc/IH1gLlxyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdE5hdGlvbmFsTnVtYmVyKG51bWJlciwgbWV0YWRhdGEpIHtcbiAgLy8gUGFyc2luZyBuYXRpb25hbCBwcmVmaXhlcyBhbmQgY2FycmllciBjb2Rlc1xuICAvLyBpcyBvbmx5IHJlcXVpcmVkIGZvciBsb2NhbCBwaG9uZSBudW1iZXJzXG4gIC8vIGJ1dCBzb21lIHBlb3BsZSBkb24ndCB1bmRlcnN0YW5kIHRoYXRcbiAgLy8gYW5kIHNvbWV0aW1lcyB3cml0ZSBpbnRlcm5hdGlvbmFsIHBob25lIG51bWJlcnNcbiAgLy8gd2l0aCBuYXRpb25hbCBwcmVmaXhlcyAob3IgbWF5YmUgZXZlbiBjYXJyaWVyIGNvZGVzKS5cbiAgLy8gaHR0cDovL3Vja2VuLmJsb2dzcG90LnJ1LzIwMTYvMDMvdHJ1bmstcHJlZml4ZXMtaW4tc2t5cGU0Yi5odG1sXG4gIC8vIEdvb2dsZSdzIG9yaWdpbmFsIGxpYnJhcnkgZm9yZ2l2ZXMgc3VjaCBtaXN0YWtlc1xuICAvLyBhbmQgc28gZG9lcyB0aGlzIGxpYnJhcnksIGJlY2F1c2UgaXQgaGFzIGJlZW4gcmVxdWVzdGVkOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vY2F0YW1waGV0YW1pbmUvbGlicGhvbmVudW1iZXItanMvaXNzdWVzLzEyN1xuICB2YXIgX2V4dHJhY3ROYXRpb25hbE51bWJlID0gZXh0cmFjdE5hdGlvbmFsTnVtYmVyRnJvbVBvc3NpYmx5SW5jb21wbGV0ZU51bWJlcihudW1iZXIsIG1ldGFkYXRhKSxcbiAgICAgIGNhcnJpZXJDb2RlID0gX2V4dHJhY3ROYXRpb25hbE51bWJlLmNhcnJpZXJDb2RlLFxuICAgICAgbmF0aW9uYWxOdW1iZXIgPSBfZXh0cmFjdE5hdGlvbmFsTnVtYmUubmF0aW9uYWxOdW1iZXI7XG5cbiAgaWYgKG5hdGlvbmFsTnVtYmVyICE9PSBudW1iZXIpIHtcbiAgICBpZiAoIXNob3VsZEhhdmVFeHRyYWN0ZWROYXRpb25hbFByZWZpeChudW1iZXIsIG5hdGlvbmFsTnVtYmVyLCBtZXRhZGF0YSkpIHtcbiAgICAgIC8vIERvbid0IHN0cmlwIHRoZSBuYXRpb25hbCBwcmVmaXguXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYXRpb25hbE51bWJlcjogbnVtYmVyXG4gICAgICB9O1xuICAgIH0gLy8gQ2hlY2sgdGhlIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIGxlbmd0aCBhZnRlciBleHRyYWN0aW5nIG5hdGlvbmFsIHByZWZpeCBhbmQgY2FycmllciBjb2RlLlxuICAgIC8vIExlZ2FjeSBnZW5lcmF0ZWQgbWV0YWRhdGEgKGJlZm9yZSBgMS4wLjE4YCkgZGlkbid0IHN1cHBvcnQgdGhlIFwicG9zc2libGUgbGVuZ3Roc1wiIGZlYXR1cmUuXG5cblxuICAgIGlmIChtZXRhZGF0YS5wb3NzaWJsZUxlbmd0aHMoKSkge1xuICAgICAgLy8gVGhlIG51bWJlciByZW1haW5pbmcgYWZ0ZXIgc3RyaXBwaW5nIHRoZSBuYXRpb25hbCBwcmVmaXggYW5kIGNhcnJpZXIgY29kZVxuICAgICAgLy8gc2hvdWxkIGJlIGxvbmcgZW5vdWdoIHRvIGhhdmUgYSBwb3NzaWJsZSBsZW5ndGggZm9yIHRoZSBjb3VudHJ5LlxuICAgICAgLy8gT3RoZXJ3aXNlLCBkb24ndCBzdHJpcCB0aGUgbmF0aW9uYWwgcHJlZml4IGFuZCBjYXJyaWVyIGNvZGUsXG4gICAgICAvLyBzaW5jZSB0aGUgb3JpZ2luYWwgbnVtYmVyIGNvdWxkIGJlIGEgdmFsaWQgbnVtYmVyLlxuICAgICAgLy8gVGhpcyBjaGVjayBoYXMgYmVlbiBjb3B5LXBhc3RlZCBcImFzIGlzXCIgZnJvbSBHb29nbGUncyBvcmlnaW5hbCBsaWJyYXJ5OlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9saWJwaG9uZW51bWJlci9ibG9iLzg3NjI2OGViMWFkNmNkYzFiN2I1YmVmMTdmYzVlNDMwNTI3MDJkNTcvamF2YS9saWJwaG9uZW51bWJlci9zcmMvY29tL2dvb2dsZS9pMThuL3Bob25lbnVtYmVycy9QaG9uZU51bWJlclV0aWwuamF2YSNMMzIzNi1MMzI1MFxuICAgICAgLy8gSXQgZG9lc24ndCBjaGVjayBmb3IgdGhlIFwicG9zc2liaWxpdHlcIiBvZiB0aGUgb3JpZ2luYWwgYG51bWJlcmAuXG4gICAgICAvLyBJIGd1ZXNzIGl0J3MgZmluZSBub3QgY2hlY2tpbmcgdGhhdCBvbmUuIEl0IHdvcmtzIGFzIGlzIGFueXdheS5cbiAgICAgIGlmICghaXNQb3NzaWJsZUluY29tcGxldGVOYXRpb25hbE51bWJlcihuYXRpb25hbE51bWJlciwgbWV0YWRhdGEpKSB7XG4gICAgICAgIC8vIERvbid0IHN0cmlwIHRoZSBuYXRpb25hbCBwcmVmaXguXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmF0aW9uYWxOdW1iZXI6IG51bWJlclxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmF0aW9uYWxOdW1iZXI6IG5hdGlvbmFsTnVtYmVyLFxuICAgIGNhcnJpZXJDb2RlOiBjYXJyaWVyQ29kZVxuICB9O1xufSAvLyBJbiBzb21lIGNvdW50cmllcywgdGhlIHNhbWUgZGlnaXQgY291bGQgYmUgYSBuYXRpb25hbCBwcmVmaXhcbi8vIG9yIGEgbGVhZGluZyBkaWdpdCBvZiBhIHZhbGlkIHBob25lIG51bWJlci5cbi8vIEZvciBleGFtcGxlLCBpbiBSdXNzaWEsIG5hdGlvbmFsIHByZWZpeCBpcyBgOGAsXG4vLyBhbmQgYWxzbyBgODAwIDU1NSAzNSAzNWAgaXMgYSB2YWxpZCBudW1iZXJcbi8vIGluIHdoaWNoIGA4YCBpcyBub3QgYSBuYXRpb25hbCBwcmVmaXgsIGJ1dCB0aGUgZmlyc3QgZGlnaXRcbi8vIG9mIGEgbmF0aW9uYWwgKHNpZ25pZmljYW50KSBudW1iZXIuXG4vLyBTYW1lJ3Mgd2l0aCBCZWxhcnVzOlxuLy8gYDgyMDA0OTEwMDYwYCBpcyBhIHZhbGlkIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyLFxuLy8gYnV0IGAyMDA0OTEwMDYwYCBpcyBub3QuXG4vLyBUbyBzdXBwb3J0IHN1Y2ggY2FzZXMgKHRvIHByZXZlbnQgdGhlIGNvZGUgZnJvbSBhbHdheXMgc3RyaXBwaW5nXG4vLyBuYXRpb25hbCBwcmVmaXgpLCBhIGNvbmRpdGlvbiBpcyBpbXBvc2VkOiBhIG5hdGlvbmFsIHByZWZpeFxuLy8gaXMgbm90IGV4dHJhY3RlZCB3aGVuIHRoZSBvcmlnaW5hbCBudW1iZXIgaXMgXCJ2aWFibGVcIiBhbmQgdGhlXG4vLyByZXN1bHRhbnQgbnVtYmVyIGlzIG5vdCwgYSBcInZpYWJsZVwiIG5hdGlvbmFsIG51bWJlciBiZWluZyB0aGUgb25lXG4vLyB0aGF0IG1hdGNoZXMgYG5hdGlvbmFsX251bWJlcl9wYXR0ZXJuYC5cblxuZnVuY3Rpb24gc2hvdWxkSGF2ZUV4dHJhY3RlZE5hdGlvbmFsUHJlZml4KG5hdGlvbmFsTnVtYmVyQmVmb3JlLCBuYXRpb25hbE51bWJlckFmdGVyLCBtZXRhZGF0YSkge1xuICAvLyBUaGUgZXF1aXZhbGVudCBpbiBHb29nbGUncyBjb2RlIGlzOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2xpYnBob25lbnVtYmVyL2Jsb2IvZTMyNmZhMWZjNDI4M2JiMDVlYjM1Y2IzYzE1YzE4Zjk4YTMxYWYzMy9qYXZhL2xpYnBob25lbnVtYmVyL3NyYy9jb20vZ29vZ2xlL2kxOG4vcGhvbmVudW1iZXJzL1Bob25lTnVtYmVyVXRpbC5qYXZhI0wyOTY5LUwzMDA0XG4gIGlmIChtYXRjaGVzRW50aXJlbHkobmF0aW9uYWxOdW1iZXJCZWZvcmUsIG1ldGFkYXRhLm5hdGlvbmFsTnVtYmVyUGF0dGVybigpKSAmJiAhbWF0Y2hlc0VudGlyZWx5KG5hdGlvbmFsTnVtYmVyQWZ0ZXIsIG1ldGFkYXRhLm5hdGlvbmFsTnVtYmVyUGF0dGVybigpKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBUaGlzIFwiaXMgcG9zc2libGVcIiBuYXRpb25hbCBudW1iZXIgKGxlbmd0aCkgY2hlY2sgaGFzIGJlZW4gY29tbWVudGVkIG91dFxuICAvLyBiZWNhdXNlIGl0J3Mgc3VwZXJjZWRlZCBieSB0aGUgKGVmZmVjdGl2ZWx5KSBzYW1lIGNoZWNrIGRvbmUgaW4gdGhlXG4gIC8vIGBleHRyYWN0TmF0aW9uYWxOdW1iZXIoKWAgZnVuY3Rpb24gYWZ0ZXIgaXQgY2FsbHMgYHNob3VsZEhhdmVFeHRyYWN0ZWROYXRpb25hbFByZWZpeCgpYC5cbiAgLy8gSW4gb3RoZXIgd29yZHMsIHdoeSBydW4gdGhlIHNhbWUgY2hlY2sgdHdpY2UgaWYgaXQgY291bGQgb25seSBiZSBydW4gb25jZS5cbiAgLy8gLy8gQ2hlY2sgdGhlIG5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyIGxlbmd0aCBhZnRlciBleHRyYWN0aW5nIG5hdGlvbmFsIHByZWZpeCBhbmQgY2FycmllciBjb2RlLlxuICAvLyAvLyBGaXhlcyBhIG1pbm9yIFwid2VpcmQgYmVoYXZpb3JcIiBidWc6IGh0dHBzOi8vZ2l0bGFiLmNvbS9jYXRhbXBoZXRhbWluZS9saWJwaG9uZW51bWJlci1qcy8tL2lzc3Vlcy81N1xuICAvLyAvLyAoTGVnYWN5IGdlbmVyYXRlZCBtZXRhZGF0YSAoYmVmb3JlIGAxLjAuMThgKSBkaWRuJ3Qgc3VwcG9ydCB0aGUgXCJwb3NzaWJsZSBsZW5ndGhzXCIgZmVhdHVyZSkuXG4gIC8vIGlmIChtZXRhZGF0YS5wb3NzaWJsZUxlbmd0aHMoKSkge1xuICAvLyBcdGlmIChpc1Bvc3NpYmxlSW5jb21wbGV0ZU5hdGlvbmFsTnVtYmVyKG5hdGlvbmFsTnVtYmVyQmVmb3JlLCBtZXRhZGF0YSkgJiZcbiAgLy8gXHRcdCFpc1Bvc3NpYmxlSW5jb21wbGV0ZU5hdGlvbmFsTnVtYmVyKG5hdGlvbmFsTnVtYmVyQWZ0ZXIsIG1ldGFkYXRhKSkge1xuICAvLyBcdFx0cmV0dXJuIGZhbHNlXG4gIC8vIFx0fVxuICAvLyB9XG5cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaXNQb3NzaWJsZUluY29tcGxldGVOYXRpb25hbE51bWJlcihuYXRpb25hbE51bWJlciwgbWV0YWRhdGEpIHtcbiAgc3dpdGNoIChjaGVja051bWJlckxlbmd0aChuYXRpb25hbE51bWJlciwgbWV0YWRhdGEpKSB7XG4gICAgY2FzZSAnVE9PX1NIT1JUJzpcbiAgICBjYXNlICdJTlZBTElEX0xFTkdUSCc6XG4gICAgICAvLyBUaGlzIGxpYnJhcnkgaWdub3JlcyBcImxvY2FsLW9ubHlcIiBwaG9uZSBudW1iZXJzIChmb3Igc2ltcGxpY2l0eSkuXG4gICAgICAvLyBTZWUgdGhlIHJlYWRtZSBmb3IgbW9yZSBpbmZvIG9uIHdoYXQgYXJlIFwibG9jYWwtb25seVwiIHBob25lIG51bWJlcnMuXG4gICAgICAvLyBjYXNlICdJU19QT1NTSUJMRV9MT0NBTF9PTkxZJzpcbiAgICAgIHJldHVybiBmYWxzZTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdE5hdGlvbmFsTnVtYmVyLmpzLm1hcCIsIi8qKlxyXG4gKiBTdHJpcHMgYW55IG5hdGlvbmFsIHByZWZpeCAoc3VjaCBhcyAwLCAxKSBwcmVzZW50IGluIGFcclxuICogKHBvc3NpYmx5IGluY29tcGxldGUpIG51bWJlciBwcm92aWRlZC5cclxuICogXCJDYXJyaWVyIGNvZGVzXCIgYXJlIG9ubHkgdXNlZCAgaW4gQ29sb21iaWEgYW5kIEJyYXppbCxcclxuICogYW5kIG9ubHkgd2hlbiBkaWFsaW5nIHdpdGhpbiB0aG9zZSBjb3VudHJpZXMgZnJvbSBhIG1vYmlsZSBwaG9uZSB0byBhIGZpeGVkIGxpbmUgbnVtYmVyLlxyXG4gKiBTb21ldGltZXMgaXQgd29uJ3QgYWN0dWFsbHkgc3RyaXAgbmF0aW9uYWwgcHJlZml4XHJcbiAqIGFuZCB3aWxsIGluc3RlYWQgcHJlcGVuZCBzb21lIGRpZ2l0cyB0byB0aGUgYG51bWJlcmA6XHJcbiAqIGZvciBleGFtcGxlLCB3aGVuIG51bWJlciBgMjM0NTY3OGAgaXMgcGFzc2VkIHdpdGggYFZJYCBjb3VudHJ5IHNlbGVjdGVkLFxyXG4gKiBpdCB3aWxsIHJldHVybiBgeyBudW1iZXI6IFwiMzQwMjM0NTY3OFwiIH1gLCBiZWNhdXNlIGAzNDBgIGFyZWEgY29kZSBpcyBwcmVwZW5kZWQuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBudW1iZXIg4oCUIE5hdGlvbmFsIG51bWJlciBkaWdpdHMuXHJcbiAqIEBwYXJhbSB7b2JqZWN0fSBtZXRhZGF0YSDigJQgTWV0YWRhdGEgd2l0aCBjb3VudHJ5IHNlbGVjdGVkLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IGB7IG5hdGlvbmFsTnVtYmVyOiBzdHJpbmcsIG5hdGlvbmFsUHJlZml4OiBzdHJpbmc/IGNhcnJpZXJDb2RlOiBzdHJpbmc/IH1gLiBFdmVuIGlmIGEgbmF0aW9uYWwgcHJlZml4IHdhcyBleHRyYWN0ZWQsIGl0J3Mgbm90IG5lY2Vzc2FyaWx5IHByZXNlbnQgaW4gdGhlIHJldHVybmVkIG9iamVjdCwgc28gZG9uJ3QgcmVseSBvbiBpdHMgcHJlc2VuY2UgaW4gdGhlIHJldHVybmVkIG9iamVjdCBpbiBvcmRlciB0byBmaW5kIG91dCB3aGV0aGVyIGEgbmF0aW9uYWwgcHJlZml4IGhhcyBiZWVuIGV4dHJhY3RlZCBvciBub3QuXHJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdE5hdGlvbmFsTnVtYmVyRnJvbVBvc3NpYmx5SW5jb21wbGV0ZU51bWJlcihudW1iZXIsIG1ldGFkYXRhKSB7XG4gIGlmIChudW1iZXIgJiYgbWV0YWRhdGEubnVtYmVyaW5nUGxhbi5uYXRpb25hbFByZWZpeEZvclBhcnNpbmcoKSkge1xuICAgIC8vIFNlZSBNRVRBREFUQS5tZCBmb3IgdGhlIGRlc2NyaXB0aW9uIG9mXG4gICAgLy8gYG5hdGlvbmFsX3ByZWZpeF9mb3JfcGFyc2luZ2AgYW5kIGBuYXRpb25hbF9wcmVmaXhfdHJhbnNmb3JtX3J1bGVgLlxuICAgIC8vIEF0dGVtcHQgdG8gcGFyc2UgdGhlIGZpcnN0IGRpZ2l0cyBhcyBhIG5hdGlvbmFsIHByZWZpeC5cbiAgICB2YXIgcHJlZml4UGF0dGVybiA9IG5ldyBSZWdFeHAoJ14oPzonICsgbWV0YWRhdGEubnVtYmVyaW5nUGxhbi5uYXRpb25hbFByZWZpeEZvclBhcnNpbmcoKSArICcpJyk7XG4gICAgdmFyIHByZWZpeE1hdGNoID0gcHJlZml4UGF0dGVybi5leGVjKG51bWJlcik7XG5cbiAgICBpZiAocHJlZml4TWF0Y2gpIHtcbiAgICAgIHZhciBuYXRpb25hbE51bWJlcjtcbiAgICAgIHZhciBjYXJyaWVyQ29kZTsgLy8gaHR0cHM6Ly9naXRsYWIuY29tL2NhdGFtcGhldGFtaW5lL2xpYnBob25lbnVtYmVyLWpzLy0vYmxvYi9tYXN0ZXIvTUVUQURBVEEubWQjbmF0aW9uYWxfcHJlZml4X2Zvcl9wYXJzaW5nLS1uYXRpb25hbF9wcmVmaXhfdHJhbnNmb3JtX3J1bGVcbiAgICAgIC8vIElmIGEgYG5hdGlvbmFsX3ByZWZpeF9mb3JfcGFyc2luZ2AgaGFzIGFueSBcImNhcHR1cmluZyBncm91cHNcIlxuICAgICAgLy8gdGhlbiBpdCBtZWFucyB0aGF0IHRoZSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlciBpcyBlcXVhbCB0b1xuICAgICAgLy8gdGhvc2UgXCJjYXB0dXJpbmcgZ3JvdXBzXCIgdHJhbnNmb3JtZWQgdmlhIGBuYXRpb25hbF9wcmVmaXhfdHJhbnNmb3JtX3J1bGVgLFxuICAgICAgLy8gYW5kIG5vdGhpbmcgY291bGQgYmUgc2FpZCBhYm91dCB0aGUgYWN0dWFsIG5hdGlvbmFsIHByZWZpeDpcbiAgICAgIC8vIHdoYXQgaXMgaXQgYW5kIHdhcyBpdCBldmVuIHRoZXJlLlxuICAgICAgLy8gSWYgYSBgbmF0aW9uYWxfcHJlZml4X2Zvcl9wYXJzaW5nYCBkb2Vzbid0IGhhdmUgYW55IFwiY2FwdHVyaW5nIGdyb3Vwc1wiLFxuICAgICAgLy8gdGhlbiBldmVyeXRoaW5nIGl0IG1hdGNoZXMgaXMgYSBuYXRpb25hbCBwcmVmaXguXG4gICAgICAvLyBUbyBkZXRlcm1pbmUgd2hldGhlciBgbmF0aW9uYWxfcHJlZml4X2Zvcl9wYXJzaW5nYCBtYXRjaGVkIGFueVxuICAgICAgLy8gXCJjYXB0dXJpbmcgZ3JvdXBzXCIsIHRoZSB2YWx1ZSBvZiB0aGUgcmVzdWx0IG9mIGNhbGxpbmcgYC5leGVjKClgXG4gICAgICAvLyBpcyBsb29rZWQgYXQsIGFuZCBpZiBpdCBoYXMgbm9uLXVuZGVmaW5lZCB2YWx1ZXMgd2hlcmUgdGhlcmUncmVcbiAgICAgIC8vIFwiY2FwdHVyaW5nIGdyb3Vwc1wiIGluIHRoZSByZWd1bGFyIGV4cHJlc3Npb24sIHRoZW4gaXQgbWVhbnNcbiAgICAgIC8vIHRoYXQgXCJjYXB0dXJpbmcgZ3JvdXBzXCIgaGF2ZSBiZWVuIG1hdGNoZWQuXG4gICAgICAvLyBJdCdzIG5vdCBwb3NzaWJsZSB0byB0ZWxsIHdoZXRoZXIgdGhlcmUnbGwgYmUgYW55IFwiY2FwdHVyaW5nIGdyb3B1c1wiXG4gICAgICAvLyBiZWZvcmUgdGhlIG1hdGNoaW5nIHByb2Nlc3MsIGJlY2F1c2UgYSBgbmF0aW9uYWxfcHJlZml4X2Zvcl9wYXJzaW5nYFxuICAgICAgLy8gY291bGQgZXhoaWJpdCBib3RoIGJlaGF2aW9ycy5cblxuICAgICAgdmFyIGNhcHR1cmVkR3JvdXBzQ291bnQgPSBwcmVmaXhNYXRjaC5sZW5ndGggLSAxO1xuICAgICAgdmFyIGhhc0NhcHR1cmVkR3JvdXBzID0gY2FwdHVyZWRHcm91cHNDb3VudCA+IDAgJiYgcHJlZml4TWF0Y2hbY2FwdHVyZWRHcm91cHNDb3VudF07XG5cbiAgICAgIGlmIChtZXRhZGF0YS5uYXRpb25hbFByZWZpeFRyYW5zZm9ybVJ1bGUoKSAmJiBoYXNDYXB0dXJlZEdyb3Vwcykge1xuICAgICAgICBuYXRpb25hbE51bWJlciA9IG51bWJlci5yZXBsYWNlKHByZWZpeFBhdHRlcm4sIG1ldGFkYXRhLm5hdGlvbmFsUHJlZml4VHJhbnNmb3JtUnVsZSgpKTsgLy8gSWYgdGhlcmUncyBtb3JlIHRoYW4gb25lIGNhcHR1cmVkIGdyb3VwLFxuICAgICAgICAvLyB0aGVuIGNhcnJpZXIgY29kZSBpcyB0aGUgc2Vjb25kIG9uZS5cblxuICAgICAgICBpZiAoY2FwdHVyZWRHcm91cHNDb3VudCA+IDEpIHtcbiAgICAgICAgICBjYXJyaWVyQ29kZSA9IHByZWZpeE1hdGNoWzFdO1xuICAgICAgICB9XG4gICAgICB9IC8vIElmIHRoZXJlJ3JlIG5vIFwiY2FwdHVyaW5nIGdyb3Vwc1wiLFxuICAgICAgLy8gb3IgaWYgdGhlcmUncmUgXCJjYXB0dXJpbmcgZ3JvdXBzXCIgYnV0IG5vXG4gICAgICAvLyBgbmF0aW9uYWxfcHJlZml4X3RyYW5zZm9ybV9ydWxlYCxcbiAgICAgIC8vIHRoZW4ganVzdCBzdHJpcCB0aGUgbmF0aW9uYWwgcHJlZml4IGZyb20gdGhlIG51bWJlcixcbiAgICAgIC8vIGFuZCBwb3NzaWJseSBhIGNhcnJpZXIgY29kZS5cbiAgICAgIC8vIFNlZW1zIGxpa2UgdGhlcmUgY291bGQgYmUgbW9yZS5cbiAgICAgIGVsc2Uge1xuICAgICAgICAvLyBgcHJlZml4QmVmb3JlTmF0aW9uYWxOdW1iZXJgIGlzIHRoZSB3aG9sZSBzdWJzdHJpbmcgbWF0Y2hlZCBieVxuICAgICAgICAvLyB0aGUgYG5hdGlvbmFsX3ByZWZpeF9mb3JfcGFyc2luZ2AgcmVndWxhciBleHByZXNzaW9uLlxuICAgICAgICAvLyBUaGVyZSBzZWVtIHRvIGJlIG5vIGd1YXJhbnRlZXMgdGhhdCBpdCdzIGp1c3QgYSBuYXRpb25hbCBwcmVmaXguXG4gICAgICAgIC8vIEZvciBleGFtcGxlLCBpZiB0aGVyZSdzIGEgY2FycmllciBjb2RlLCBpdCdzIGdvbm5hIGJlIGFcbiAgICAgICAgLy8gcGFydCBvZiBgcHJlZml4QmVmb3JlTmF0aW9uYWxOdW1iZXJgIHRvby5cbiAgICAgICAgdmFyIHByZWZpeEJlZm9yZU5hdGlvbmFsTnVtYmVyID0gcHJlZml4TWF0Y2hbMF07XG4gICAgICAgIG5hdGlvbmFsTnVtYmVyID0gbnVtYmVyLnNsaWNlKHByZWZpeEJlZm9yZU5hdGlvbmFsTnVtYmVyLmxlbmd0aCk7IC8vIElmIHRoZXJlJ3MgYXQgbGVhc3Qgb25lIGNhcHR1cmVkIGdyb3VwLFxuICAgICAgICAvLyB0aGVuIGNhcnJpZXIgY29kZSBpcyB0aGUgZmlyc3Qgb25lLlxuXG4gICAgICAgIGlmIChoYXNDYXB0dXJlZEdyb3Vwcykge1xuICAgICAgICAgIGNhcnJpZXJDb2RlID0gcHJlZml4TWF0Y2hbMV07XG4gICAgICAgIH1cbiAgICAgIH0gLy8gVHJpZXMgdG8gZ3Vlc3Mgd2hldGhlciBhIG5hdGlvbmFsIHByZWZpeCB3YXMgcHJlc2VudCBpbiB0aGUgaW5wdXQuXG4gICAgICAvLyBUaGlzIGlzIG5vdCBzb21ldGhpbmcgY29weS1wYXN0ZWQgZnJvbSBHb29nbGUncyBsaWJyYXJ5OlxuICAgICAgLy8gdGhleSBkb24ndCBzZWVtIHRvIGhhdmUgYW4gZXF1aXZhbGVudCBmb3IgdGhhdC5cbiAgICAgIC8vIFNvIHRoaXMgaXNuJ3QgYW4gXCJvZmZpY2lhbGx5IGFwcHJvdmVkXCIgd2F5IG9mIGRvaW5nIHNvbWV0aGluZyBsaWtlIHRoYXQuXG4gICAgICAvLyBCdXQgc2luY2UgdGhlcmUgc2VlbXMgbm8gb3RoZXIgZXhpc3RpbmcgbWV0aG9kLCB0aGlzIGxpYnJhcnkgdXNlcyBpdC5cblxuXG4gICAgICB2YXIgbmF0aW9uYWxQcmVmaXg7XG5cbiAgICAgIGlmIChoYXNDYXB0dXJlZEdyb3Vwcykge1xuICAgICAgICB2YXIgcG9zc2libGVQb3NpdGlvbk9mVGhlRmlyc3RDYXB0dXJlZEdyb3VwID0gbnVtYmVyLmluZGV4T2YocHJlZml4TWF0Y2hbMV0pO1xuICAgICAgICB2YXIgcG9zc2libGVOYXRpb25hbFByZWZpeCA9IG51bWJlci5zbGljZSgwLCBwb3NzaWJsZVBvc2l0aW9uT2ZUaGVGaXJzdENhcHR1cmVkR3JvdXApOyAvLyBFeGFtcGxlOiBhbiBBcmdlbnRpbmlhbiAoQVIpIHBob25lIG51bWJlciBgMDExMTUyMzQ1Njc4OWAuXG4gICAgICAgIC8vIGBwcmVmaXhNYXRjaFswXWAgaXMgYDAxMTE1YCwgYW5kIGAkMWAgaXMgYDExYCxcbiAgICAgICAgLy8gYW5kIHRoZSByZXN0IG9mIHRoZSBwaG9uZSBudW1iZXIgaXMgYDIzNDU2Nzg5YC5cbiAgICAgICAgLy8gVGhlIG5hdGlvbmFsIG51bWJlciBpcyB0cmFuc2Zvcm1lZCB2aWEgYDkkMWAgdG8gYDkxMTIzNDU2Nzg5YC5cbiAgICAgICAgLy8gTmF0aW9uYWwgcHJlZml4IGAwYCBpcyBkZXRlY3RlZCBiZWluZyBwcmVzZW50IGF0IHRoZSBzdGFydC5cbiAgICAgICAgLy8gaWYgKHBvc3NpYmxlTmF0aW9uYWxQcmVmaXguaW5kZXhPZihtZXRhZGF0YS5udW1iZXJpbmdQbGFuLm5hdGlvbmFsUHJlZml4KCkpID09PSAwKSB7XG5cbiAgICAgICAgaWYgKHBvc3NpYmxlTmF0aW9uYWxQcmVmaXggPT09IG1ldGFkYXRhLm51bWJlcmluZ1BsYW4ubmF0aW9uYWxQcmVmaXgoKSkge1xuICAgICAgICAgIG5hdGlvbmFsUHJlZml4ID0gbWV0YWRhdGEubnVtYmVyaW5nUGxhbi5uYXRpb25hbFByZWZpeCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuYXRpb25hbFByZWZpeCA9IHByZWZpeE1hdGNoWzBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYXRpb25hbE51bWJlcjogbmF0aW9uYWxOdW1iZXIsXG4gICAgICAgIG5hdGlvbmFsUHJlZml4OiBuYXRpb25hbFByZWZpeCxcbiAgICAgICAgY2FycmllckNvZGU6IGNhcnJpZXJDb2RlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgbmF0aW9uYWxOdW1iZXI6IG51bWJlclxuICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdE5hdGlvbmFsTnVtYmVyRnJvbVBvc3NpYmx5SW5jb21wbGV0ZU51bWJlci5qcy5tYXAiLCIvLyBXaGVuIHBob25lIG51bWJlcnMgYXJlIHdyaXR0ZW4gaW4gYFJGQzM5NjZgIGZvcm1hdCDigJQgYFwidGVsOisxMjEzMzczNDI1M1wiYCDigJRcbi8vIHRoZXkgY2FuIGhhdmUgdGhlaXIgXCJjYWxsaW5nIGNvZGVcIiBwYXJ0IHdyaXR0ZW4gc2VwYXJhdGVseSBpbiBhIGBwaG9uZS1jb250ZXh0YCBwYXJhbWV0ZXIuXG4vLyBFeGFtcGxlOiBgXCJ0ZWw6MTIxMzM3MzQyNTM7cGhvbmUtY29udGV4dD0rMVwiYC5cbi8vIFRoaXMgZnVuY3Rpb24gcGFyc2VzIHRoZSBmdWxsIHBob25lIG51bWJlciBmcm9tIHRoZSBsb2NhbCBudW1iZXIgYW5kIHRoZSBgcGhvbmUtY29udGV4dGBcbi8vIHdoZW4gdGhlIGBwaG9uZS1jb250ZXh0YCBjb250YWlucyBhIGArYCBzaWduLlxuaW1wb3J0IHsgVkFMSURfRElHSVRTIC8vIFBMVVNfQ0hBUlNcbn0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbmV4cG9ydCB2YXIgUExVU19TSUdOID0gJysnO1xudmFyIFJGQzM5NjZfVklTVUFMX1NFUEFSQVRPUl8gPSAnW1xcXFwtXFxcXC5cXFxcKFxcXFwpXT8nO1xudmFyIFJGQzM5NjZfUEhPTkVfRElHSVRfID0gJygnICsgJ1snICsgVkFMSURfRElHSVRTICsgJ10nICsgJ3wnICsgUkZDMzk2Nl9WSVNVQUxfU0VQQVJBVE9SXyArICcpJztcbnZhciBSRkMzOTY2X0dMT0JBTF9OVU1CRVJfRElHSVRTXyA9ICdeJyArICdcXFxcJyArIFBMVVNfU0lHTiArIFJGQzM5NjZfUEhPTkVfRElHSVRfICsgJyonICsgJ1snICsgVkFMSURfRElHSVRTICsgJ10nICsgUkZDMzk2Nl9QSE9ORV9ESUdJVF8gKyAnKicgKyAnJCc7XG4vKipcclxuICogUmVndWxhciBleHByZXNzaW9uIG9mIHZhbGlkIGdsb2JhbC1udW1iZXItZGlnaXRzIGZvciB0aGUgcGhvbmUtY29udGV4dFxyXG4gKiBwYXJhbWV0ZXIsIGZvbGxvd2luZyB0aGUgc3ludGF4IGRlZmluZWQgaW4gUkZDMzk2Ni5cclxuICovXG5cbnZhciBSRkMzOTY2X0dMT0JBTF9OVU1CRVJfRElHSVRTX1BBVFRFUk5fID0gbmV3IFJlZ0V4cChSRkMzOTY2X0dMT0JBTF9OVU1CRVJfRElHSVRTXywgJ2cnKTsgLy8gSW4gdGhpcyBwb3J0IG9mIEdvb2dsZSdzIGxpYnJhcnksIHdlIGRvbid0IGFjY2VwdCBhbHBoYSBjaGFyYWN0ZXJzIGluIHBob25lIG51bWJlcnMuXG4vLyBjb25zdCBBTFBIQU5VTV8gPSBWQUxJRF9BTFBIQV8gKyBWQUxJRF9ESUdJVFNcblxudmFyIEFMUEhBTlVNXyA9IFZBTElEX0RJR0lUUztcbnZhciBSRkMzOTY2X0RPTUFJTkxBQkVMXyA9ICdbJyArIEFMUEhBTlVNXyArICddKygoXFxcXC0pKlsnICsgQUxQSEFOVU1fICsgJ10pKic7XG52YXIgVkFMSURfQUxQSEFfID0gJ2EtekEtWic7XG52YXIgUkZDMzk2Nl9UT1BMQUJFTF8gPSAnWycgKyBWQUxJRF9BTFBIQV8gKyAnXSsoKFxcXFwtKSpbJyArIEFMUEhBTlVNXyArICddKSonO1xudmFyIFJGQzM5NjZfRE9NQUlOTkFNRV8gPSAnXignICsgUkZDMzk2Nl9ET01BSU5MQUJFTF8gKyAnXFxcXC4pKicgKyBSRkMzOTY2X1RPUExBQkVMXyArICdcXFxcLj8kJztcbi8qKlxyXG4gKiBSZWd1bGFyIGV4cHJlc3Npb24gb2YgdmFsaWQgZG9tYWlubmFtZSBmb3IgdGhlIHBob25lLWNvbnRleHQgcGFyYW1ldGVyLFxyXG4gKiBmb2xsb3dpbmcgdGhlIHN5bnRheCBkZWZpbmVkIGluIFJGQzM5NjYuXHJcbiAqL1xuXG52YXIgUkZDMzk2Nl9ET01BSU5OQU1FX1BBVFRFUk5fID0gbmV3IFJlZ0V4cChSRkMzOTY2X0RPTUFJTk5BTUVfLCAnZycpO1xuZXhwb3J0IHZhciBSRkMzOTY2X1BSRUZJWF8gPSAndGVsOic7XG5leHBvcnQgdmFyIFJGQzM5NjZfUEhPTkVfQ09OVEVYVF8gPSAnO3Bob25lLWNvbnRleHQ9JztcbmV4cG9ydCB2YXIgUkZDMzk2Nl9JU0ROX1NVQkFERFJFU1NfID0gJztpc3ViPSc7XG4vKipcclxuICogRXh0cmFjdHMgdGhlIHZhbHVlIG9mIHRoZSBwaG9uZS1jb250ZXh0IHBhcmFtZXRlciBvZiBgbnVtYmVyVG9FeHRyYWN0RnJvbWAsXHJcbiAqIGZvbGxvd2luZyB0aGUgc3ludGF4IGRlZmluZWQgaW4gUkZDMzk2Ni5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IG51bWJlclRvRXh0cmFjdEZyb21cclxuICogQHJldHVybiB7c3RyaW5nfG51bGx9IHRoZSBleHRyYWN0ZWQgc3RyaW5nIChwb3NzaWJseSBlbXB0eSksIG9yIGBudWxsYCBpZiBubyBwaG9uZS1jb250ZXh0IHBhcmFtZXRlciBpcyBmb3VuZC5cclxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dHJhY3RQaG9uZUNvbnRleHQobnVtYmVyVG9FeHRyYWN0RnJvbSkge1xuICB2YXIgaW5kZXhPZlBob25lQ29udGV4dCA9IG51bWJlclRvRXh0cmFjdEZyb20uaW5kZXhPZihSRkMzOTY2X1BIT05FX0NPTlRFWFRfKTsgLy8gSWYgbm8gcGhvbmUtY29udGV4dCBwYXJhbWV0ZXIgaXMgcHJlc2VudFxuXG4gIGlmIChpbmRleE9mUGhvbmVDb250ZXh0IDwgMCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHBob25lQ29udGV4dFN0YXJ0ID0gaW5kZXhPZlBob25lQ29udGV4dCArIFJGQzM5NjZfUEhPTkVfQ09OVEVYVF8ubGVuZ3RoOyAvLyBJZiBwaG9uZS1jb250ZXh0IHBhcmFtZXRlciBpcyBlbXB0eVxuXG4gIGlmIChwaG9uZUNvbnRleHRTdGFydCA+PSBudW1iZXJUb0V4dHJhY3RGcm9tLmxlbmd0aCkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHZhciBwaG9uZUNvbnRleHRFbmQgPSBudW1iZXJUb0V4dHJhY3RGcm9tLmluZGV4T2YoJzsnLCBwaG9uZUNvbnRleHRTdGFydCk7IC8vIElmIHBob25lLWNvbnRleHQgaXMgbm90IHRoZSBsYXN0IHBhcmFtZXRlclxuXG4gIGlmIChwaG9uZUNvbnRleHRFbmQgPj0gMCkge1xuICAgIHJldHVybiBudW1iZXJUb0V4dHJhY3RGcm9tLnN1YnN0cmluZyhwaG9uZUNvbnRleHRTdGFydCwgcGhvbmVDb250ZXh0RW5kKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVtYmVyVG9FeHRyYWN0RnJvbS5zdWJzdHJpbmcocGhvbmVDb250ZXh0U3RhcnQpO1xuICB9XG59XG4vKipcclxuICogUmV0dXJucyB3aGV0aGVyIHRoZSB2YWx1ZSBvZiBwaG9uZUNvbnRleHQgZm9sbG93cyB0aGUgc3ludGF4IGRlZmluZWQgaW4gUkZDMzk2Ni5cclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gcGhvbmVDb250ZXh0XHJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XHJcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNQaG9uZUNvbnRleHRWYWxpZChwaG9uZUNvbnRleHQpIHtcbiAgaWYgKHBob25lQ29udGV4dCA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHBob25lQ29udGV4dC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gRG9lcyBwaG9uZS1jb250ZXh0IHZhbHVlIG1hdGNoIHBhdHRlcm4gb2YgZ2xvYmFsLW51bWJlci1kaWdpdHMgb3IgZG9tYWlubmFtZS5cblxuXG4gIHJldHVybiBSRkMzOTY2X0dMT0JBTF9OVU1CRVJfRElHSVRTX1BBVFRFUk5fLnRlc3QocGhvbmVDb250ZXh0KSB8fCBSRkMzOTY2X0RPTUFJTk5BTUVfUEFUVEVSTl8udGVzdChwaG9uZUNvbnRleHQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXh0cmFjdFBob25lQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgYXBwbHlJbnRlcm5hdGlvbmFsU2VwYXJhdG9yU3R5bGUgZnJvbSAnLi9hcHBseUludGVybmF0aW9uYWxTZXBhcmF0b3JTdHlsZS5qcyc7IC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgc2V0IHRvICQxIGJ1dCB0aGVyZSBhcmUgc29tZSBjb3VudHJpZXMgZm9yIHdoaWNoIHRoZVxuLy8gZmlyc3QgZ3JvdXAgaXMgbm90IHVzZWQgaW4gdGhlIG5hdGlvbmFsIHBhdHRlcm4gKGUuZy4gQXJnZW50aW5hKSBzbyB0aGUgJDFcbi8vIGdyb3VwIGRvZXMgbm90IG1hdGNoIGNvcnJlY3RseS4gVGhlcmVmb3JlLCB3ZSB1c2UgYFxcZGAsIHNvIHRoYXQgdGhlIGZpcnN0XG4vLyBncm91cCBhY3R1YWxseSB1c2VkIGluIHRoZSBwYXR0ZXJuIHdpbGwgYmUgbWF0Y2hlZC5cblxuZXhwb3J0IHZhciBGSVJTVF9HUk9VUF9QQVRURVJOID0gLyhcXCRcXGQpLztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdE5hdGlvbmFsTnVtYmVyVXNpbmdGb3JtYXQobnVtYmVyLCBmb3JtYXQsIF9yZWYpIHtcbiAgdmFyIHVzZUludGVybmF0aW9uYWxGb3JtYXQgPSBfcmVmLnVzZUludGVybmF0aW9uYWxGb3JtYXQsXG4gICAgICB3aXRoTmF0aW9uYWxQcmVmaXggPSBfcmVmLndpdGhOYXRpb25hbFByZWZpeCxcbiAgICAgIGNhcnJpZXJDb2RlID0gX3JlZi5jYXJyaWVyQ29kZSxcbiAgICAgIG1ldGFkYXRhID0gX3JlZi5tZXRhZGF0YTtcbiAgdmFyIGZvcm1hdHRlZE51bWJlciA9IG51bWJlci5yZXBsYWNlKG5ldyBSZWdFeHAoZm9ybWF0LnBhdHRlcm4oKSksIHVzZUludGVybmF0aW9uYWxGb3JtYXQgPyBmb3JtYXQuaW50ZXJuYXRpb25hbEZvcm1hdCgpIDogLy8gVGhpcyBsaWJyYXJ5IGRvZXNuJ3QgdXNlIGBkb21lc3RpY19jYXJyaWVyX2NvZGVfZm9ybWF0dGluZ19ydWxlYCxcbiAgLy8gYmVjYXVzZSB0aGF0IG9uZSBpcyBvbmx5IHVzZWQgd2hlbiBmb3JtYXR0aW5nIHBob25lIG51bWJlcnNcbiAgLy8gZm9yIGRpYWxpbmcgZnJvbSBhIG1vYmlsZSBwaG9uZSwgYW5kIHRoaXMgaXMgbm90IGEgZGlhbGluZyBsaWJyYXJ5LlxuICAvLyBjYXJyaWVyQ29kZSAmJiBmb3JtYXQuZG9tZXN0aWNDYXJyaWVyQ29kZUZvcm1hdHRpbmdSdWxlKClcbiAgLy8gXHQvLyBGaXJzdCwgcmVwbGFjZSB0aGUgJENDIGluIHRoZSBmb3JtYXR0aW5nIHJ1bGUgd2l0aCB0aGUgZGVzaXJlZCBjYXJyaWVyIGNvZGUuXG4gIC8vIFx0Ly8gVGhlbiwgcmVwbGFjZSB0aGUgJEZHIGluIHRoZSBmb3JtYXR0aW5nIHJ1bGUgd2l0aCB0aGUgZmlyc3QgZ3JvdXBcbiAgLy8gXHQvLyBhbmQgdGhlIGNhcnJpZXIgY29kZSBjb21iaW5lZCBpbiB0aGUgYXBwcm9wcmlhdGUgd2F5LlxuICAvLyBcdD8gZm9ybWF0LmZvcm1hdCgpLnJlcGxhY2UoRklSU1RfR1JPVVBfUEFUVEVSTiwgZm9ybWF0LmRvbWVzdGljQ2FycmllckNvZGVGb3JtYXR0aW5nUnVsZSgpLnJlcGxhY2UoJyRDQycsIGNhcnJpZXJDb2RlKSlcbiAgLy8gXHQ6IChcbiAgLy8gXHRcdHdpdGhOYXRpb25hbFByZWZpeCAmJiBmb3JtYXQubmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSgpXG4gIC8vIFx0XHRcdD8gZm9ybWF0LmZvcm1hdCgpLnJlcGxhY2UoRklSU1RfR1JPVVBfUEFUVEVSTiwgZm9ybWF0Lm5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoKSlcbiAgLy8gXHRcdFx0OiBmb3JtYXQuZm9ybWF0KClcbiAgLy8gXHQpXG4gIHdpdGhOYXRpb25hbFByZWZpeCAmJiBmb3JtYXQubmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSgpID8gZm9ybWF0LmZvcm1hdCgpLnJlcGxhY2UoRklSU1RfR1JPVVBfUEFUVEVSTiwgZm9ybWF0Lm5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoKSkgOiBmb3JtYXQuZm9ybWF0KCkpO1xuXG4gIGlmICh1c2VJbnRlcm5hdGlvbmFsRm9ybWF0KSB7XG4gICAgcmV0dXJuIGFwcGx5SW50ZXJuYXRpb25hbFNlcGFyYXRvclN0eWxlKGZvcm1hdHRlZE51bWJlcik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0dGVkTnVtYmVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9ybWF0TmF0aW9uYWxOdW1iZXJVc2luZ0Zvcm1hdC5qcy5tYXAiLCJpbXBvcnQgZ2V0Q291bnRyeUJ5TmF0aW9uYWxOdW1iZXIgZnJvbSAnLi9nZXRDb3VudHJ5QnlOYXRpb25hbE51bWJlci5qcyc7XG52YXIgVVNFX05PTl9HRU9HUkFQSElDX0NPVU5UUllfQ09ERSA9IGZhbHNlO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q291bnRyeUJ5Q2FsbGluZ0NvZGUoY2FsbGluZ0NvZGUsIG5hdGlvbmFsUGhvbmVOdW1iZXIsIG1ldGFkYXRhKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoVVNFX05PTl9HRU9HUkFQSElDX0NPVU5UUllfQ09ERSkge1xuICAgIGlmIChtZXRhZGF0YS5pc05vbkdlb2dyYXBoaWNDYWxsaW5nQ29kZShjYWxsaW5nQ29kZSkpIHtcbiAgICAgIHJldHVybiAnMDAxJztcbiAgICB9XG4gIH1cblxuICB2YXIgcG9zc2libGVDb3VudHJpZXMgPSBtZXRhZGF0YS5nZXRDb3VudHJ5Q29kZXNGb3JDYWxsaW5nQ29kZShjYWxsaW5nQ29kZSk7XG5cbiAgaWYgKCFwb3NzaWJsZUNvdW50cmllcykge1xuICAgIHJldHVybjtcbiAgfSAvLyBJZiB0aGVyZSdzIGp1c3Qgb25lIGNvdW50cnkgY29ycmVzcG9uZGluZyB0byB0aGUgY291bnRyeSBjb2RlLFxuICAvLyB0aGVuIGp1c3QgcmV0dXJuIGl0LCB3aXRob3V0IGZ1cnRoZXIgcGhvbmUgbnVtYmVyIGRpZ2l0cyB2YWxpZGF0aW9uLlxuXG5cbiAgaWYgKHBvc3NpYmxlQ291bnRyaWVzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBwb3NzaWJsZUNvdW50cmllc1swXTtcbiAgfVxuXG4gIHJldHVybiBnZXRDb3VudHJ5QnlOYXRpb25hbE51bWJlcihwb3NzaWJsZUNvdW50cmllcywgbmF0aW9uYWxQaG9uZU51bWJlciwgbWV0YWRhdGEubWV0YWRhdGEpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0Q291bnRyeUJ5Q2FsbGluZ0NvZGUuanMubWFwIiwiZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyByZXR1cm4gZnVuY3Rpb24gKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmltcG9ydCBNZXRhZGF0YSBmcm9tICcuLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgZ2V0TnVtYmVyVHlwZSBmcm9tICcuL2dldE51bWJlclR5cGUuanMnO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q291bnRyeUJ5TmF0aW9uYWxOdW1iZXIocG9zc2libGVDb3VudHJpZXMsIG5hdGlvbmFsUGhvbmVOdW1iZXIsIG1ldGFkYXRhKSB7XG4gIC8vIFJlLWNyZWF0ZSBgbWV0YWRhdGFgIGJlY2F1c2UgaXQgd2lsbCBiZSBzZWxlY3RpbmcgYSBgY291bnRyeWAuXG4gIG1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKG1ldGFkYXRhKTtcblxuICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKHBvc3NpYmxlQ291bnRyaWVzKSwgX3N0ZXA7ICEoX3N0ZXAgPSBfaXRlcmF0b3IoKSkuZG9uZTspIHtcbiAgICB2YXIgY291bnRyeSA9IF9zdGVwLnZhbHVlO1xuICAgIG1ldGFkYXRhLmNvdW50cnkoY291bnRyeSk7IC8vIFwiTGVhZGluZyBkaWdpdHNcIiBwYXR0ZXJucyBhcmUgb25seSBkZWZpbmVkIGZvciBhYm91dCAyMCUgb2YgYWxsIGNvdW50cmllcy5cbiAgICAvLyBCeSBkZWZpbml0aW9uLCBtYXRjaGluZyBcImxlYWRpbmcgZGlnaXRzXCIgaXMgYSBzdWZmaWNpZW50IGJ1dCBub3QgYSBuZWNlc3NhcnlcbiAgICAvLyBjb25kaXRpb24gZm9yIGEgcGhvbmUgbnVtYmVyIHRvIGJlbG9uZyB0byBhIGNvdW50cnkuXG4gICAgLy8gVGhlIHBvaW50IG9mIFwibGVhZGluZyBkaWdpdHNcIiBjaGVjayBpcyB0aGF0IGl0J3MgdGhlIGZhc3Rlc3Qgb25lIHRvIGdldCBhIG1hdGNoLlxuICAgIC8vIGh0dHBzOi8vZ2l0bGFiLmNvbS9jYXRhbXBoZXRhbWluZS9saWJwaG9uZW51bWJlci1qcy9ibG9iL21hc3Rlci9NRVRBREFUQS5tZCNsZWFkaW5nX2RpZ2l0c1xuXG4gICAgaWYgKG1ldGFkYXRhLmxlYWRpbmdEaWdpdHMoKSkge1xuICAgICAgaWYgKG5hdGlvbmFsUGhvbmVOdW1iZXIgJiYgbmF0aW9uYWxQaG9uZU51bWJlci5zZWFyY2gobWV0YWRhdGEubGVhZGluZ0RpZ2l0cygpKSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gY291bnRyeTtcbiAgICAgIH1cbiAgICB9IC8vIEVsc2UgcGVyZm9ybSBmdWxsIHZhbGlkYXRpb24gd2l0aCBhbGwgb2YgdGhvc2VcbiAgICAvLyBmaXhlZC1saW5lL21vYmlsZS9ldGMgcmVndWxhciBleHByZXNzaW9ucy5cbiAgICBlbHNlIGlmIChnZXROdW1iZXJUeXBlKHtcbiAgICAgIHBob25lOiBuYXRpb25hbFBob25lTnVtYmVyLFxuICAgICAgY291bnRyeTogY291bnRyeVxuICAgIH0sIHVuZGVmaW5lZCwgbWV0YWRhdGEubWV0YWRhdGEpKSB7XG4gICAgICByZXR1cm4gY291bnRyeTtcbiAgICB9XG4gIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdldENvdW50cnlCeU5hdGlvbmFsTnVtYmVyLmpzLm1hcCIsImltcG9ydCBNZXRhZGF0YSBmcm9tICcuLi9tZXRhZGF0YS5qcyc7XG4vKipcclxuICogUGF0dGVybiB0aGF0IG1ha2VzIGl0IGVhc3kgdG8gZGlzdGluZ3Vpc2ggd2hldGhlciBhIHJlZ2lvbiBoYXMgYSBzaW5nbGVcclxuICogaW50ZXJuYXRpb25hbCBkaWFsaW5nIHByZWZpeCBvciBub3QuIElmIGEgcmVnaW9uIGhhcyBhIHNpbmdsZSBpbnRlcm5hdGlvbmFsXHJcbiAqIHByZWZpeCAoZS5nLiAwMTEgaW4gVVNBKSwgaXQgd2lsbCBiZSByZXByZXNlbnRlZCBhcyBhIHN0cmluZyB0aGF0IGNvbnRhaW5zXHJcbiAqIGEgc2VxdWVuY2Ugb2YgQVNDSUkgZGlnaXRzLCBhbmQgcG9zc2libHkgYSB0aWxkZSwgd2hpY2ggc2lnbmFscyB3YWl0aW5nIGZvclxyXG4gKiB0aGUgdG9uZS4gSWYgdGhlcmUgYXJlIG11bHRpcGxlIGF2YWlsYWJsZSBpbnRlcm5hdGlvbmFsIHByZWZpeGVzIGluIGFcclxuICogcmVnaW9uLCB0aGV5IHdpbGwgYmUgcmVwcmVzZW50ZWQgYXMgYSByZWdleCBzdHJpbmcgdGhhdCBhbHdheXMgY29udGFpbnMgb25lXHJcbiAqIG9yIG1vcmUgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgQVNDSUkgZGlnaXRzIG9yIGEgdGlsZGUuXHJcbiAqL1xuXG52YXIgU0lOR0xFX0lERF9QUkVGSVhfUkVHX0VYUCA9IC9eW1xcZF0rKD86W35cXHUyMDUzXFx1MjIzQ1xcdUZGNUVdW1xcZF0rKT8kLzsgLy8gRm9yIHJlZ2lvbnMgdGhhdCBoYXZlIG11bHRpcGxlIElERCBwcmVmaXhlc1xuLy8gYSBwcmVmZXJyZWQgSUREIHByZWZpeCBpcyByZXR1cm5lZC5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SWRkUHJlZml4KGNvdW50cnksIGNhbGxpbmdDb2RlLCBtZXRhZGF0YSkge1xuICB2YXIgY291bnRyeU1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKG1ldGFkYXRhKTtcbiAgY291bnRyeU1ldGFkYXRhLnNlbGVjdE51bWJlcmluZ1BsYW4oY291bnRyeSwgY2FsbGluZ0NvZGUpO1xuXG4gIGlmIChjb3VudHJ5TWV0YWRhdGEuZGVmYXVsdElERFByZWZpeCgpKSB7XG4gICAgcmV0dXJuIGNvdW50cnlNZXRhZGF0YS5kZWZhdWx0SUREUHJlZml4KCk7XG4gIH1cblxuICBpZiAoU0lOR0xFX0lERF9QUkVGSVhfUkVHX0VYUC50ZXN0KGNvdW50cnlNZXRhZGF0YS5JRERQcmVmaXgoKSkpIHtcbiAgICByZXR1cm4gY291bnRyeU1ldGFkYXRhLklERFByZWZpeCgpO1xuICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRJZGRQcmVmaXguanMubWFwIiwiZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXJMb29zZShvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTsgaWYgKGl0KSByZXR1cm4gKGl0ID0gaXQuY2FsbChvKSkubmV4dC5iaW5kKGl0KTsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyByZXR1cm4gZnVuY3Rpb24gKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmltcG9ydCBNZXRhZGF0YSBmcm9tICcuLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgbWF0Y2hlc0VudGlyZWx5IGZyb20gJy4vbWF0Y2hlc0VudGlyZWx5LmpzJztcbnZhciBOT05fRklYRURfTElORV9QSE9ORV9UWVBFUyA9IFsnTU9CSUxFJywgJ1BSRU1JVU1fUkFURScsICdUT0xMX0ZSRUUnLCAnU0hBUkVEX0NPU1QnLCAnVk9JUCcsICdQRVJTT05BTF9OVU1CRVInLCAnUEFHRVInLCAnVUFOJywgJ1ZPSUNFTUFJTCddOyAvLyBGaW5kcyBvdXQgbmF0aW9uYWwgcGhvbmUgbnVtYmVyIHR5cGUgKGZpeGVkIGxpbmUsIG1vYmlsZSwgZXRjKVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXROdW1iZXJUeXBlKGlucHV0LCBvcHRpb25zLCBtZXRhZGF0YSkge1xuICAvLyBJZiBhc3NpZ25pbmcgdGhlIGB7fWAgZGVmYXVsdCB2YWx1ZSBpcyBtb3ZlZCB0byB0aGUgYXJndW1lbnRzIGFib3ZlLFxuICAvLyBjb2RlIGNvdmVyYWdlIHdvdWxkIGRlY3JlYXNlIGZvciBzb21lIHdlaXJkIHJlYXNvbi5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307IC8vIFdoZW4gYHBhcnNlKClgIHJldHVybmVkIGB7fWBcbiAgLy8gbWVhbmluZyB0aGF0IHRoZSBwaG9uZSBudW1iZXIgaXMgbm90IGEgdmFsaWQgb25lLlxuXG4gIGlmICghaW5wdXQuY291bnRyeSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKG1ldGFkYXRhKTtcbiAgbWV0YWRhdGEuc2VsZWN0TnVtYmVyaW5nUGxhbihpbnB1dC5jb3VudHJ5LCBpbnB1dC5jb3VudHJ5Q2FsbGluZ0NvZGUpO1xuICB2YXIgbmF0aW9uYWxOdW1iZXIgPSBvcHRpb25zLnYyID8gaW5wdXQubmF0aW9uYWxOdW1iZXIgOiBpbnB1dC5waG9uZTsgLy8gVGhlIGZvbGxvd2luZyBpcyBjb3B5LXBhc3RlZCBmcm9tIHRoZSBvcmlnaW5hbCBmdW5jdGlvbjpcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZWkxOG4vbGlicGhvbmVudW1iZXIvYmxvYi8zZWE1NDdkNGZiYWEyZDBiNjc1ODg5MDRkZmE1ZDNmMjU1N2MyN2ZmL2phdmFzY3JpcHQvaTE4bi9waG9uZW51bWJlcnMvcGhvbmVudW1iZXJ1dGlsLmpzI0wyODM1XG4gIC8vIElzIHRoaXMgbmF0aW9uYWwgbnVtYmVyIGV2ZW4gdmFsaWQgZm9yIHRoaXMgY291bnRyeVxuXG4gIGlmICghbWF0Y2hlc0VudGlyZWx5KG5hdGlvbmFsTnVtYmVyLCBtZXRhZGF0YS5uYXRpb25hbE51bWJlclBhdHRlcm4oKSkpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gSXMgaXQgZml4ZWQgbGluZSBudW1iZXJcblxuXG4gIGlmIChpc051bWJlclR5cGVFcXVhbFRvKG5hdGlvbmFsTnVtYmVyLCAnRklYRURfTElORScsIG1ldGFkYXRhKSkge1xuICAgIC8vIEJlY2F1c2UgZHVwbGljYXRlIHJlZ3VsYXIgZXhwcmVzc2lvbnMgYXJlIHJlbW92ZWRcbiAgICAvLyB0byByZWR1Y2UgbWV0YWRhdGEgc2l6ZSwgaWYgXCJtb2JpbGVcIiBwYXR0ZXJuIGlzIFwiXCJcbiAgICAvLyB0aGVuIGl0IG1lYW5zIGl0IHdhcyByZW1vdmVkIGR1ZSB0byBiZWluZyBhIGR1cGxpY2F0ZSBvZiB0aGUgZml4ZWQtbGluZSBwYXR0ZXJuLlxuICAgIC8vXG4gICAgaWYgKG1ldGFkYXRhLnR5cGUoJ01PQklMRScpICYmIG1ldGFkYXRhLnR5cGUoJ01PQklMRScpLnBhdHRlcm4oKSA9PT0gJycpIHtcbiAgICAgIHJldHVybiAnRklYRURfTElORV9PUl9NT0JJTEUnO1xuICAgIH0gLy8gYE1PQklMRWAgdHlwZSBwYXR0ZXJuIGlzbid0IGluY2x1ZGVkIGlmIGl0IG1hdGNoZWQgYEZJWEVEX0xJTkVgIG9uZS5cbiAgICAvLyBGb3IgZXhhbXBsZSwgZm9yIFwiVVNcIiBjb3VudHJ5LlxuICAgIC8vIE9sZCBtZXRhZGF0YSAoPCBgMS4wLjE4YCkgaGFkIGEgc3BlY2lmaWMgXCJ0eXBlc1wiIGRhdGEgc3RydWN0dXJlXG4gICAgLy8gdGhhdCBoYXBwZW5lZCB0byBiZSBgdW5kZWZpbmVkYCBmb3IgYE1PQklMRWAgaW4gdGhhdCBjYXNlLlxuICAgIC8vIE5ld2VyIG1ldGFkYXRhICg+PSBgMS4wLjE4YCkgaGFzIGFub3RoZXIgZGF0YSBzdHJ1Y3R1cmUgdGhhdCBpc1xuICAgIC8vIG5vdCBgdW5kZWZpbmVkYCBmb3IgYE1PQklMRWAgaW4gdGhhdCBjYXNlIChpdCdzIGp1c3QgYW4gZW1wdHkgYXJyYXkpLlxuICAgIC8vIFNvIHRoaXMgYGlmYCBpcyBqdXN0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIG9sZCBtZXRhZGF0YS5cblxuXG4gICAgaWYgKCFtZXRhZGF0YS50eXBlKCdNT0JJTEUnKSkge1xuICAgICAgcmV0dXJuICdGSVhFRF9MSU5FX09SX01PQklMRSc7XG4gICAgfSAvLyBDaGVjayBpZiB0aGUgbnVtYmVyIGhhcHBlbnMgdG8gcXVhbGlmeSBhcyBib3RoIGZpeGVkIGxpbmUgYW5kIG1vYmlsZS5cbiAgICAvLyAobm8gc3VjaCBjb3VudHJ5IGluIHRoZSBtaW5pbWFsIG1ldGFkYXRhIHNldClcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuXG5cbiAgICBpZiAoaXNOdW1iZXJUeXBlRXF1YWxUbyhuYXRpb25hbE51bWJlciwgJ01PQklMRScsIG1ldGFkYXRhKSkge1xuICAgICAgcmV0dXJuICdGSVhFRF9MSU5FX09SX01PQklMRSc7XG4gICAgfVxuXG4gICAgcmV0dXJuICdGSVhFRF9MSU5FJztcbiAgfVxuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UoTk9OX0ZJWEVEX0xJTkVfUEhPTkVfVFlQRVMpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgIHZhciB0eXBlID0gX3N0ZXAudmFsdWU7XG5cbiAgICBpZiAoaXNOdW1iZXJUeXBlRXF1YWxUbyhuYXRpb25hbE51bWJlciwgdHlwZSwgbWV0YWRhdGEpKSB7XG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlclR5cGVFcXVhbFRvKG5hdGlvbmFsTnVtYmVyLCB0eXBlLCBtZXRhZGF0YSkge1xuICB0eXBlID0gbWV0YWRhdGEudHlwZSh0eXBlKTtcblxuICBpZiAoIXR5cGUgfHwgIXR5cGUucGF0dGVybigpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IC8vIENoZWNrIGlmIGFueSBwb3NzaWJsZSBudW1iZXIgbGVuZ3RocyBhcmUgcHJlc2VudDtcbiAgLy8gaWYgc28sIHdlIHVzZSB0aGVtIHRvIGF2b2lkIGNoZWNraW5nXG4gIC8vIHRoZSB2YWxpZGF0aW9uIHBhdHRlcm4gaWYgdGhleSBkb24ndCBtYXRjaC5cbiAgLy8gSWYgdGhleSBhcmUgYWJzZW50LCB0aGlzIG1lYW5zIHRoZXkgbWF0Y2hcbiAgLy8gdGhlIGdlbmVyYWwgZGVzY3JpcHRpb24sIHdoaWNoIHdlIGhhdmVcbiAgLy8gYWxyZWFkeSBjaGVja2VkIGJlZm9yZSBhIHNwZWNpZmljIG51bWJlciB0eXBlLlxuXG5cbiAgaWYgKHR5cGUucG9zc2libGVMZW5ndGhzKCkgJiYgdHlwZS5wb3NzaWJsZUxlbmd0aHMoKS5pbmRleE9mKG5hdGlvbmFsTnVtYmVyLmxlbmd0aCkgPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXNFbnRpcmVseShuYXRpb25hbE51bWJlciwgdHlwZS5wYXR0ZXJuKCkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2V0TnVtYmVyVHlwZS5qcy5tYXAiLCJpbXBvcnQgTWV0YWRhdGEgZnJvbSAnLi4vbWV0YWRhdGEuanMnO1xuLyoqXHJcbiAqIFJldHVybnMgYSBsaXN0IG9mIGNvdW50cmllcyB0aGF0IHRoZSBwaG9uZSBudW1iZXIgY291bGQgcG90ZW50aWFsbHkgYmVsb25nIHRvLlxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGNhbGxpbmdDb2RlIOKAlCBDYWxsaW5nIGNvZGUuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gbmF0aW9uYWxOdW1iZXIg4oCUIE5hdGlvbmFsIChzaWduaWZpY2FudCkgbnVtYmVyLlxyXG4gKiBAcGFyYW0gIHtvYmplY3R9IG1ldGFkYXRhIOKAlCBNZXRhZGF0YS5cclxuICogQHJldHVybiB7c3RyaW5nW119IEEgbGlzdCBvZiBwb3NzaWJsZSBjb3VudHJpZXMuXHJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQb3NzaWJsZUNvdW50cmllc0Zvck51bWJlcihjYWxsaW5nQ29kZSwgbmF0aW9uYWxOdW1iZXIsIG1ldGFkYXRhKSB7XG4gIHZhciBfbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEobWV0YWRhdGEpO1xuXG4gIHZhciBwb3NzaWJsZUNvdW50cmllcyA9IF9tZXRhZGF0YS5nZXRDb3VudHJ5Q29kZXNGb3JDYWxsaW5nQ29kZShjYWxsaW5nQ29kZSk7XG5cbiAgaWYgKCFwb3NzaWJsZUNvdW50cmllcykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiBwb3NzaWJsZUNvdW50cmllcy5maWx0ZXIoZnVuY3Rpb24gKGNvdW50cnkpIHtcbiAgICByZXR1cm4gY291bGROYXRpb25hbE51bWJlckJlbG9uZ1RvQ291bnRyeShuYXRpb25hbE51bWJlciwgY291bnRyeSwgbWV0YWRhdGEpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY291bGROYXRpb25hbE51bWJlckJlbG9uZ1RvQ291bnRyeShuYXRpb25hbE51bWJlciwgY291bnRyeSwgbWV0YWRhdGEpIHtcbiAgdmFyIF9tZXRhZGF0YSA9IG5ldyBNZXRhZGF0YShtZXRhZGF0YSk7XG5cbiAgX21ldGFkYXRhLnNlbGVjdE51bWJlcmluZ1BsYW4oY291bnRyeSk7XG5cbiAgaWYgKF9tZXRhZGF0YS5udW1iZXJpbmdQbGFuLnBvc3NpYmxlTGVuZ3RocygpLmluZGV4T2YobmF0aW9uYWxOdW1iZXIubGVuZ3RoKSA+PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRQb3NzaWJsZUNvdW50cmllc0Zvck51bWJlci5qcy5tYXAiLCJpbXBvcnQgeyBNSU5fTEVOR1RIX0ZPUl9OU04sIFZBTElEX0RJR0lUUywgVkFMSURfUFVOQ1RVQVRJT04sIFBMVVNfQ0hBUlMgfSBmcm9tICcuLi9jb25zdGFudHMuanMnO1xuaW1wb3J0IGNyZWF0ZUV4dGVuc2lvblBhdHRlcm4gZnJvbSAnLi9leHRlbnNpb24vY3JlYXRlRXh0ZW5zaW9uUGF0dGVybi5qcyc7IC8vICBSZWd1bGFyIGV4cHJlc3Npb24gb2YgdmlhYmxlIHBob25lIG51bWJlcnMuIFRoaXMgaXMgbG9jYXRpb24gaW5kZXBlbmRlbnQuXG4vLyAgQ2hlY2tzIHdlIGhhdmUgYXQgbGVhc3QgdGhyZWUgbGVhZGluZyBkaWdpdHMsIGFuZCBvbmx5IHZhbGlkIHB1bmN0dWF0aW9uLFxuLy8gIGFscGhhIGNoYXJhY3RlcnMgYW5kIGRpZ2l0cyBpbiB0aGUgcGhvbmUgbnVtYmVyLiBEb2VzIG5vdCBpbmNsdWRlIGV4dGVuc2lvblxuLy8gIGRhdGEuIFRoZSBzeW1ib2wgJ3gnIGlzIGFsbG93ZWQgaGVyZSBhcyB2YWxpZCBwdW5jdHVhdGlvbiBzaW5jZSBpdCBpcyBvZnRlblxuLy8gIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgY2FycmllciBjb2RlcywgZm9yIGV4YW1wbGUgaW4gQnJhemlsaWFuIHBob25lXG4vLyAgbnVtYmVycy4gV2UgYWxzbyBhbGxvdyBtdWx0aXBsZSAnKycgY2hhcmFjdGVycyBhdCB0aGUgc3RhcnQuXG4vL1xuLy8gIENvcnJlc3BvbmRzIHRvIHRoZSBmb2xsb3dpbmc6XG4vLyAgW2RpZ2l0c117bWluTGVuZ3RoTnNufXxcbi8vICBwbHVzX3NpZ24qXG4vLyAgKChbcHVuY3R1YXRpb25dfFtzdGFyXSkqW2RpZ2l0c10pezMsfShbcHVuY3R1YXRpb25dfFtzdGFyXXxbZGlnaXRzXXxbYWxwaGFdKSpcbi8vXG4vLyAgVGhlIGZpcnN0IHJlZy1leCBpcyB0byBhbGxvdyBzaG9ydCBudW1iZXJzICh0d28gZGlnaXRzIGxvbmcpIHRvIGJlIHBhcnNlZCBpZlxuLy8gIHRoZXkgYXJlIGVudGVyZWQgYXMgXCIxNVwiIGV0YywgYnV0IG9ubHkgaWYgdGhlcmUgaXMgbm8gcHVuY3R1YXRpb24gaW4gdGhlbS5cbi8vICBUaGUgc2Vjb25kIGV4cHJlc3Npb24gcmVzdHJpY3RzIHRoZSBudW1iZXIgb2YgZGlnaXRzIHRvIHRocmVlIG9yIG1vcmUsIGJ1dFxuLy8gIHRoZW4gYWxsb3dzIHRoZW0gdG8gYmUgaW4gaW50ZXJuYXRpb25hbCBmb3JtLCBhbmQgdG8gaGF2ZSBhbHBoYS1jaGFyYWN0ZXJzXG4vLyAgYW5kIHB1bmN0dWF0aW9uLiBXZSBzcGxpdCB1cCB0aGUgdHdvIHJlZy1leGVzIGhlcmUgYW5kIGNvbWJpbmUgdGhlbSB3aGVuXG4vLyAgY3JlYXRpbmcgdGhlIHJlZy1leCBWQUxJRF9QSE9ORV9OVU1CRVJfUEFUVEVSTiBpdHNlbGYgc28gd2UgY2FuIHByZWZpeCBpdFxuLy8gIHdpdGggXiBhbmQgYXBwZW5kICQgdG8gZWFjaCBicmFuY2guXG4vL1xuLy8gIFwiTm90ZSBWQUxJRF9QVU5DVFVBVElPTiBzdGFydHMgd2l0aCBhIC0sXG4vLyAgIHNvIG11c3QgYmUgdGhlIGZpcnN0IGluIHRoZSByYW5nZVwiIChjKSBHb29nbGUgZGV2cy5cbi8vICAod3RmIGRpZCB0aGV5IG1lYW4gYnkgc2F5aW5nIHRoYXQ7IHByb2JhYmx5IG5vdGhpbmcpXG4vL1xuXG52YXIgTUlOX0xFTkdUSF9QSE9ORV9OVU1CRVJfUEFUVEVSTiA9ICdbJyArIFZBTElEX0RJR0lUUyArICddeycgKyBNSU5fTEVOR1RIX0ZPUl9OU04gKyAnfSc7IC8vXG4vLyBBbmQgdGhpcyBpcyB0aGUgc2Vjb25kIHJlZy1leHA6XG4vLyAoc2VlIE1JTl9MRU5HVEhfUEhPTkVfTlVNQkVSX1BBVFRFUk4gZm9yIGEgZnVsbCBkZXNjcmlwdGlvbiBvZiB0aGlzIHJlZy1leHApXG4vL1xuXG5leHBvcnQgdmFyIFZBTElEX1BIT05FX05VTUJFUiA9ICdbJyArIFBMVVNfQ0hBUlMgKyAnXXswLDF9JyArICcoPzonICsgJ1snICsgVkFMSURfUFVOQ1RVQVRJT04gKyAnXSonICsgJ1snICsgVkFMSURfRElHSVRTICsgJ10nICsgJyl7Myx9JyArICdbJyArIFZBTElEX1BVTkNUVUFUSU9OICsgVkFMSURfRElHSVRTICsgJ10qJzsgLy8gVGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXNuJ3QgcHJlc2VudCBpbiBHb29nbGUncyBgbGlicGhvbmVudW1iZXJgXG4vLyBhbmQgaXMgb25seSB1c2VkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBwaG9uZSBudW1iZXIgYmVpbmcgaW5wdXRcbi8vIGlzIHRvbyBzaG9ydCBmb3IgaXQgdG8gZXZlbiBjb25zaWRlciBpdCBhIFwidmFsaWRcIiBudW1iZXIuXG4vLyBUaGlzIGlzIGp1c3QgYSB3YXkgdG8gZGlmZmVyZW50aWF0ZSBiZXR3ZWVuIGEgcmVhbGx5IGludmFsaWQgcGhvbmVcbi8vIG51bWJlciBsaWtlIFwiYWJjZGVcIiBhbmQgYSB2YWxpZCBwaG9uZSBudW1iZXIgdGhhdCBhIHVzZXIgaGFzIGp1c3Rcbi8vIHN0YXJ0ZWQgaW5wdXR0aW5nLCBsaWtlIFwiKzFcIiBvciBcIjFcIjogYm90aCB0aGVzZSBjYXNlcyB3b3VsZCBiZVxuLy8gY29uc2lkZXJlZCBgTk9UX0FfTlVNQkVSYCBieSBHb29nbGUncyBgbGlicGhvbmVudW1iZXJgLCBidXQgdGhpc1xuLy8gbGlicmFyeSBjYW4gcHJvdmlkZSBhIG1vcmUgZGV0YWlsZWQgZXJyb3IgbWVzc2FnZSDigJQgd2hldGhlciBpdCdzXG4vLyByZWFsbHkgXCJub3QgYSBudW1iZXJcIiwgb3IgaXMgaXQganVzdCBhIHN0YXJ0IG9mIGEgdmFsaWQgcGhvbmUgbnVtYmVyLlxuXG52YXIgVkFMSURfUEhPTkVfTlVNQkVSX1NUQVJUX1JFR19FWFAgPSBuZXcgUmVnRXhwKCdeJyArICdbJyArIFBMVVNfQ0hBUlMgKyAnXXswLDF9JyArICcoPzonICsgJ1snICsgVkFMSURfUFVOQ1RVQVRJT04gKyAnXSonICsgJ1snICsgVkFMSURfRElHSVRTICsgJ10nICsgJyl7MSwyfScgKyAnJCcsICdpJyk7XG5leHBvcnQgdmFyIFZBTElEX1BIT05FX05VTUJFUl9XSVRIX0VYVEVOU0lPTiA9IFZBTElEX1BIT05FX05VTUJFUiArIC8vIFBob25lIG51bWJlciBleHRlbnNpb25zXG4nKD86JyArIGNyZWF0ZUV4dGVuc2lvblBhdHRlcm4oKSArICcpPyc7IC8vIFRoZSBjb21iaW5lZCByZWd1bGFyIGV4cHJlc3Npb24gZm9yIHZhbGlkIHBob25lIG51bWJlcnM6XG4vL1xuXG52YXIgVkFMSURfUEhPTkVfTlVNQkVSX1BBVFRFUk4gPSBuZXcgUmVnRXhwKCAvLyBFaXRoZXIgYSBzaG9ydCB0d28tZGlnaXQtb25seSBwaG9uZSBudW1iZXJcbideJyArIE1JTl9MRU5HVEhfUEhPTkVfTlVNQkVSX1BBVFRFUk4gKyAnJCcgKyAnfCcgKyAvLyBPciBhIGxvbmdlciBmdWxseSBwYXJzZWQgcGhvbmUgbnVtYmVyIChtaW4gMyBjaGFyYWN0ZXJzKVxuJ14nICsgVkFMSURfUEhPTkVfTlVNQkVSX1dJVEhfRVhURU5TSU9OICsgJyQnLCAnaScpOyAvLyBDaGVja3MgdG8gc2VlIGlmIHRoZSBzdHJpbmcgb2YgY2hhcmFjdGVycyBjb3VsZCBwb3NzaWJseSBiZSBhIHBob25lIG51bWJlciBhdFxuLy8gYWxsLiBBdCB0aGUgbW9tZW50LCBjaGVja3MgdG8gc2VlIHRoYXQgdGhlIHN0cmluZyBiZWdpbnMgd2l0aCBhdCBsZWFzdCAyXG4vLyBkaWdpdHMsIGlnbm9yaW5nIGFueSBwdW5jdHVhdGlvbiBjb21tb25seSBmb3VuZCBpbiBwaG9uZSBudW1iZXJzLiBUaGlzIG1ldGhvZFxuLy8gZG9lcyBub3QgcmVxdWlyZSB0aGUgbnVtYmVyIHRvIGJlIG5vcm1hbGl6ZWQgaW4gYWR2YW5jZSAtIGJ1dCBkb2VzIGFzc3VtZVxuLy8gdGhhdCBsZWFkaW5nIG5vbi1udW1iZXIgc3ltYm9scyBoYXZlIGJlZW4gcmVtb3ZlZCwgc3VjaCBhcyBieSB0aGUgbWV0aG9kXG4vLyBgZXh0cmFjdF9wb3NzaWJsZV9udW1iZXJgLlxuLy9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNWaWFibGVQaG9uZU51bWJlcihudW1iZXIpIHtcbiAgcmV0dXJuIG51bWJlci5sZW5ndGggPj0gTUlOX0xFTkdUSF9GT1JfTlNOICYmIFZBTElEX1BIT05FX05VTUJFUl9QQVRURVJOLnRlc3QobnVtYmVyKTtcbn0gLy8gVGhpcyBpcyBqdXN0IGEgd2F5IHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBhIHJlYWxseSBpbnZhbGlkIHBob25lXG4vLyBudW1iZXIgbGlrZSBcImFiY2RlXCIgYW5kIGEgdmFsaWQgcGhvbmUgbnVtYmVyIHRoYXQgYSB1c2VyIGhhcyBqdXN0XG4vLyBzdGFydGVkIGlucHV0dGluZywgbGlrZSBcIisxXCIgb3IgXCIxXCI6IGJvdGggdGhlc2UgY2FzZXMgd291bGQgYmVcbi8vIGNvbnNpZGVyZWQgYE5PVF9BX05VTUJFUmAgYnkgR29vZ2xlJ3MgYGxpYnBob25lbnVtYmVyYCwgYnV0IHRoaXNcbi8vIGxpYnJhcnkgY2FuIHByb3ZpZGUgYSBtb3JlIGRldGFpbGVkIGVycm9yIG1lc3NhZ2Ug4oCUIHdoZXRoZXIgaXQnc1xuLy8gcmVhbGx5IFwibm90IGEgbnVtYmVyXCIsIG9yIGlzIGl0IGp1c3QgYSBzdGFydCBvZiBhIHZhbGlkIHBob25lIG51bWJlci5cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmlhYmxlUGhvbmVOdW1iZXJTdGFydChudW1iZXIpIHtcbiAgcmV0dXJuIFZBTElEX1BIT05FX05VTUJFUl9TVEFSVF9SRUdfRVhQLnRlc3QobnVtYmVyKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzVmlhYmxlUGhvbmVOdW1iZXIuanMubWFwIiwiLyoqXHJcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBlbnRpcmUgaW5wdXQgc2VxdWVuY2UgY2FuIGJlIG1hdGNoZWRcclxuICogYWdhaW5zdCB0aGUgcmVndWxhciBleHByZXNzaW9uLlxyXG4gKiBAcmV0dXJuIHtib29sZWFufVxyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hdGNoZXNFbnRpcmVseSh0ZXh0LCByZWd1bGFyX2V4cHJlc3Npb24pIHtcbiAgLy8gSWYgYXNzaWduaW5nIHRoZSBgJydgIGRlZmF1bHQgdmFsdWUgaXMgbW92ZWQgdG8gdGhlIGFyZ3VtZW50cyBhYm92ZSxcbiAgLy8gY29kZSBjb3ZlcmFnZSB3b3VsZCBkZWNyZWFzZSBmb3Igc29tZSB3ZWlyZCByZWFzb24uXG4gIHRleHQgPSB0ZXh0IHx8ICcnO1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXig/OicgKyByZWd1bGFyX2V4cHJlc3Npb24gKyAnKSQnKS50ZXN0KHRleHQpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWF0Y2hlc0VudGlyZWx5LmpzLm1hcCIsImZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmIChpdCkgcmV0dXJuIChpdCA9IGl0LmNhbGwobykpLm5leHQuYmluZChpdCk7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG4vKipcclxuICogTWVyZ2VzIHR3byBhcnJheXMuXHJcbiAqIEBwYXJhbSAgeyp9IGFcclxuICogQHBhcmFtICB7Kn0gYlxyXG4gKiBAcmV0dXJuIHsqfVxyXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQXJyYXlzKGEsIGIpIHtcbiAgdmFyIG1lcmdlZCA9IGEuc2xpY2UoKTtcblxuICBmb3IgKHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlKGIpLCBfc3RlcDsgIShfc3RlcCA9IF9pdGVyYXRvcigpKS5kb25lOykge1xuICAgIHZhciBlbGVtZW50ID0gX3N0ZXAudmFsdWU7XG5cbiAgICBpZiAoYS5pbmRleE9mKGVsZW1lbnQpIDwgMCkge1xuICAgICAgbWVyZ2VkLnB1c2goZWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlZC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGEgLSBiO1xuICB9KTsgLy8gRVM2IHZlcnNpb24sIHJlcXVpcmVzIFNldCBwb2x5ZmlsbC5cbiAgLy8gbGV0IG1lcmdlZCA9IG5ldyBTZXQoYSlcbiAgLy8gZm9yIChjb25zdCBlbGVtZW50IG9mIGIpIHtcbiAgLy8gXHRtZXJnZWQuYWRkKGkpXG4gIC8vIH1cbiAgLy8gcmV0dXJuIEFycmF5LmZyb20obWVyZ2VkKS5zb3J0KChhLCBiKSA9PiBhIC0gYilcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lcmdlQXJyYXlzLmpzLm1hcCIsImZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmIChpdCkgcmV0dXJuIChpdCA9IGl0LmNhbGwobykpLm5leHQuYmluZChpdCk7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG4vLyBUaGVzZSBtYXBwaW5ncyBtYXAgYSBjaGFyYWN0ZXIgKGtleSkgdG8gYSBzcGVjaWZpYyBkaWdpdCB0aGF0IHNob3VsZFxuLy8gcmVwbGFjZSBpdCBmb3Igbm9ybWFsaXphdGlvbiBwdXJwb3Nlcy4gTm9uLUV1cm9wZWFuIGRpZ2l0cyB0aGF0XG4vLyBtYXkgYmUgdXNlZCBpbiBwaG9uZSBudW1iZXJzIGFyZSBtYXBwZWQgdG8gYSBFdXJvcGVhbiBlcXVpdmFsZW50LlxuLy9cbi8vIEUuZy4gaW4gSXJhcSB0aGV5IGRvbid0IHdyaXRlIGArNDQyMzIzMjM0YCBidXQgcmF0aGVyIGAr2aTZpNmi2aPZotmj2aLZo9mkYC5cbi8vXG5leHBvcnQgdmFyIERJR0lUUyA9IHtcbiAgJzAnOiAnMCcsXG4gICcxJzogJzEnLFxuICAnMic6ICcyJyxcbiAgJzMnOiAnMycsXG4gICc0JzogJzQnLFxuICAnNSc6ICc1JyxcbiAgJzYnOiAnNicsXG4gICc3JzogJzcnLFxuICAnOCc6ICc4JyxcbiAgJzknOiAnOScsXG4gIFwiXFx1RkYxMFwiOiAnMCcsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCAwXG4gIFwiXFx1RkYxMVwiOiAnMScsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCAxXG4gIFwiXFx1RkYxMlwiOiAnMicsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCAyXG4gIFwiXFx1RkYxM1wiOiAnMycsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCAzXG4gIFwiXFx1RkYxNFwiOiAnNCcsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCA0XG4gIFwiXFx1RkYxNVwiOiAnNScsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCA1XG4gIFwiXFx1RkYxNlwiOiAnNicsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCA2XG4gIFwiXFx1RkYxN1wiOiAnNycsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCA3XG4gIFwiXFx1RkYxOFwiOiAnOCcsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCA4XG4gIFwiXFx1RkYxOVwiOiAnOScsXG4gIC8vIEZ1bGx3aWR0aCBkaWdpdCA5XG4gIFwiXFx1MDY2MFwiOiAnMCcsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCAwXG4gIFwiXFx1MDY2MVwiOiAnMScsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCAxXG4gIFwiXFx1MDY2MlwiOiAnMicsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCAyXG4gIFwiXFx1MDY2M1wiOiAnMycsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCAzXG4gIFwiXFx1MDY2NFwiOiAnNCcsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCA0XG4gIFwiXFx1MDY2NVwiOiAnNScsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCA1XG4gIFwiXFx1MDY2NlwiOiAnNicsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCA2XG4gIFwiXFx1MDY2N1wiOiAnNycsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCA3XG4gIFwiXFx1MDY2OFwiOiAnOCcsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCA4XG4gIFwiXFx1MDY2OVwiOiAnOScsXG4gIC8vIEFyYWJpYy1pbmRpYyBkaWdpdCA5XG4gIFwiXFx1MDZGMFwiOiAnMCcsXG4gIC8vIEVhc3Rlcm4tQXJhYmljIGRpZ2l0IDBcbiAgXCJcXHUwNkYxXCI6ICcxJyxcbiAgLy8gRWFzdGVybi1BcmFiaWMgZGlnaXQgMVxuICBcIlxcdTA2RjJcIjogJzInLFxuICAvLyBFYXN0ZXJuLUFyYWJpYyBkaWdpdCAyXG4gIFwiXFx1MDZGM1wiOiAnMycsXG4gIC8vIEVhc3Rlcm4tQXJhYmljIGRpZ2l0IDNcbiAgXCJcXHUwNkY0XCI6ICc0JyxcbiAgLy8gRWFzdGVybi1BcmFiaWMgZGlnaXQgNFxuICBcIlxcdTA2RjVcIjogJzUnLFxuICAvLyBFYXN0ZXJuLUFyYWJpYyBkaWdpdCA1XG4gIFwiXFx1MDZGNlwiOiAnNicsXG4gIC8vIEVhc3Rlcm4tQXJhYmljIGRpZ2l0IDZcbiAgXCJcXHUwNkY3XCI6ICc3JyxcbiAgLy8gRWFzdGVybi1BcmFiaWMgZGlnaXQgN1xuICBcIlxcdTA2RjhcIjogJzgnLFxuICAvLyBFYXN0ZXJuLUFyYWJpYyBkaWdpdCA4XG4gIFwiXFx1MDZGOVwiOiAnOScgLy8gRWFzdGVybi1BcmFiaWMgZGlnaXQgOVxuXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlRGlnaXQoY2hhcmFjdGVyKSB7XG4gIHJldHVybiBESUdJVFNbY2hhcmFjdGVyXTtcbn1cbi8qKlxyXG4gKiBQYXJzZXMgcGhvbmUgbnVtYmVyIGRpZ2l0cyBmcm9tIGEgc3RyaW5nLlxyXG4gKiBEcm9wcyBhbGwgcHVuY3R1YXRpb24gbGVhdmluZyBvbmx5IGRpZ2l0cy5cclxuICogQWxzbyBjb252ZXJ0cyB3aWRlLWFzY2lpIGFuZCBhcmFiaWMtaW5kaWMgbnVtZXJhbHMgdG8gY29udmVudGlvbmFsIG51bWVyYWxzLlxyXG4gKiBFLmcuIGluIElyYXEgdGhleSBkb24ndCB3cml0ZSBgKzQ0MjMyMzIzNGAgYnV0IHJhdGhlciBgK9mk2aTZotmj2aLZo9mi2aPZpGAuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyaW5nXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICogQGV4YW1wbGVcclxuICogYGBganNcclxuICogcGFyc2VEaWdpdHMoJzggKDgwMCkgNTU1JylcclxuICogLy8gT3V0cHV0cyAnODgwMDU1NScuXHJcbiAqIGBgYFxyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VEaWdpdHMoc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSAnJzsgLy8gVXNpbmcgYC5zcGxpdCgnJylgIGhlcmUgaW5zdGVhZCBvZiBub3JtYWwgYGZvciAuLi4gb2ZgXG4gIC8vIGJlY2F1c2UgdGhlIGltcG9ydGluZyBhcHBsaWNhdGlvbiBkb2Vzbid0IG5lY2Nlc3NhcmlseSBpbmNsdWRlIGFuIEVTNiBwb2x5ZmlsbC5cbiAgLy8gVGhlIGAuc3BsaXQoJycpYCBhcHByb2FjaCBkaXNjYXJkcyBcImV4b3RpY1wiIFVURi04IGNoYXJhY3RlcnNcbiAgLy8gKHRoZSBvbmVzIGNvbnNpc3Rpbmcgb2YgZm91ciBieXRlcykgYnV0IGRpZ2l0c1xuICAvLyAoaW5jbHVkaW5nIG5vbi1FdXJvcGVhbiBvbmVzKSBkb24ndCBmYWxsIGludG8gdGhhdCByYW5nZVxuICAvLyBzbyBzdWNoIFwiZXhvdGljXCIgY2hhcmFjdGVycyB3b3VsZCBiZSBkaXNjYXJkZWQgYW55d2F5LlxuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uoc3RyaW5nLnNwbGl0KCcnKSksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgdmFyIGNoYXJhY3RlciA9IF9zdGVwLnZhbHVlO1xuICAgIHZhciBkaWdpdCA9IHBhcnNlRGlnaXQoY2hhcmFjdGVyKTtcblxuICAgIGlmIChkaWdpdCkge1xuICAgICAgcmVzdWx0ICs9IGRpZ2l0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZURpZ2l0cy5qcy5tYXAiLCJpbXBvcnQgTWV0YWRhdGEgZnJvbSAnLi4vbWV0YWRhdGEuanMnO1xuaW1wb3J0IHsgVkFMSURfRElHSVRTIH0gZnJvbSAnLi4vY29uc3RhbnRzLmpzJztcbnZhciBDQVBUVVJJTkdfRElHSVRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoJyhbJyArIFZBTElEX0RJR0lUUyArICddKScpO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RyaXBJZGRQcmVmaXgobnVtYmVyLCBjb3VudHJ5LCBjYWxsaW5nQ29kZSwgbWV0YWRhdGEpIHtcbiAgaWYgKCFjb3VudHJ5KSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENoZWNrIGlmIHRoZSBudW1iZXIgaXMgSURELXByZWZpeGVkLlxuXG5cbiAgdmFyIGNvdW50cnlNZXRhZGF0YSA9IG5ldyBNZXRhZGF0YShtZXRhZGF0YSk7XG4gIGNvdW50cnlNZXRhZGF0YS5zZWxlY3ROdW1iZXJpbmdQbGFuKGNvdW50cnksIGNhbGxpbmdDb2RlKTtcbiAgdmFyIElERFByZWZpeFBhdHRlcm4gPSBuZXcgUmVnRXhwKGNvdW50cnlNZXRhZGF0YS5JRERQcmVmaXgoKSk7XG5cbiAgaWYgKG51bWJlci5zZWFyY2goSUREUHJlZml4UGF0dGVybikgIT09IDApIHtcbiAgICByZXR1cm47XG4gIH0gLy8gU3RyaXAgSUREIHByZWZpeC5cblxuXG4gIG51bWJlciA9IG51bWJlci5zbGljZShudW1iZXIubWF0Y2goSUREUHJlZml4UGF0dGVybilbMF0ubGVuZ3RoKTsgLy8gSWYgdGhlcmUncmUgYW55IGRpZ2l0cyBhZnRlciBhbiBJREQgcHJlZml4LFxuICAvLyB0aGVuIHRob3NlIGRpZ2l0cyBhcmUgYSBjb3VudHJ5IGNhbGxpbmcgY29kZS5cbiAgLy8gU2luY2Ugbm8gY291bnRyeSBjb2RlIHN0YXJ0cyB3aXRoIGEgYDBgLFxuICAvLyB0aGUgY29kZSBiZWxvdyB2YWxpZGF0ZXMgdGhhdCB0aGUgbmV4dCBkaWdpdCAoaWYgcHJlc2VudCkgaXMgbm90IGAwYC5cblxuICB2YXIgbWF0Y2hlZEdyb3VwcyA9IG51bWJlci5tYXRjaChDQVBUVVJJTkdfRElHSVRfUEFUVEVSTik7XG5cbiAgaWYgKG1hdGNoZWRHcm91cHMgJiYgbWF0Y2hlZEdyb3Vwc1sxXSAhPSBudWxsICYmIG1hdGNoZWRHcm91cHNbMV0ubGVuZ3RoID4gMCkge1xuICAgIGlmIChtYXRjaGVkR3JvdXBzWzFdID09PSAnMCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVtYmVyO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RyaXBJZGRQcmVmaXguanMubWFwIiwiaW1wb3J0IE1ldGFkYXRhIGZyb20gJy4vbWV0YWRhdGEuanMnO1xuaW1wb3J0IGNoZWNrTnVtYmVyTGVuZ3RoIGZyb20gJy4vaGVscGVycy9jaGVja051bWJlckxlbmd0aC5qcyc7XG4vKipcclxuICogQ2hlY2tzIGlmIGEgcGhvbmUgbnVtYmVyIGlzIFwicG9zc2libGVcIiAoYmFzaWNhbGx5IGp1c3QgY2hlY2tzIGl0cyBsZW5ndGgpLlxyXG4gKlxyXG4gKiBpc1Bvc3NpYmxlKHBob25lTnVtYmVySW5zdGFuY2UsIHsgLi4uLCB2MjogdHJ1ZSB9LCBtZXRhZGF0YSlcclxuICpcclxuICogaXNQb3NzaWJsZSh7IHBob25lOiAnODAwNTU1MzUzNScsIGNvdW50cnk6ICdSVScgfSwgeyAuLi4gfSwgbWV0YWRhdGEpXHJcbiAqIGlzUG9zc2libGUoeyBwaG9uZTogJzgwMDU1NTM1MzUnLCBjb3VudHJ5OiAnUlUnIH0sIHVuZGVmaW5lZCwgbWV0YWRhdGEpXHJcbiAqXHJcbiAqIEBwYXJhbSAge29iamVjdHxQaG9uZU51bWJlcn0gaW5wdXQg4oCUIElmIGBvcHRpb25zLnYyOiB0cnVlYCBmbGFnIGlzIHBhc3NlZCwgdGhlIGBpbnB1dGAgc2hvdWxkIGJlIGEgYFBob25lTnVtYmVyYCBpbnN0YW5jZS4gT3RoZXJ3aXNlLCBpdCBzaG91bGQgYmUgYW4gb2JqZWN0IG9mIHNoYXBlIGB7IHBob25lOiAnLi4uJywgY291bnRyeTogJy4uLicgfWAuXHJcbiAqIEBwYXJhbSAge29iamVjdH0gW29wdGlvbnNdXHJcbiAqIEBwYXJhbSAge29iamVjdH0gbWV0YWRhdGFcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNQb3NzaWJsZVBob25lTnVtYmVyKGlucHV0LCBvcHRpb25zLCBtZXRhZGF0YSkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIG1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKG1ldGFkYXRhKTtcblxuICBpZiAob3B0aW9ucy52Mikge1xuICAgIGlmICghaW5wdXQuY291bnRyeUNhbGxpbmdDb2RlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGhvbmUgbnVtYmVyIG9iamVjdCBwYXNzZWQnKTtcbiAgICB9XG5cbiAgICBtZXRhZGF0YS5zZWxlY3ROdW1iZXJpbmdQbGFuKGlucHV0LmNvdW50cnlDYWxsaW5nQ29kZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpbnB1dC5waG9uZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpbnB1dC5jb3VudHJ5KSB7XG4gICAgICBpZiAoIW1ldGFkYXRhLmhhc0NvdW50cnkoaW5wdXQuY291bnRyeSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjb3VudHJ5OiBcIi5jb25jYXQoaW5wdXQuY291bnRyeSkpO1xuICAgICAgfVxuXG4gICAgICBtZXRhZGF0YS5jb3VudHJ5KGlucHV0LmNvdW50cnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWlucHV0LmNvdW50cnlDYWxsaW5nQ29kZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgcGhvbmUgbnVtYmVyIG9iamVjdCBwYXNzZWQnKTtcbiAgICAgIH1cblxuICAgICAgbWV0YWRhdGEuc2VsZWN0TnVtYmVyaW5nUGxhbihpbnB1dC5jb3VudHJ5Q2FsbGluZ0NvZGUpO1xuICAgIH1cbiAgfSAvLyBPbGQgbWV0YWRhdGEgKDwgMS4wLjE4KSBoYWQgbm8gXCJwb3NzaWJsZSBsZW5ndGhcIiBkYXRhLlxuXG5cbiAgaWYgKG1ldGFkYXRhLnBvc3NpYmxlTGVuZ3RocygpKSB7XG4gICAgcmV0dXJuIGlzUG9zc2libGVOdW1iZXIoaW5wdXQucGhvbmUgfHwgaW5wdXQubmF0aW9uYWxOdW1iZXIsIG1ldGFkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGVyZSB3YXMgYSBidWcgYmV0d2VlbiBgMS43LjM1YCBhbmQgYDEuNy4zN2Agd2hlcmUgXCJwb3NzaWJsZV9sZW5ndGhzXCJcbiAgICAvLyB3ZXJlIG1pc3NpbmcgZm9yIFwibm9uLWdlb2dyYXBoaWNhbFwiIG51bWJlcmluZyBwbGFucy5cbiAgICAvLyBKdXN0IGFzc3VtZSB0aGUgbnVtYmVyIGlzIHBvc3NpYmxlIGluIHN1Y2ggY2FzZXM6XG4gICAgLy8gaXQncyB1bmxpa2VseSB0aGF0IGFueW9uZSBnZW5lcmF0ZWQgdGhlaXIgY3VzdG9tIG1ldGFkYXRhXG4gICAgLy8gaW4gdGhhdCBzaG9ydCBwZXJpb2Qgb2YgdGltZSAob25lIGRheSkuXG4gICAgLy8gVGhpcyBjb2RlIGNhbiBiZSByZW1vdmVkIGluIHNvbWUgZnV0dXJlIG1ham9yIHZlcnNpb24gdXBkYXRlLlxuICAgIGlmIChpbnB1dC5jb3VudHJ5Q2FsbGluZ0NvZGUgJiYgbWV0YWRhdGEuaXNOb25HZW9ncmFwaGljQ2FsbGluZ0NvZGUoaW5wdXQuY291bnRyeUNhbGxpbmdDb2RlKSkge1xuICAgICAgLy8gXCJOb24tZ2VvZ3JhcGhpYyBlbnRpdGllc1wiIGRpZCd0IGhhdmUgYHBvc3NpYmxlTGVuZ3Roc2BcbiAgICAgIC8vIGR1ZSB0byBhIGJ1ZyBpbiBtZXRhZGF0YSBnZW5lcmF0aW9uIHByb2Nlc3MuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFwicG9zc2libGVMZW5ndGhzXCIgaW4gbWV0YWRhdGEuIFBlcmhhcHMgdGhlIG1ldGFkYXRhIGhhcyBiZWVuIGdlbmVyYXRlZCBiZWZvcmUgdjEuMC4xOC4nKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1Bvc3NpYmxlTnVtYmVyKG5hdGlvbmFsTnVtYmVyLCBtZXRhZGF0YSkge1xuICAvLywgaXNJbnRlcm5hdGlvbmFsKSB7XG4gIHN3aXRjaCAoY2hlY2tOdW1iZXJMZW5ndGgobmF0aW9uYWxOdW1iZXIsIG1ldGFkYXRhKSkge1xuICAgIGNhc2UgJ0lTX1BPU1NJQkxFJzpcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIC8vIFRoaXMgbGlicmFyeSBpZ25vcmVzIFwibG9jYWwtb25seVwiIHBob25lIG51bWJlcnMgKGZvciBzaW1wbGljaXR5KS5cbiAgICAvLyBTZWUgdGhlIHJlYWRtZSBmb3IgbW9yZSBpbmZvIG9uIHdoYXQgYXJlIFwibG9jYWwtb25seVwiIHBob25lIG51bWJlcnMuXG4gICAgLy8gY2FzZSAnSVNfUE9TU0lCTEVfTE9DQUxfT05MWSc6XG4gICAgLy8gXHRyZXR1cm4gIWlzSW50ZXJuYXRpb25hbFxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNQb3NzaWJsZS5qcy5tYXAiLCJpbXBvcnQgTWV0YWRhdGEgZnJvbSAnLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgbWF0Y2hlc0VudGlyZWx5IGZyb20gJy4vaGVscGVycy9tYXRjaGVzRW50aXJlbHkuanMnO1xuaW1wb3J0IGdldE51bWJlclR5cGUgZnJvbSAnLi9oZWxwZXJzL2dldE51bWJlclR5cGUuanMnO1xuLyoqXHJcbiAqIENoZWNrcyBpZiBhIGdpdmVuIHBob25lIG51bWJlciBpcyB2YWxpZC5cclxuICpcclxuICogaXNWYWxpZChwaG9uZU51bWJlckluc3RhbmNlLCB7IC4uLiwgdjI6IHRydWUgfSwgbWV0YWRhdGEpXHJcbiAqXHJcbiAqIGlzUG9zc2libGUoeyBwaG9uZTogJzgwMDU1NTM1MzUnLCBjb3VudHJ5OiAnUlUnIH0sIHsgLi4uIH0sIG1ldGFkYXRhKVxyXG4gKiBpc1Bvc3NpYmxlKHsgcGhvbmU6ICc4MDA1NTUzNTM1JywgY291bnRyeTogJ1JVJyB9LCB1bmRlZmluZWQsIG1ldGFkYXRhKVxyXG4gKlxyXG4gKiBJZiB0aGUgYG51bWJlcmAgaXMgYSBzdHJpbmcsIGl0IHdpbGwgYmUgcGFyc2VkIHRvIGFuIG9iamVjdCxcclxuICogYnV0IG9ubHkgaWYgaXQgY29udGFpbnMgb25seSB2YWxpZCBwaG9uZSBudW1iZXIgY2hhcmFjdGVycyAoaW5jbHVkaW5nIHB1bmN0dWF0aW9uKS5cclxuICogSWYgdGhlIGBudW1iZXJgIGlzIGFuIG9iamVjdCwgaXQgaXMgdXNlZCBhcyBpcy5cclxuICpcclxuICogVGhlIG9wdGlvbmFsIGBkZWZhdWx0Q291bnRyeWAgYXJndW1lbnQgaXMgdGhlIGRlZmF1bHQgY291bnRyeS5cclxuICogSS5lLiBpdCBkb2VzIG5vdCByZXN0cmljdCB0byBqdXN0IHRoYXQgY291bnRyeSxcclxuICogZS5nLiBpbiB0aG9zZSBjYXNlcyB3aGVyZSBzZXZlcmFsIGNvdW50cmllcyBzaGFyZVxyXG4gKiB0aGUgc2FtZSBwaG9uZSBudW1iZXJpbmcgcnVsZXMgKE5BTlBBLCBCcml0YWluLCBldGMpLlxyXG4gKiBGb3IgZXhhbXBsZSwgZXZlbiB0aG91Z2ggdGhlIG51bWJlciBgMDc2MjQgMzY5MjMwYFxyXG4gKiBiZWxvbmdzIHRvIHRoZSBJc2xlIG9mIE1hbiAoXCJJTVwiIGNvdW50cnkgY29kZSlcclxuICogY2FsbGluZyBgaXNWYWxpZE51bWJlcignMDc2MjQzNjkyMzAnLCAnR0InLCBtZXRhZGF0YSlgXHJcbiAqIHN0aWxsIHJldHVybnMgYHRydWVgIGJlY2F1c2UgdGhlIGNvdW50cnkgaXMgbm90IHJlc3RyaWN0ZWQgdG8gYEdCYCxcclxuICogaXQncyBqdXN0IHRoYXQgYEdCYCBpcyB0aGUgZGVmYXVsdCBvbmUgZm9yIHRoZSBwaG9uZSBudW1iZXJpbmcgcnVsZXMuXHJcbiAqIEZvciByZXN0cmljdGluZyB0aGUgY291bnRyeSBzZWUgYGlzVmFsaWROdW1iZXJGb3JSZWdpb24oKWBcclxuICogdGhvdWdoIHJlc3RyaWN0aW5nIGEgY291bnRyeSBtaWdodCBub3QgYmUgYSBnb29kIGlkZWEuXHJcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGVpMThuL2xpYnBob25lbnVtYmVyL2Jsb2IvbWFzdGVyL0ZBUS5tZCN3aGVuLXNob3VsZC1pLXVzZS1pc3ZhbGlkbnVtYmVyZm9ycmVnaW9uXHJcbiAqXHJcbiAqIEV4YW1wbGVzOlxyXG4gKlxyXG4gKiBgYGBqc1xyXG4gKiBpc1ZhbGlkTnVtYmVyKCcrNzgwMDU1NTM1MzUnLCBtZXRhZGF0YSlcclxuICogaXNWYWxpZE51bWJlcignODAwNTU1MzUzNScsICdSVScsIG1ldGFkYXRhKVxyXG4gKiBpc1ZhbGlkTnVtYmVyKCc4ODAwNTU1MzUzNScsICdSVScsIG1ldGFkYXRhKVxyXG4gKiBpc1ZhbGlkTnVtYmVyKHsgcGhvbmU6ICc4MDA1NTUzNTM1JywgY291bnRyeTogJ1JVJyB9LCBtZXRhZGF0YSlcclxuICogYGBgXHJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkTnVtYmVyKGlucHV0LCBvcHRpb25zLCBtZXRhZGF0YSkge1xuICAvLyBJZiBhc3NpZ25pbmcgdGhlIGB7fWAgZGVmYXVsdCB2YWx1ZSBpcyBtb3ZlZCB0byB0aGUgYXJndW1lbnRzIGFib3ZlLFxuICAvLyBjb2RlIGNvdmVyYWdlIHdvdWxkIGRlY3JlYXNlIGZvciBzb21lIHdlaXJkIHJlYXNvbi5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKG1ldGFkYXRhKTtcbiAgLyoqXHJcbiAgICogQ2hlY2tzIGlmIGEgcGhvbmUgbnVtYmVyIGlzIFwicG9zc2libGVcIiAoYmFzaWNhbGx5IGp1c3QgY2hlY2tzIGl0cyBsZW5ndGgpLlxyXG4gICAqXHJcbiAgICogQHBhcmFtICB7b2JqZWN0fFBob25lTnVtYmVyfSBpbnB1dCDigJQgSWYgYG9wdGlvbnMudjI6IHRydWVgIGZsYWcgaXMgcGFzc2VkLCB0aGUgYGlucHV0YCBzaG91bGQgYmUgYSBgUGhvbmVOdW1iZXJgIGluc3RhbmNlLiBPdGhlcndpc2UsIGl0IHNob3VsZCBiZSBhbiBvYmplY3Qgb2Ygc2hhcGUgYHsgcGhvbmU6ICcuLi4nLCBjb3VudHJ5OiAnLi4uJyB9YC5cclxuICAgKiBAcGFyYW0gIHtvYmplY3R9IFtvcHRpb25zXVxyXG4gICAqIEBwYXJhbSAge29iamVjdH0gbWV0YWRhdGFcclxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XHJcbiAgICovXG5cbiAgbWV0YWRhdGEuc2VsZWN0TnVtYmVyaW5nUGxhbihpbnB1dC5jb3VudHJ5LCBpbnB1dC5jb3VudHJ5Q2FsbGluZ0NvZGUpOyAvLyBCeSBkZWZhdWx0LCBjb3VudHJpZXMgb25seSBoYXZlIHR5cGUgcmVnZXhwcyB3aGVuIGl0J3MgcmVxdWlyZWQgZm9yXG4gIC8vIGRpc3Rpbmd1aXNoaW5nIGRpZmZlcmVudCBjb3VudHJpZXMgaGF2aW5nIHRoZSBzYW1lIGBjb3VudHJ5Q2FsbGluZ0NvZGVgLlxuXG4gIGlmIChtZXRhZGF0YS5oYXNUeXBlcygpKSB7XG4gICAgcmV0dXJuIGdldE51bWJlclR5cGUoaW5wdXQsIG9wdGlvbnMsIG1ldGFkYXRhLm1ldGFkYXRhKSAhPT0gdW5kZWZpbmVkO1xuICB9IC8vIElmIHRoZXJlIGFyZSBubyB0eXBlIHJlZ2V4cHMgZm9yIHRoaXMgY291bnRyeSBpbiBtZXRhZGF0YSB0aGVuIHVzZVxuICAvLyBgbmF0aW9uYWxOdW1iZXJQYXR0ZXJuYCBhcyBhIFwiYmV0dGVyIHRoYW4gbm90aGluZ1wiIHJlcGxhY2VtZW50LlxuXG5cbiAgdmFyIG5hdGlvbmFsTnVtYmVyID0gb3B0aW9ucy52MiA/IGlucHV0Lm5hdGlvbmFsTnVtYmVyIDogaW5wdXQucGhvbmU7XG4gIHJldHVybiBtYXRjaGVzRW50aXJlbHkobmF0aW9uYWxOdW1iZXIsIG1ldGFkYXRhLm5hdGlvbmFsTnVtYmVyUGF0dGVybigpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzVmFsaWQuanMubWFwIiwiZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuaW1wb3J0IG5vcm1hbGl6ZUFyZ3VtZW50cyBmcm9tICcuL25vcm1hbGl6ZUFyZ3VtZW50cy5qcyc7XG5pbXBvcnQgcGFyc2VQaG9uZU51bWJlciBmcm9tICcuL3BhcnNlUGhvbmVOdW1iZXJfLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWRQaG9uZU51bWJlcigpIHtcbiAgdmFyIF9ub3JtYWxpemVBcmd1bWVudHMgPSBub3JtYWxpemVBcmd1bWVudHMoYXJndW1lbnRzKSxcbiAgICAgIHRleHQgPSBfbm9ybWFsaXplQXJndW1lbnRzLnRleHQsXG4gICAgICBvcHRpb25zID0gX25vcm1hbGl6ZUFyZ3VtZW50cy5vcHRpb25zLFxuICAgICAgbWV0YWRhdGEgPSBfbm9ybWFsaXplQXJndW1lbnRzLm1ldGFkYXRhO1xuXG4gIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgIGV4dHJhY3Q6IGZhbHNlXG4gIH0pO1xuICB2YXIgcGhvbmVOdW1iZXIgPSBwYXJzZVBob25lTnVtYmVyKHRleHQsIG9wdGlvbnMsIG1ldGFkYXRhKTtcbiAgcmV0dXJuIHBob25lTnVtYmVyICYmIHBob25lTnVtYmVyLmlzVmFsaWQoKSB8fCBmYWxzZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzVmFsaWRQaG9uZU51bWJlci5qcy5tYXAiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfSwgX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFwicHJvdG90eXBlXCIsIHsgd3JpdGFibGU6IGZhbHNlIH0pOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuaW1wb3J0IGNvbXBhcmUgZnJvbSAnLi90b29scy9zZW12ZXItY29tcGFyZS5qcyc7IC8vIEFkZGVkIFwicG9zc2libGVMZW5ndGhzXCIgYW5kIHJlbmFtZWRcbi8vIFwiY291bnRyeV9waG9uZV9jb2RlX3RvX2NvdW50cmllc1wiIHRvIFwiY291bnRyeV9jYWxsaW5nX2NvZGVzXCIuXG5cbnZhciBWMiA9ICcxLjAuMTgnOyAvLyBBZGRlZCBcImlkZF9wcmVmaXhcIiBhbmQgXCJkZWZhdWx0X2lkZF9wcmVmaXhcIi5cblxudmFyIFYzID0gJzEuMi4wJzsgLy8gTW92ZWQgYDAwMWAgY291bnRyeSBjb2RlIHRvIFwibm9uR2VvZ3JhcGhpY1wiIHNlY3Rpb24gb2YgbWV0YWRhdGEuXG5cbnZhciBWNCA9ICcxLjcuMzUnO1xudmFyIERFRkFVTFRfRVhUX1BSRUZJWCA9ICcgZXh0LiAnO1xudmFyIENBTExJTkdfQ09ERV9SRUdfRVhQID0gL15cXGQrJC87XG4vKipcclxuICogU2VlOiBodHRwczovL2dpdGxhYi5jb20vY2F0YW1waGV0YW1pbmUvbGlicGhvbmVudW1iZXItanMvYmxvYi9tYXN0ZXIvTUVUQURBVEEubWRcclxuICovXG5cbnZhciBNZXRhZGF0YSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIE1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1ldGFkYXRhKTtcblxuICAgIHZhbGlkYXRlTWV0YWRhdGEobWV0YWRhdGEpO1xuICAgIHRoaXMubWV0YWRhdGEgPSBtZXRhZGF0YTtcbiAgICBzZXRWZXJzaW9uLmNhbGwodGhpcywgbWV0YWRhdGEpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKE1ldGFkYXRhLCBbe1xuICAgIGtleTogXCJnZXRDb3VudHJpZXNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q291bnRyaWVzKCkge1xuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMubWV0YWRhdGEuY291bnRyaWVzKS5maWx0ZXIoZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgcmV0dXJuIF8gIT09ICcwMDEnO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldENvdW50cnlNZXRhZGF0YVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDb3VudHJ5TWV0YWRhdGEoY291bnRyeUNvZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhLmNvdW50cmllc1tjb3VudHJ5Q29kZV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5vbkdlb2dyYXBoaWNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbm9uR2VvZ3JhcGhpYygpIHtcbiAgICAgIGlmICh0aGlzLnYxIHx8IHRoaXMudjIgfHwgdGhpcy52MykgcmV0dXJuOyAvLyBgbm9uR2VvZ3JhcGhpY2FsYCB3YXMgYSB0eXBvLlxuICAgICAgLy8gSXQncyBwcmVzZW50IGluIG1ldGFkYXRhIGdlbmVyYXRlZCBmcm9tIGAxLjcuMzVgIHRvIGAxLjcuMzdgLlxuICAgICAgLy8gVGhlIHRlc3QgY2FzZSBjb3VsZCBiZSBmb3VuZCBieSBzZWFyY2hpbmcgZm9yIFwibm9uR2VvZ3JhcGhpY2FsXCIuXG5cbiAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhLm5vbkdlb2dyYXBoaWMgfHwgdGhpcy5tZXRhZGF0YS5ub25HZW9ncmFwaGljYWw7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc0NvdW50cnlcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzQ291bnRyeShjb3VudHJ5KSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRDb3VudHJ5TWV0YWRhdGEoY291bnRyeSkgIT09IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiaGFzQ2FsbGluZ0NvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzQ2FsbGluZ0NvZGUoY2FsbGluZ0NvZGUpIHtcbiAgICAgIGlmICh0aGlzLmdldENvdW50cnlDb2Rlc0ZvckNhbGxpbmdDb2RlKGNhbGxpbmdDb2RlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubm9uR2VvZ3JhcGhpYygpKSB7XG4gICAgICAgIGlmICh0aGlzLm5vbkdlb2dyYXBoaWMoKVtjYWxsaW5nQ29kZV0pIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQSBoYWNreSB3b3JrYXJvdW5kIGZvciBvbGQgY3VzdG9tIG1ldGFkYXRhIChnZW5lcmF0ZWQgYmVmb3JlIFY0KS5cbiAgICAgICAgdmFyIGNvdW50cnlDb2RlcyA9IHRoaXMuY291bnRyeUNhbGxpbmdDb2RlcygpW2NhbGxpbmdDb2RlXTtcblxuICAgICAgICBpZiAoY291bnRyeUNvZGVzICYmIGNvdW50cnlDb2Rlcy5sZW5ndGggPT09IDEgJiYgY291bnRyeUNvZGVzWzBdID09PSAnMDAxJykge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImlzTm9uR2VvZ3JhcGhpY0NhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzTm9uR2VvZ3JhcGhpY0NhbGxpbmdDb2RlKGNhbGxpbmdDb2RlKSB7XG4gICAgICBpZiAodGhpcy5ub25HZW9ncmFwaGljKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubm9uR2VvZ3JhcGhpYygpW2NhbGxpbmdDb2RlXSA/IHRydWUgOiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldENvdW50cnlDb2Rlc0ZvckNhbGxpbmdDb2RlKGNhbGxpbmdDb2RlKSA/IGZhbHNlIDogdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIERlcHJlY2F0ZWQuXG5cbiAgfSwge1xuICAgIGtleTogXCJjb3VudHJ5XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvdW50cnkoY291bnRyeUNvZGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNlbGVjdE51bWJlcmluZ1BsYW4oY291bnRyeUNvZGUpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJzZWxlY3ROdW1iZXJpbmdQbGFuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNlbGVjdE51bWJlcmluZ1BsYW4oY291bnRyeUNvZGUsIGNhbGxpbmdDb2RlKSB7XG4gICAgICAvLyBTdXBwb3J0cyBqdXN0IHBhc3NpbmcgYGNhbGxpbmdDb2RlYCBhcyB0aGUgZmlyc3QgYXJndW1lbnQuXG4gICAgICBpZiAoY291bnRyeUNvZGUgJiYgQ0FMTElOR19DT0RFX1JFR19FWFAudGVzdChjb3VudHJ5Q29kZSkpIHtcbiAgICAgICAgY2FsbGluZ0NvZGUgPSBjb3VudHJ5Q29kZTtcbiAgICAgICAgY291bnRyeUNvZGUgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBpZiAoY291bnRyeUNvZGUgJiYgY291bnRyeUNvZGUgIT09ICcwMDEnKSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNDb3VudHJ5KGNvdW50cnlDb2RlKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gY291bnRyeTogXCIuY29uY2F0KGNvdW50cnlDb2RlKSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm51bWJlcmluZ1BsYW4gPSBuZXcgTnVtYmVyaW5nUGxhbih0aGlzLmdldENvdW50cnlNZXRhZGF0YShjb3VudHJ5Q29kZSksIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChjYWxsaW5nQ29kZSkge1xuICAgICAgICBpZiAoIXRoaXMuaGFzQ2FsbGluZ0NvZGUoY2FsbGluZ0NvZGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjYWxsaW5nIGNvZGU6IFwiLmNvbmNhdChjYWxsaW5nQ29kZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5udW1iZXJpbmdQbGFuID0gbmV3IE51bWJlcmluZ1BsYW4odGhpcy5nZXROdW1iZXJpbmdQbGFuTWV0YWRhdGEoY2FsbGluZ0NvZGUpLCB0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubnVtYmVyaW5nUGxhbiA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImdldENvdW50cnlDb2Rlc0ZvckNhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvdW50cnlDb2Rlc0ZvckNhbGxpbmdDb2RlKGNhbGxpbmdDb2RlKSB7XG4gICAgICB2YXIgY291bnRyeUNvZGVzID0gdGhpcy5jb3VudHJ5Q2FsbGluZ0NvZGVzKClbY2FsbGluZ0NvZGVdO1xuXG4gICAgICBpZiAoY291bnRyeUNvZGVzKSB7XG4gICAgICAgIC8vIE1ldGFkYXRhIGJlZm9yZSBWNCBpbmNsdWRlZCBcIm5vbi1nZW9ncmFwaGljIGVudGl0eVwiIGNhbGxpbmcgY29kZXNcbiAgICAgICAgLy8gaW5zaWRlIGBjb3VudHJ5X2NhbGxpbmdfY29kZXNgIChmb3IgZXhhbXBsZSwgYFwiODgxXCI6W1wiMDAxXCJdYCkuXG4gICAgICAgIC8vIE5vdyB0aGUgc2VtYW50aWNzIG9mIGBjb3VudHJ5X2NhbGxpbmdfY29kZXNgIGhhcyBjaGFuZ2VkOlxuICAgICAgICAvLyBpdCdzIHNwZWNpZmljYWxseSBmb3IgXCJjb3VudHJpZXNcIiBub3cuXG4gICAgICAgIC8vIE9sZGVyIHZlcnNpb25zIG9mIGN1c3RvbSBtZXRhZGF0YSB3aWxsIHNpbXBseSBza2lwIHBhcnNpbmdcbiAgICAgICAgLy8gXCJub24tZ2VvZ3JhcGhpYyBlbnRpdHlcIiBwaG9uZSBudW1iZXJzIHdpdGggbmV3IHZlcnNpb25zXG4gICAgICAgIC8vIG9mIHRoaXMgbGlicmFyeTogaXQncyBub3QgY29uc2lkZXJlZCBhIGJ1ZyxcbiAgICAgICAgLy8gYmVjYXVzZSBzdWNoIG51bWJlcnMgYXJlIGV4dHJlbWVseSByYXJlLFxuICAgICAgICAvLyBhbmQgZGV2ZWxvcGVycyBleHRyZW1lbHkgcmFyZWx5IHVzZSBjdXN0b20gbWV0YWRhdGEuXG4gICAgICAgIGlmIChjb3VudHJ5Q29kZXMubGVuZ3RoID09PSAxICYmIGNvdW50cnlDb2Rlc1swXS5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY291bnRyeUNvZGVzO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXRDb3VudHJ5Q29kZUZvckNhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldENvdW50cnlDb2RlRm9yQ2FsbGluZ0NvZGUoY2FsbGluZ0NvZGUpIHtcbiAgICAgIHZhciBjb3VudHJ5Q29kZXMgPSB0aGlzLmdldENvdW50cnlDb2Rlc0ZvckNhbGxpbmdDb2RlKGNhbGxpbmdDb2RlKTtcblxuICAgICAgaWYgKGNvdW50cnlDb2Rlcykge1xuICAgICAgICByZXR1cm4gY291bnRyeUNvZGVzWzBdO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJnZXROdW1iZXJpbmdQbGFuTWV0YWRhdGFcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TnVtYmVyaW5nUGxhbk1ldGFkYXRhKGNhbGxpbmdDb2RlKSB7XG4gICAgICB2YXIgY291bnRyeUNvZGUgPSB0aGlzLmdldENvdW50cnlDb2RlRm9yQ2FsbGluZ0NvZGUoY2FsbGluZ0NvZGUpO1xuXG4gICAgICBpZiAoY291bnRyeUNvZGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q291bnRyeU1ldGFkYXRhKGNvdW50cnlDb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubm9uR2VvZ3JhcGhpYygpKSB7XG4gICAgICAgIHZhciBtZXRhZGF0YSA9IHRoaXMubm9uR2VvZ3JhcGhpYygpW2NhbGxpbmdDb2RlXTtcblxuICAgICAgICBpZiAobWV0YWRhdGEpIHtcbiAgICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEEgaGFja3kgd29ya2Fyb3VuZCBmb3Igb2xkIGN1c3RvbSBtZXRhZGF0YSAoZ2VuZXJhdGVkIGJlZm9yZSBWNCkuXG4gICAgICAgIC8vIEluIHRoYXQgbWV0YWRhdGEsIHRoZXJlIHdhcyBubyBjb25jZXB0IG9mIFwibm9uLWdlb2dyYXBoaWNcIiBtZXRhZGF0YVxuICAgICAgICAvLyBzbyBtZXRhZGF0YSBmb3IgYDAwMWAgY291bnRyeSBjb2RlIHdhcyBzdG9yZWQgYWxvbmcgd2l0aCBvdGhlciBjb3VudHJpZXMuXG4gICAgICAgIC8vIFRoZSB0ZXN0IGNhc2UgY2FuIGJlIGZvdW5kIGJ5IHNlYXJjaGluZyBmb3I6XG4gICAgICAgIC8vIFwic2hvdWxkIHdvcmsgYXJvdW5kIGBub25HZW9ncmFwaGljYCBtZXRhZGF0YSBub3QgZXhpc3RpbmdcIi5cbiAgICAgICAgdmFyIGNvdW50cnlDb2RlcyA9IHRoaXMuY291bnRyeUNhbGxpbmdDb2RlcygpW2NhbGxpbmdDb2RlXTtcblxuICAgICAgICBpZiAoY291bnRyeUNvZGVzICYmIGNvdW50cnlDb2Rlcy5sZW5ndGggPT09IDEgJiYgY291bnRyeUNvZGVzWzBdID09PSAnMDAxJykge1xuICAgICAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhLmNvdW50cmllc1snMDAxJ107XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIERlcHJlY2F0ZWQuXG5cbiAgfSwge1xuICAgIGtleTogXCJjb3VudHJ5Q2FsbGluZ0NvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY291bnRyeUNhbGxpbmdDb2RlKCkge1xuICAgICAgcmV0dXJuIHRoaXMubnVtYmVyaW5nUGxhbi5jYWxsaW5nQ29kZSgpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcIklERFByZWZpeFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBJRERQcmVmaXgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5udW1iZXJpbmdQbGFuLklERFByZWZpeCgpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcImRlZmF1bHRJRERQcmVmaXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdElERFByZWZpeCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bWJlcmluZ1BsYW4uZGVmYXVsdElERFByZWZpeCgpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsTnVtYmVyUGF0dGVyblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXRpb25hbE51bWJlclBhdHRlcm4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5udW1iZXJpbmdQbGFuLm5hdGlvbmFsTnVtYmVyUGF0dGVybigpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcInBvc3NpYmxlTGVuZ3Roc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwb3NzaWJsZUxlbmd0aHMoKSB7XG4gICAgICByZXR1cm4gdGhpcy5udW1iZXJpbmdQbGFuLnBvc3NpYmxlTGVuZ3RocygpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcImZvcm1hdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0cygpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bWJlcmluZ1BsYW4uZm9ybWF0cygpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsUHJlZml4Rm9yUGFyc2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXRpb25hbFByZWZpeEZvclBhcnNpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5udW1iZXJpbmdQbGFuLm5hdGlvbmFsUHJlZml4Rm9yUGFyc2luZygpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsUHJlZml4VHJhbnNmb3JtUnVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXRpb25hbFByZWZpeFRyYW5zZm9ybVJ1bGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5udW1iZXJpbmdQbGFuLm5hdGlvbmFsUHJlZml4VHJhbnNmb3JtUnVsZSgpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcImxlYWRpbmdEaWdpdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVhZGluZ0RpZ2l0cygpIHtcbiAgICAgIHJldHVybiB0aGlzLm51bWJlcmluZ1BsYW4ubGVhZGluZ0RpZ2l0cygpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcImhhc1R5cGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1R5cGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMubnVtYmVyaW5nUGxhbi5oYXNUeXBlcygpO1xuICAgIH0gLy8gRGVwcmVjYXRlZC5cblxuICB9LCB7XG4gICAga2V5OiBcInR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHlwZShfdHlwZSkge1xuICAgICAgcmV0dXJuIHRoaXMubnVtYmVyaW5nUGxhbi50eXBlKF90eXBlKTtcbiAgICB9IC8vIERlcHJlY2F0ZWQuXG5cbiAgfSwge1xuICAgIGtleTogXCJleHRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZXh0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubnVtYmVyaW5nUGxhbi5leHQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiY291bnRyeUNhbGxpbmdDb2Rlc1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb3VudHJ5Q2FsbGluZ0NvZGVzKCkge1xuICAgICAgaWYgKHRoaXMudjEpIHJldHVybiB0aGlzLm1ldGFkYXRhLmNvdW50cnlfcGhvbmVfY29kZV90b19jb3VudHJpZXM7XG4gICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YS5jb3VudHJ5X2NhbGxpbmdfY29kZXM7XG4gICAgfSAvLyBEZXByZWNhdGVkLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiY2hvb3NlQ291bnRyeUJ5Q291bnRyeUNhbGxpbmdDb2RlXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNob29zZUNvdW50cnlCeUNvdW50cnlDYWxsaW5nQ29kZShjYWxsaW5nQ29kZSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0TnVtYmVyaW5nUGxhbihjYWxsaW5nQ29kZSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1NlbGVjdGVkTnVtYmVyaW5nUGxhblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNTZWxlY3RlZE51bWJlcmluZ1BsYW4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5udW1iZXJpbmdQbGFuICE9PSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIE1ldGFkYXRhO1xufSgpO1xuXG5leHBvcnQgeyBNZXRhZGF0YSBhcyBkZWZhdWx0IH07XG5cbnZhciBOdW1iZXJpbmdQbGFuID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTnVtYmVyaW5nUGxhbihtZXRhZGF0YSwgZ2xvYmFsTWV0YWRhdGFPYmplY3QpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTnVtYmVyaW5nUGxhbik7XG5cbiAgICB0aGlzLmdsb2JhbE1ldGFkYXRhT2JqZWN0ID0gZ2xvYmFsTWV0YWRhdGFPYmplY3Q7XG4gICAgdGhpcy5tZXRhZGF0YSA9IG1ldGFkYXRhO1xuICAgIHNldFZlcnNpb24uY2FsbCh0aGlzLCBnbG9iYWxNZXRhZGF0YU9iamVjdC5tZXRhZGF0YSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoTnVtYmVyaW5nUGxhbiwgW3tcbiAgICBrZXk6IFwiY2FsbGluZ0NvZGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gY2FsbGluZ0NvZGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YVswXTtcbiAgICB9IC8vIEZvcm1hdHRpbmcgaW5mb3JtYXRpb24gZm9yIHJlZ2lvbnMgd2hpY2ggc2hhcmVcbiAgICAvLyBhIGNvdW50cnkgY2FsbGluZyBjb2RlIGlzIGNvbnRhaW5lZCBieSBvbmx5IG9uZSByZWdpb25cbiAgICAvLyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy4gRm9yIGV4YW1wbGUsIGZvciBOQU5QQSByZWdpb25cbiAgICAvLyAoXCJOb3J0aCBBbWVyaWNhbiBOdW1iZXJpbmcgUGxhbiBBZG1pbmlzdHJhdGlvblwiLFxuICAgIC8vICB3aGljaCBpbmNsdWRlcyBVU0EsIENhbmFkYSwgQ2F5bWFuIElzbGFuZHMsIEJhaGFtYXMsIGV0YylcbiAgICAvLyBpdCB3aWxsIGJlIGNvbnRhaW5lZCBpbiB0aGUgbWV0YWRhdGEgZm9yIGBVU2AuXG5cbiAgfSwge1xuICAgIGtleTogXCJnZXREZWZhdWx0Q291bnRyeU1ldGFkYXRhRm9yUmVnaW9uXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlZmF1bHRDb3VudHJ5TWV0YWRhdGFGb3JSZWdpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5nbG9iYWxNZXRhZGF0YU9iamVjdC5nZXROdW1iZXJpbmdQbGFuTWV0YWRhdGEodGhpcy5jYWxsaW5nQ29kZSgpKTtcbiAgICB9IC8vIElzIGFsd2F5cyBwcmVzZW50LlxuXG4gIH0sIHtcbiAgICBrZXk6IFwiSUREUHJlZml4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIElERFByZWZpeCgpIHtcbiAgICAgIGlmICh0aGlzLnYxIHx8IHRoaXMudjIpIHJldHVybjtcbiAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhWzFdO1xuICAgIH0gLy8gSXMgb25seSBwcmVzZW50IHdoZW4gYSBjb3VudHJ5IHN1cHBvcnRzIG11bHRpcGxlIElERCBwcmVmaXhlcy5cblxuICB9LCB7XG4gICAga2V5OiBcImRlZmF1bHRJRERQcmVmaXhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGVmYXVsdElERFByZWZpeCgpIHtcbiAgICAgIGlmICh0aGlzLnYxIHx8IHRoaXMudjIpIHJldHVybjtcbiAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhWzEyXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmF0aW9uYWxOdW1iZXJQYXR0ZXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5hdGlvbmFsTnVtYmVyUGF0dGVybigpIHtcbiAgICAgIGlmICh0aGlzLnYxIHx8IHRoaXMudjIpIHJldHVybiB0aGlzLm1ldGFkYXRhWzFdO1xuICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGFbMl07XG4gICAgfSAvLyBcInBvc3NpYmxlIGxlbmd0aFwiIGRhdGEgaXMgYWx3YXlzIHByZXNlbnQgaW4gR29vZ2xlJ3MgbWV0YWRhdGEuXG5cbiAgfSwge1xuICAgIGtleTogXCJwb3NzaWJsZUxlbmd0aHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zc2libGVMZW5ndGhzKCkge1xuICAgICAgaWYgKHRoaXMudjEpIHJldHVybjtcbiAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhW3RoaXMudjIgPyAyIDogM107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXRGb3JtYXRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9nZXRGb3JtYXRzKG1ldGFkYXRhKSB7XG4gICAgICByZXR1cm4gbWV0YWRhdGFbdGhpcy52MSA/IDIgOiB0aGlzLnYyID8gMyA6IDRdO1xuICAgIH0gLy8gRm9yIGNvdW50cmllcyBvZiB0aGUgc2FtZSByZWdpb24gKGUuZy4gTkFOUEEpXG4gICAgLy8gZm9ybWF0cyBhcmUgYWxsIHN0b3JlZCBpbiB0aGUgXCJtYWluXCIgY291bnRyeSBmb3IgdGhhdCByZWdpb24uXG4gICAgLy8gRS5nLiBcIlJVXCIgYW5kIFwiS1pcIiwgXCJVU1wiIGFuZCBcIkNBXCIuXG5cbiAgfSwge1xuICAgIGtleTogXCJmb3JtYXRzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZvcm1hdHMoKSB7XG4gICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICB2YXIgZm9ybWF0cyA9IHRoaXMuX2dldEZvcm1hdHModGhpcy5tZXRhZGF0YSkgfHwgdGhpcy5fZ2V0Rm9ybWF0cyh0aGlzLmdldERlZmF1bHRDb3VudHJ5TWV0YWRhdGFGb3JSZWdpb24oKSkgfHwgW107XG4gICAgICByZXR1cm4gZm9ybWF0cy5tYXAoZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGb3JtYXQoXywgX3RoaXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsUHJlZml4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5hdGlvbmFsUHJlZml4KCkge1xuICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGFbdGhpcy52MSA/IDMgOiB0aGlzLnYyID8gNCA6IDVdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfZ2V0TmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZShtZXRhZGF0YSkge1xuICAgICAgcmV0dXJuIG1ldGFkYXRhW3RoaXMudjEgPyA0IDogdGhpcy52MiA/IDUgOiA2XTtcbiAgICB9IC8vIEZvciBjb3VudHJpZXMgb2YgdGhlIHNhbWUgcmVnaW9uIChlLmcuIE5BTlBBKVxuICAgIC8vIG5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGUgaXMgc3RvcmVkIGluIHRoZSBcIm1haW5cIiBjb3VudHJ5IGZvciB0aGF0IHJlZ2lvbi5cbiAgICAvLyBFLmcuIFwiUlVcIiBhbmQgXCJLWlwiLCBcIlVTXCIgYW5kIFwiQ0FcIi5cblxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXROYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlKHRoaXMubWV0YWRhdGEpIHx8IHRoaXMuX2dldE5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUodGhpcy5nZXREZWZhdWx0Q291bnRyeU1ldGFkYXRhRm9yUmVnaW9uKCkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfbmF0aW9uYWxQcmVmaXhGb3JQYXJzaW5nXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIF9uYXRpb25hbFByZWZpeEZvclBhcnNpbmcoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YVt0aGlzLnYxID8gNSA6IHRoaXMudjIgPyA2IDogN107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsUHJlZml4Rm9yUGFyc2luZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXRpb25hbFByZWZpeEZvclBhcnNpbmcoKSB7XG4gICAgICAvLyBJZiBgbmF0aW9uYWxfcHJlZml4X2Zvcl9wYXJzaW5nYCBpcyBub3Qgc2V0IGV4cGxpY2l0bHksXG4gICAgICAvLyB0aGVuIGluZmVyIGl0IGZyb20gYG5hdGlvbmFsX3ByZWZpeGAgKGlmIGFueSlcbiAgICAgIHJldHVybiB0aGlzLl9uYXRpb25hbFByZWZpeEZvclBhcnNpbmcoKSB8fCB0aGlzLm5hdGlvbmFsUHJlZml4KCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsUHJlZml4VHJhbnNmb3JtUnVsZVwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXRpb25hbFByZWZpeFRyYW5zZm9ybVJ1bGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YVt0aGlzLnYxID8gNiA6IHRoaXMudjIgPyA3IDogOF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9nZXROYXRpb25hbFByZWZpeElzT3B0aW9uYWxXaGVuRm9ybWF0dGluZ1wiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfZ2V0TmF0aW9uYWxQcmVmaXhJc09wdGlvbmFsV2hlbkZvcm1hdHRpbmcoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLm1ldGFkYXRhW3RoaXMudjEgPyA3IDogdGhpcy52MiA/IDggOiA5XTtcbiAgICB9IC8vIEZvciBjb3VudHJpZXMgb2YgdGhlIHNhbWUgcmVnaW9uIChlLmcuIE5BTlBBKVxuICAgIC8vIFwibmF0aW9uYWwgcHJlZml4IGlzIG9wdGlvbmFsIHdoZW4gZm9ybWF0dGluZ1wiIGZsYWcgaXNcbiAgICAvLyBzdG9yZWQgaW4gdGhlIFwibWFpblwiIGNvdW50cnkgZm9yIHRoYXQgcmVnaW9uLlxuICAgIC8vIEUuZy4gXCJSVVwiIGFuZCBcIktaXCIsIFwiVVNcIiBhbmQgXCJDQVwiLlxuXG4gIH0sIHtcbiAgICBrZXk6IFwibmF0aW9uYWxQcmVmaXhJc09wdGlvbmFsV2hlbkZvcm1hdHRpbmdJbk5hdGlvbmFsRm9ybWF0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG5hdGlvbmFsUHJlZml4SXNPcHRpb25hbFdoZW5Gb3JtYXR0aW5nSW5OYXRpb25hbEZvcm1hdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9nZXROYXRpb25hbFByZWZpeElzT3B0aW9uYWxXaGVuRm9ybWF0dGluZyh0aGlzLm1ldGFkYXRhKSB8fCB0aGlzLl9nZXROYXRpb25hbFByZWZpeElzT3B0aW9uYWxXaGVuRm9ybWF0dGluZyh0aGlzLmdldERlZmF1bHRDb3VudHJ5TWV0YWRhdGFGb3JSZWdpb24oKSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImxlYWRpbmdEaWdpdHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbGVhZGluZ0RpZ2l0cygpIHtcbiAgICAgIHJldHVybiB0aGlzLm1ldGFkYXRhW3RoaXMudjEgPyA4IDogdGhpcy52MiA/IDkgOiAxMF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInR5cGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHR5cGVzKCkge1xuICAgICAgcmV0dXJuIHRoaXMubWV0YWRhdGFbdGhpcy52MSA/IDkgOiB0aGlzLnYyID8gMTAgOiAxMV07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImhhc1R5cGVzXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGhhc1R5cGVzKCkge1xuICAgICAgLy8gVmVyc2lvbnMgMS4yLjAgLSAxLjIuNDogY2FuIGJlIGBbXWAuXG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICBpZiAodGhpcy50eXBlcygpICYmIHRoaXMudHlwZXMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfSAvLyBWZXJzaW9ucyA8PSAxLjIuNDogY2FuIGJlIGB1bmRlZmluZWRgLlxuICAgICAgLy8gVmVyc2lvbiA+PSAxLjIuNTogY2FuIGJlIGAwYC5cblxuXG4gICAgICByZXR1cm4gISF0aGlzLnR5cGVzKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcInR5cGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHlwZShfdHlwZTIpIHtcbiAgICAgIGlmICh0aGlzLmhhc1R5cGVzKCkgJiYgZ2V0VHlwZSh0aGlzLnR5cGVzKCksIF90eXBlMikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUeXBlKGdldFR5cGUodGhpcy50eXBlcygpLCBfdHlwZTIpLCB0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwiZXh0XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dCgpIHtcbiAgICAgIGlmICh0aGlzLnYxIHx8IHRoaXMudjIpIHJldHVybiBERUZBVUxUX0VYVF9QUkVGSVg7XG4gICAgICByZXR1cm4gdGhpcy5tZXRhZGF0YVsxM10gfHwgREVGQVVMVF9FWFRfUFJFRklYO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBOdW1iZXJpbmdQbGFuO1xufSgpO1xuXG52YXIgRm9ybWF0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRm9ybWF0KGZvcm1hdCwgbWV0YWRhdGEpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRm9ybWF0KTtcblxuICAgIHRoaXMuX2Zvcm1hdCA9IGZvcm1hdDtcbiAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoRm9ybWF0LCBbe1xuICAgIGtleTogXCJwYXR0ZXJuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHBhdHRlcm4oKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZm9ybWF0WzBdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJmb3JtYXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gZm9ybWF0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdFsxXTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibGVhZGluZ0RpZ2l0c1BhdHRlcm5zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGxlYWRpbmdEaWdpdHNQYXR0ZXJucygpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRbMl0gfHwgW107XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gbmF0aW9uYWxQcmVmaXhGb3JtYXR0aW5nUnVsZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRbM10gfHwgdGhpcy5tZXRhZGF0YS5uYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIm5hdGlvbmFsUHJlZml4SXNPcHRpb25hbFdoZW5Gb3JtYXR0aW5nSW5OYXRpb25hbEZvcm1hdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXRpb25hbFByZWZpeElzT3B0aW9uYWxXaGVuRm9ybWF0dGluZ0luTmF0aW9uYWxGb3JtYXQoKSB7XG4gICAgICByZXR1cm4gISF0aGlzLl9mb3JtYXRbNF0gfHwgdGhpcy5tZXRhZGF0YS5uYXRpb25hbFByZWZpeElzT3B0aW9uYWxXaGVuRm9ybWF0dGluZ0luTmF0aW9uYWxGb3JtYXQoKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6IFwibmF0aW9uYWxQcmVmaXhJc01hbmRhdG9yeVdoZW5Gb3JtYXR0aW5nSW5OYXRpb25hbEZvcm1hdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBuYXRpb25hbFByZWZpeElzTWFuZGF0b3J5V2hlbkZvcm1hdHRpbmdJbk5hdGlvbmFsRm9ybWF0KCkge1xuICAgICAgLy8gTmF0aW9uYWwgcHJlZml4IGlzIG9taXR0ZWQgaWYgdGhlcmUncyBubyBuYXRpb25hbCBwcmVmaXggZm9ybWF0dGluZyBydWxlXG4gICAgICAvLyBzZXQgZm9yIHRoaXMgY291bnRyeSwgb3Igd2hlbiB0aGUgbmF0aW9uYWwgcHJlZml4IGZvcm1hdHRpbmcgcnVsZVxuICAgICAgLy8gY29udGFpbnMgbm8gbmF0aW9uYWwgcHJlZml4IGl0c2VsZiwgb3Igd2hlbiB0aGlzIHJ1bGUgaXMgc2V0IGJ1dFxuICAgICAgLy8gbmF0aW9uYWwgcHJlZml4IGlzIG9wdGlvbmFsIGZvciB0aGlzIHBob25lIG51bWJlciBmb3JtYXRcbiAgICAgIC8vIChhbmQgaXQgaXMgbm90IGVuZm9yY2VkIGV4cGxpY2l0bHkpXG4gICAgICByZXR1cm4gdGhpcy51c2VzTmF0aW9uYWxQcmVmaXgoKSAmJiAhdGhpcy5uYXRpb25hbFByZWZpeElzT3B0aW9uYWxXaGVuRm9ybWF0dGluZ0luTmF0aW9uYWxGb3JtYXQoKTtcbiAgICB9IC8vIENoZWNrcyB3aGV0aGVyIG5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGUgY29udGFpbnMgbmF0aW9uYWwgcHJlZml4LlxuXG4gIH0sIHtcbiAgICBrZXk6IFwidXNlc05hdGlvbmFsUHJlZml4XCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVzZXNOYXRpb25hbFByZWZpeCgpIHtcbiAgICAgIHJldHVybiB0aGlzLm5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoKSAmJiAvLyBDaGVjayB0aGF0IG5hdGlvbmFsIHByZWZpeCBmb3JtYXR0aW5nIHJ1bGUgaXMgbm90IGEgXCJkdW1teVwiIG9uZS5cbiAgICAgICFGSVJTVF9HUk9VUF9PTkxZX1BSRUZJWF9QQVRURVJOLnRlc3QodGhpcy5uYXRpb25hbFByZWZpeEZvcm1hdHRpbmdSdWxlKCkpIC8vIEluIGNvbXByZXNzZWQgbWV0YWRhdGEsIGB0aGlzLm5hdGlvbmFsUHJlZml4Rm9ybWF0dGluZ1J1bGUoKWAgaXMgYDBgXG4gICAgICAvLyB3aGVuIGBuYXRpb25hbF9wcmVmaXhfZm9ybWF0dGluZ19ydWxlYCBpcyBub3QgcHJlc2VudC5cbiAgICAgIC8vIFNvLCBgdHJ1ZWAgb3IgYGZhbHNlYCBhcmUgcmV0dXJuZWQgZXhwbGljaXRseSBoZXJlLCBzbyB0aGF0XG4gICAgICAvLyBgMGAgbnVtYmVyIGlzbid0IHJldHVybmVkLlxuICAgICAgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImludGVybmF0aW9uYWxGb3JtYXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW50ZXJuYXRpb25hbEZvcm1hdCgpIHtcbiAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRbNV0gfHwgdGhpcy5mb3JtYXQoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gRm9ybWF0O1xufSgpO1xuLyoqXHJcbiAqIEEgcGF0dGVybiB0aGF0IGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIHRoZSBuYXRpb25hbCBwcmVmaXggZm9ybWF0dGluZyBydWxlXHJcbiAqIGhhcyB0aGUgZmlyc3QgZ3JvdXAgb25seSwgaS5lLiwgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgbmF0aW9uYWwgcHJlZml4LlxyXG4gKiBOb3RlIHRoYXQgdGhlIHBhdHRlcm4gZXhwbGljaXRseSBhbGxvd3MgZm9yIHVuYmFsYW5jZWQgcGFyZW50aGVzZXMuXHJcbiAqL1xuXG5cbnZhciBGSVJTVF9HUk9VUF9PTkxZX1BSRUZJWF9QQVRURVJOID0gL15cXCg/XFwkMVxcKT8kLztcblxudmFyIFR5cGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBUeXBlKHR5cGUsIG1ldGFkYXRhKSB7XG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFR5cGUpO1xuXG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm1ldGFkYXRhID0gbWV0YWRhdGE7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVHlwZSwgW3tcbiAgICBrZXk6IFwicGF0dGVyblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBwYXR0ZXJuKCkge1xuICAgICAgaWYgKHRoaXMubWV0YWRhdGEudjEpIHJldHVybiB0aGlzLnR5cGU7XG4gICAgICByZXR1cm4gdGhpcy50eXBlWzBdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJwb3NzaWJsZUxlbmd0aHNcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gcG9zc2libGVMZW5ndGhzKCkge1xuICAgICAgaWYgKHRoaXMubWV0YWRhdGEudjEpIHJldHVybjtcbiAgICAgIHJldHVybiB0aGlzLnR5cGVbMV0gfHwgdGhpcy5tZXRhZGF0YS5wb3NzaWJsZUxlbmd0aHMoKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVHlwZTtcbn0oKTtcblxuZnVuY3Rpb24gZ2V0VHlwZSh0eXBlcywgdHlwZSkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdGSVhFRF9MSU5FJzpcbiAgICAgIHJldHVybiB0eXBlc1swXTtcblxuICAgIGNhc2UgJ01PQklMRSc6XG4gICAgICByZXR1cm4gdHlwZXNbMV07XG5cbiAgICBjYXNlICdUT0xMX0ZSRUUnOlxuICAgICAgcmV0dXJuIHR5cGVzWzJdO1xuXG4gICAgY2FzZSAnUFJFTUlVTV9SQVRFJzpcbiAgICAgIHJldHVybiB0eXBlc1szXTtcblxuICAgIGNhc2UgJ1BFUlNPTkFMX05VTUJFUic6XG4gICAgICByZXR1cm4gdHlwZXNbNF07XG5cbiAgICBjYXNlICdWT0lDRU1BSUwnOlxuICAgICAgcmV0dXJuIHR5cGVzWzVdO1xuXG4gICAgY2FzZSAnVUFOJzpcbiAgICAgIHJldHVybiB0eXBlc1s2XTtcblxuICAgIGNhc2UgJ1BBR0VSJzpcbiAgICAgIHJldHVybiB0eXBlc1s3XTtcblxuICAgIGNhc2UgJ1ZPSVAnOlxuICAgICAgcmV0dXJuIHR5cGVzWzhdO1xuXG4gICAgY2FzZSAnU0hBUkVEX0NPU1QnOlxuICAgICAgcmV0dXJuIHR5cGVzWzldO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZU1ldGFkYXRhKG1ldGFkYXRhKSB7XG4gIGlmICghbWV0YWRhdGEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1tsaWJwaG9uZW51bWJlci1qc10gYG1ldGFkYXRhYCBhcmd1bWVudCBub3QgcGFzc2VkLiBDaGVjayB5b3VyIGFyZ3VtZW50cy4nKTtcbiAgfSAvLyBgY291bnRyeV9waG9uZV9jb2RlX3RvX2NvdW50cmllc2Agd2FzIHJlbmFtZWQgdG9cbiAgLy8gYGNvdW50cnlfY2FsbGluZ19jb2Rlc2AgaW4gYDEuMC4xOGAuXG5cblxuICBpZiAoIWlzX29iamVjdChtZXRhZGF0YSkgfHwgIWlzX29iamVjdChtZXRhZGF0YS5jb3VudHJpZXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiW2xpYnBob25lbnVtYmVyLWpzXSBgbWV0YWRhdGFgIGFyZ3VtZW50IHdhcyBwYXNzZWQgYnV0IGl0J3Mgbm90IGEgdmFsaWQgbWV0YWRhdGEuIE11c3QgYmUgYW4gb2JqZWN0IGhhdmluZyBgLmNvdW50cmllc2AgY2hpbGQgb2JqZWN0IHByb3BlcnR5LiBHb3QgXCIuY29uY2F0KGlzX29iamVjdChtZXRhZGF0YSkgPyAnYW4gb2JqZWN0IG9mIHNoYXBlOiB7ICcgKyBPYmplY3Qua2V5cyhtZXRhZGF0YSkuam9pbignLCAnKSArICcgfScgOiAnYSAnICsgdHlwZV9vZihtZXRhZGF0YSkgKyAnOiAnICsgbWV0YWRhdGEsIFwiLlwiKSk7XG4gIH1cbn0gLy8gQmFiZWwgdHJhbnNmb3JtcyBgdHlwZW9mYCBpbnRvIHNvbWUgXCJicmFuY2hlc1wiXG4vLyBzbyBpc3RhbmJ1bCB3aWxsIHNob3cgdGhpcyBhcyBcImJyYW5jaCBub3QgY292ZXJlZFwiLlxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG52YXIgaXNfb2JqZWN0ID0gZnVuY3Rpb24gaXNfb2JqZWN0KF8pIHtcbiAgcmV0dXJuIF90eXBlb2YoXykgPT09ICdvYmplY3QnO1xufTsgLy8gQmFiZWwgdHJhbnNmb3JtcyBgdHlwZW9mYCBpbnRvIHNvbWUgXCJicmFuY2hlc1wiXG4vLyBzbyBpc3RhbmJ1bCB3aWxsIHNob3cgdGhpcyBhcyBcImJyYW5jaCBub3QgY292ZXJlZFwiLlxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuXG5cbnZhciB0eXBlX29mID0gZnVuY3Rpb24gdHlwZV9vZihfKSB7XG4gIHJldHVybiBfdHlwZW9mKF8pO1xufTtcbi8qKlxyXG4gKiBSZXR1cm5zIGV4dGVuc2lvbiBwcmVmaXggZm9yIGEgY291bnRyeS5cclxuICogQHBhcmFtICB7c3RyaW5nfSBjb3VudHJ5XHJcbiAqIEBwYXJhbSAge29iamVjdH0gbWV0YWRhdGFcclxuICogQHJldHVybiB7c3RyaW5nP31cclxuICogQGV4YW1wbGVcclxuICogLy8gUmV0dXJucyBcIiBleHQuIFwiXHJcbiAqIGdldEV4dFByZWZpeChcIlVTXCIpXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeHRQcmVmaXgoY291bnRyeSwgbWV0YWRhdGEpIHtcbiAgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEobWV0YWRhdGEpO1xuXG4gIGlmIChtZXRhZGF0YS5oYXNDb3VudHJ5KGNvdW50cnkpKSB7XG4gICAgcmV0dXJuIG1ldGFkYXRhLmNvdW50cnkoY291bnRyeSkuZXh0KCk7XG4gIH1cblxuICByZXR1cm4gREVGQVVMVF9FWFRfUFJFRklYO1xufVxuLyoqXHJcbiAqIFJldHVybnMgXCJjb3VudHJ5IGNhbGxpbmcgY29kZVwiIGZvciBhIGNvdW50cnkuXHJcbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgY291bnRyeSBkb2Vzbid0IGV4aXN0IG9yIGlzbid0IHN1cHBvcnRlZCBieSB0aGlzIGxpYnJhcnkuXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gY291bnRyeVxyXG4gKiBAcGFyYW0gIHtvYmplY3R9IG1ldGFkYXRhXHJcbiAqIEByZXR1cm4ge3N0cmluZ31cclxuICogQGV4YW1wbGVcclxuICogLy8gUmV0dXJucyBcIjQ0XCJcclxuICogZ2V0Q291bnRyeUNhbGxpbmdDb2RlKFwiR0JcIilcclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb3VudHJ5Q2FsbGluZ0NvZGUoY291bnRyeSwgbWV0YWRhdGEpIHtcbiAgbWV0YWRhdGEgPSBuZXcgTWV0YWRhdGEobWV0YWRhdGEpO1xuXG4gIGlmIChtZXRhZGF0YS5oYXNDb3VudHJ5KGNvdW50cnkpKSB7XG4gICAgcmV0dXJuIG1ldGFkYXRhLmNvdW50cnkoY291bnRyeSkuY291bnRyeUNhbGxpbmdDb2RlKCk7XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGNvdW50cnk6IFwiLmNvbmNhdChjb3VudHJ5KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTdXBwb3J0ZWRDb3VudHJ5KGNvdW50cnksIG1ldGFkYXRhKSB7XG4gIC8vIG1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKG1ldGFkYXRhKVxuICAvLyByZXR1cm4gbWV0YWRhdGEuaGFzQ291bnRyeShjb3VudHJ5KVxuICByZXR1cm4gbWV0YWRhdGEuY291bnRyaWVzW2NvdW50cnldICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIHNldFZlcnNpb24obWV0YWRhdGEpIHtcbiAgdmFyIHZlcnNpb24gPSBtZXRhZGF0YS52ZXJzaW9uO1xuXG4gIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ251bWJlcicpIHtcbiAgICB0aGlzLnYxID0gdmVyc2lvbiA9PT0gMTtcbiAgICB0aGlzLnYyID0gdmVyc2lvbiA9PT0gMjtcbiAgICB0aGlzLnYzID0gdmVyc2lvbiA9PT0gMztcbiAgICB0aGlzLnY0ID0gdmVyc2lvbiA9PT0gNDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXZlcnNpb24pIHtcbiAgICAgIHRoaXMudjEgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoY29tcGFyZSh2ZXJzaW9uLCBWMykgPT09IC0xKSB7XG4gICAgICB0aGlzLnYyID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGNvbXBhcmUodmVyc2lvbiwgVjQpID09PSAtMSkge1xuICAgICAgdGhpcy52MyA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudjQgPSB0cnVlO1xuICAgIH1cbiAgfVxufSAvLyBjb25zdCBJU09fQ09VTlRSWV9DT0RFID0gL15bQS1aXXsyfSQvXG4vLyBmdW5jdGlvbiBpc0NvdW50cnlDb2RlKGNvdW50cnlDb2RlKSB7XG4vLyBcdHJldHVybiBJU09fQ09VTlRSWV9DT0RFLnRlc3QoY291bnRyeUNvZGVPckNvdW50cnlDYWxsaW5nQ29kZSlcbi8vIH1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1ldGFkYXRhLmpzLm1hcCIsImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9LCBfdHlwZW9mKG9iaik7IH1cblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307IGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7IH0pOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG4vLyBFeHRyYWN0cyB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXMgZnJvbSBmdW5jdGlvbiBhcmd1bWVudHM6XG4vLyAqIGlucHV0IGB0ZXh0YFxuLy8gKiBgb3B0aW9uc2Agb2JqZWN0XG4vLyAqIGBtZXRhZGF0YWAgSlNPTlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQXJndW1lbnRzKGFyZ3MpIHtcbiAgdmFyIF9BcnJheSRwcm90b3R5cGUkc2xpYyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpLFxuICAgICAgX0FycmF5JHByb3RvdHlwZSRzbGljMiA9IF9zbGljZWRUb0FycmF5KF9BcnJheSRwcm90b3R5cGUkc2xpYywgNCksXG4gICAgICBhcmdfMSA9IF9BcnJheSRwcm90b3R5cGUkc2xpYzJbMF0sXG4gICAgICBhcmdfMiA9IF9BcnJheSRwcm90b3R5cGUkc2xpYzJbMV0sXG4gICAgICBhcmdfMyA9IF9BcnJheSRwcm90b3R5cGUkc2xpYzJbMl0sXG4gICAgICBhcmdfNCA9IF9BcnJheSRwcm90b3R5cGUkc2xpYzJbM107XG5cbiAgdmFyIHRleHQ7XG4gIHZhciBvcHRpb25zO1xuICB2YXIgbWV0YWRhdGE7IC8vIElmIHRoZSBwaG9uZSBudW1iZXIgaXMgcGFzc2VkIGFzIGEgc3RyaW5nLlxuICAvLyBgcGFyc2VQaG9uZU51bWJlcignODgwMDU1NTM1MzUnLCAuLi4pYC5cblxuICBpZiAodHlwZW9mIGFyZ18xID09PSAnc3RyaW5nJykge1xuICAgIHRleHQgPSBhcmdfMTtcbiAgfSBlbHNlIHRocm93IG5ldyBUeXBlRXJyb3IoJ0EgdGV4dCBmb3IgcGFyc2luZyBtdXN0IGJlIGEgc3RyaW5nLicpOyAvLyBJZiBcImRlZmF1bHQgY291bnRyeVwiIGFyZ3VtZW50IGlzIGJlaW5nIHBhc3NlZCB0aGVuIG1vdmUgaXQgdG8gYG9wdGlvbnNgLlxuICAvLyBgcGFyc2VQaG9uZU51bWJlcignODgwMDU1NTM1MzUnLCAnUlUnLCBbb3B0aW9uc10sIG1ldGFkYXRhKWAuXG5cblxuICBpZiAoIWFyZ18yIHx8IHR5cGVvZiBhcmdfMiA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoYXJnXzQpIHtcbiAgICAgIG9wdGlvbnMgPSBhcmdfMztcbiAgICAgIG1ldGFkYXRhID0gYXJnXzQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgICBtZXRhZGF0YSA9IGFyZ18zO1xuICAgIH1cblxuICAgIGlmIChhcmdfMikge1xuICAgICAgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgICBkZWZhdWx0Q291bnRyeTogYXJnXzJcbiAgICAgIH0sIG9wdGlvbnMpO1xuICAgIH1cbiAgfSAvLyBgZGVmYXVsdENvdW50cnlgIGlzIG5vdCBwYXNzZWQuXG4gIC8vIEV4YW1wbGU6IGBwYXJzZVBob25lTnVtYmVyKCcrNzgwMDU1NTM1MzUnLCBbb3B0aW9uc10sIG1ldGFkYXRhKWAuXG4gIGVsc2UgaWYgKGlzT2JqZWN0KGFyZ18yKSkge1xuICAgIGlmIChhcmdfMykge1xuICAgICAgb3B0aW9ucyA9IGFyZ18yO1xuICAgICAgbWV0YWRhdGEgPSBhcmdfMztcbiAgICB9IGVsc2Uge1xuICAgICAgbWV0YWRhdGEgPSBhcmdfMjtcbiAgICB9XG4gIH0gZWxzZSB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIHNlY29uZCBhcmd1bWVudDogXCIuY29uY2F0KGFyZ18yKSk7XG5cbiAgcmV0dXJuIHtcbiAgICB0ZXh0OiB0ZXh0LFxuICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgbWV0YWRhdGE6IG1ldGFkYXRhXG4gIH07XG59IC8vIE90aGVyd2lzZSBpc3RhbmJ1bCB3b3VsZCBzaG93IHRoaXMgYXMgXCJicmFuY2ggbm90IGNvdmVyZWRcIi5cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cblxudmFyIGlzT2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3QoXykge1xuICByZXR1cm4gX3R5cGVvZihfKSA9PT0gJ29iamVjdCc7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsaXplQXJndW1lbnRzLmpzLm1hcCIsIi8vIFRoaXMgaXMgYSBwb3J0IG9mIEdvb2dsZSBBbmRyb2lkIGBsaWJwaG9uZW51bWJlcmAnc1xuLy8gYHBob25lbnVtYmVydXRpbC5qc2Agb2YgRGVjZW1iZXIgMzF0aCwgMjAxOC5cbi8vXG4vLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlaTE4bi9saWJwaG9uZW51bWJlci9jb21taXRzL21hc3Rlci9qYXZhc2NyaXB0L2kxOG4vcGhvbmVudW1iZXJzL3Bob25lbnVtYmVydXRpbC5qc1xuaW1wb3J0IHsgVkFMSURfRElHSVRTLCBQTFVTX0NIQVJTLCBNSU5fTEVOR1RIX0ZPUl9OU04sIE1BWF9MRU5HVEhfRk9SX05TTiB9IGZyb20gJy4vY29uc3RhbnRzLmpzJztcbmltcG9ydCBQYXJzZUVycm9yIGZyb20gJy4vUGFyc2VFcnJvci5qcyc7XG5pbXBvcnQgTWV0YWRhdGEgZnJvbSAnLi9tZXRhZGF0YS5qcyc7XG5pbXBvcnQgaXNWaWFibGVQaG9uZU51bWJlciwgeyBpc1ZpYWJsZVBob25lTnVtYmVyU3RhcnQgfSBmcm9tICcuL2hlbHBlcnMvaXNWaWFibGVQaG9uZU51bWJlci5qcyc7XG5pbXBvcnQgZXh0cmFjdEV4dGVuc2lvbiBmcm9tICcuL2hlbHBlcnMvZXh0ZW5zaW9uL2V4dHJhY3RFeHRlbnNpb24uanMnO1xuaW1wb3J0IHBhcnNlSW5jb21wbGV0ZVBob25lTnVtYmVyIGZyb20gJy4vcGFyc2VJbmNvbXBsZXRlUGhvbmVOdW1iZXIuanMnO1xuaW1wb3J0IGdldENvdW50cnlDYWxsaW5nQ29kZSBmcm9tICcuL2dldENvdW50cnlDYWxsaW5nQ29kZS5qcyc7XG5pbXBvcnQgeyBpc1Bvc3NpYmxlTnVtYmVyIH0gZnJvbSAnLi9pc1Bvc3NpYmxlLmpzJzsgLy8gaW1wb3J0IHsgcGFyc2VSRkMzOTY2IH0gZnJvbSAnLi9oZWxwZXJzL1JGQzM5NjYuanMnXG5cbmltcG9ydCBQaG9uZU51bWJlciBmcm9tICcuL1Bob25lTnVtYmVyLmpzJztcbmltcG9ydCBtYXRjaGVzRW50aXJlbHkgZnJvbSAnLi9oZWxwZXJzL21hdGNoZXNFbnRpcmVseS5qcyc7XG5pbXBvcnQgZXh0cmFjdENvdW50cnlDYWxsaW5nQ29kZSBmcm9tICcuL2hlbHBlcnMvZXh0cmFjdENvdW50cnlDYWxsaW5nQ29kZS5qcyc7XG5pbXBvcnQgZXh0cmFjdE5hdGlvbmFsTnVtYmVyIGZyb20gJy4vaGVscGVycy9leHRyYWN0TmF0aW9uYWxOdW1iZXIuanMnO1xuaW1wb3J0IHN0cmlwSWRkUHJlZml4IGZyb20gJy4vaGVscGVycy9zdHJpcElkZFByZWZpeC5qcyc7XG5pbXBvcnQgZ2V0Q291bnRyeUJ5Q2FsbGluZ0NvZGUgZnJvbSAnLi9oZWxwZXJzL2dldENvdW50cnlCeUNhbGxpbmdDb2RlLmpzJztcbmltcG9ydCBleHRyYWN0Rm9ybWF0dGVkUGhvbmVOdW1iZXJGcm9tUG9zc2libGVSZmMzOTY2TnVtYmVyVXJpIGZyb20gJy4vaGVscGVycy9leHRyYWN0Rm9ybWF0dGVkUGhvbmVOdW1iZXJGcm9tUG9zc2libGVSZmMzOTY2TnVtYmVyVXJpLmpzJzsgLy8gV2UgZG9uJ3QgYWxsb3cgaW5wdXQgc3RyaW5ncyBmb3IgcGFyc2luZyB0byBiZSBsb25nZXIgdGhhbiAyNTAgY2hhcnMuXG4vLyBUaGlzIHByZXZlbnRzIG1hbGljaW91cyBpbnB1dCBmcm9tIGNvbnN1bWluZyBDUFUuXG5cbnZhciBNQVhfSU5QVVRfU1RSSU5HX0xFTkdUSCA9IDI1MDsgLy8gVGhpcyBjb25zaXN0cyBvZiB0aGUgcGx1cyBzeW1ib2wsIGRpZ2l0cywgYW5kIGFyYWJpYy1pbmRpYyBkaWdpdHMuXG5cbnZhciBQSE9ORV9OVU1CRVJfU1RBUlRfUEFUVEVSTiA9IG5ldyBSZWdFeHAoJ1snICsgUExVU19DSEFSUyArIFZBTElEX0RJR0lUUyArICddJyk7IC8vIFJlZ3VsYXIgZXhwcmVzc2lvbiBvZiB0cmFpbGluZyBjaGFyYWN0ZXJzIHRoYXQgd2Ugd2FudCB0byByZW1vdmUuXG4vLyBBIHRyYWlsaW5nIGAjYCBpcyBzb21ldGltZXMgdXNlZCB3aGVuIHdyaXRpbmcgcGhvbmUgbnVtYmVycyB3aXRoIGV4dGVuc2lvbnMgaW4gVVMuXG4vLyBFeGFtcGxlOiBcIisxICg2NDUpIDEyMyAxMjM0LTkxMCNcIiBudW1iZXIgaGFzIGV4dGVuc2lvbiBcIjkxMFwiLlxuXG52YXIgQUZURVJfUEhPTkVfTlVNQkVSX0VORF9QQVRURVJOID0gbmV3IFJlZ0V4cCgnW14nICsgVkFMSURfRElHSVRTICsgJyMnICsgJ10rJCcpO1xudmFyIFVTRV9OT05fR0VPR1JBUEhJQ19DT1VOVFJZX0NPREUgPSBmYWxzZTsgLy8gRXhhbXBsZXM6XG4vL1xuLy8gYGBganNcbi8vIHBhcnNlKCc4ICg4MDApIDU1NS0zNS0zNScsICdSVScpXG4vLyBwYXJzZSgnOCAoODAwKSA1NTUtMzUtMzUnLCAnUlUnLCBtZXRhZGF0YSlcbi8vIHBhcnNlKCc4ICg4MDApIDU1NS0zNS0zNScsIHsgY291bnRyeTogeyBkZWZhdWx0OiAnUlUnIH0gfSlcbi8vIHBhcnNlKCc4ICg4MDApIDU1NS0zNS0zNScsIHsgY291bnRyeTogeyBkZWZhdWx0OiAnUlUnIH0gfSwgbWV0YWRhdGEpXG4vLyBwYXJzZSgnKzcgODAwIDU1NSAzNSAzNScpXG4vLyBwYXJzZSgnKzcgODAwIDU1NSAzNSAzNScsIG1ldGFkYXRhKVxuLy8gYGBgXG4vL1xuXG4vKipcclxuICogUGFyc2VzIGEgcGhvbmUgbnVtYmVyLlxyXG4gKlxyXG4gKiBwYXJzZSgnMTIzNDU2Nzg5JywgeyBkZWZhdWx0Q291bnRyeTogJ1JVJywgdjI6IHRydWUgfSwgbWV0YWRhdGEpXHJcbiAqIHBhcnNlKCcxMjM0NTY3ODknLCB7IGRlZmF1bHRDb3VudHJ5OiAnUlUnIH0sIG1ldGFkYXRhKVxyXG4gKiBwYXJzZSgnMTIzNDU2Nzg5JywgdW5kZWZpbmVkLCBtZXRhZGF0YSlcclxuICpcclxuICogQHBhcmFtICB7c3RyaW5nfSBpbnB1dFxyXG4gKiBAcGFyYW0gIHtvYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAcGFyYW0gIHtvYmplY3R9IG1ldGFkYXRhXHJcbiAqIEByZXR1cm4ge29iamVjdHxQaG9uZU51bWJlcj99IElmIGBvcHRpb25zLnYyOiB0cnVlYCBmbGFnIGlzIHBhc3NlZCwgaXQgcmV0dXJucyBhIGBQaG9uZU51bWJlcj9gIGluc3RhbmNlLiBPdGhlcndpc2UsIHJldHVybnMgYW4gb2JqZWN0IG9mIHNoYXBlIGB7IHBob25lOiAnLi4uJywgY291bnRyeTogJy4uLicgfWAgKG9yIGp1c3QgYHt9YCBpZiBubyBwaG9uZSBudW1iZXIgd2FzIHBhcnNlZCkuXHJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZSh0ZXh0LCBvcHRpb25zLCBtZXRhZGF0YSkge1xuICAvLyBJZiBhc3NpZ25pbmcgdGhlIGB7fWAgZGVmYXVsdCB2YWx1ZSBpcyBtb3ZlZCB0byB0aGUgYXJndW1lbnRzIGFib3ZlLFxuICAvLyBjb2RlIGNvdmVyYWdlIHdvdWxkIGRlY3JlYXNlIGZvciBzb21lIHdlaXJkIHJlYXNvbi5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIG1ldGFkYXRhID0gbmV3IE1ldGFkYXRhKG1ldGFkYXRhKTsgLy8gVmFsaWRhdGUgYGRlZmF1bHRDb3VudHJ5YC5cblxuICBpZiAob3B0aW9ucy5kZWZhdWx0Q291bnRyeSAmJiAhbWV0YWRhdGEuaGFzQ291bnRyeShvcHRpb25zLmRlZmF1bHRDb3VudHJ5KSkge1xuICAgIGlmIChvcHRpb25zLnYyKSB7XG4gICAgICB0aHJvdyBuZXcgUGFyc2VFcnJvcignSU5WQUxJRF9DT1VOVFJZJyk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBjb3VudHJ5OiBcIi5jb25jYXQob3B0aW9ucy5kZWZhdWx0Q291bnRyeSkpO1xuICB9IC8vIFBhcnNlIHRoZSBwaG9uZSBudW1iZXIuXG5cblxuICB2YXIgX3BhcnNlSW5wdXQgPSBwYXJzZUlucHV0KHRleHQsIG9wdGlvbnMudjIsIG9wdGlvbnMuZXh0cmFjdCksXG4gICAgICBmb3JtYXR0ZWRQaG9uZU51bWJlciA9IF9wYXJzZUlucHV0Lm51bWJlcixcbiAgICAgIGV4dCA9IF9wYXJzZUlucHV0LmV4dCxcbiAgICAgIGVycm9yID0gX3BhcnNlSW5wdXQuZXJyb3I7IC8vIElmIHRoZSBwaG9uZSBudW1iZXIgaXMgbm90IHZpYWJsZSB0aGVuIHJldHVybiBub3RoaW5nLlxuXG5cbiAgaWYgKCFmb3JtYXR0ZWRQaG9uZU51bWJlcikge1xuICAgIGlmIChvcHRpb25zLnYyKSB7XG4gICAgICBpZiAoZXJyb3IgPT09ICdUT09fU0hPUlQnKSB7XG4gICAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKCdUT09fU0hPUlQnKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoJ05PVF9BX05VTUJFUicpO1xuICAgIH1cblxuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIHZhciBfcGFyc2VQaG9uZU51bWJlciA9IHBhcnNlUGhvbmVOdW1iZXIoZm9ybWF0dGVkUGhvbmVOdW1iZXIsIG9wdGlvbnMuZGVmYXVsdENvdW50cnksIG9wdGlvbnMuZGVmYXVsdENhbGxpbmdDb2RlLCBtZXRhZGF0YSksXG4gICAgICBjb3VudHJ5ID0gX3BhcnNlUGhvbmVOdW1iZXIuY291bnRyeSxcbiAgICAgIG5hdGlvbmFsTnVtYmVyID0gX3BhcnNlUGhvbmVOdW1iZXIubmF0aW9uYWxOdW1iZXIsXG4gICAgICBjb3VudHJ5Q2FsbGluZ0NvZGUgPSBfcGFyc2VQaG9uZU51bWJlci5jb3VudHJ5Q2FsbGluZ0NvZGUsXG4gICAgICBjb3VudHJ5Q2FsbGluZ0NvZGVTb3VyY2UgPSBfcGFyc2VQaG9uZU51bWJlci5jb3VudHJ5Q2FsbGluZ0NvZGVTb3VyY2UsXG4gICAgICBjYXJyaWVyQ29kZSA9IF9wYXJzZVBob25lTnVtYmVyLmNhcnJpZXJDb2RlO1xuXG4gIGlmICghbWV0YWRhdGEuaGFzU2VsZWN0ZWROdW1iZXJpbmdQbGFuKCkpIHtcbiAgICBpZiAob3B0aW9ucy52Mikge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoJ0lOVkFMSURfQ09VTlRSWScpO1xuICAgIH1cblxuICAgIHJldHVybiB7fTtcbiAgfSAvLyBWYWxpZGF0ZSBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlciBsZW5ndGguXG5cblxuICBpZiAoIW5hdGlvbmFsTnVtYmVyIHx8IG5hdGlvbmFsTnVtYmVyLmxlbmd0aCA8IE1JTl9MRU5HVEhfRk9SX05TTikge1xuICAgIC8vIFdvbid0IHRocm93IGhlcmUgYmVjYXVzZSB0aGUgcmVnZXhwIGFscmVhZHkgZGVtYW5kcyBsZW5ndGggPiAxLlxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKG9wdGlvbnMudjIpIHtcbiAgICAgIHRocm93IG5ldyBQYXJzZUVycm9yKCdUT09fU0hPUlQnKTtcbiAgICB9IC8vIEdvb2dsZSdzIGRlbW8ganVzdCB0aHJvd3MgYW4gZXJyb3IgaW4gdGhpcyBjYXNlLlxuXG5cbiAgICByZXR1cm4ge307XG4gIH0gLy8gVmFsaWRhdGUgbmF0aW9uYWwgKHNpZ25pZmljYW50KSBudW1iZXIgbGVuZ3RoLlxuICAvL1xuICAvLyBBIHNpZGVub3RlOlxuICAvL1xuICAvLyBUaGV5IHNheSB0aGF0IHNvbWV0aW1lcyBuYXRpb25hbCAoc2lnbmlmaWNhbnQpIG51bWJlcnNcbiAgLy8gY2FuIGJlIGxvbmdlciB0aGFuIGBNQVhfTEVOR1RIX0ZPUl9OU05gIChlLmcuIGluIEdlcm1hbnkpLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlaTE4bi9saWJwaG9uZW51bWJlci9ibG9iLzdlMTc0ODY0NTU1MmRhMzljNGUxYmE3MzFlNDc5NjlkOTdiZGI1MzkvcmVzb3VyY2VzL3Bob25lbnVtYmVyLnByb3RvI0wzNlxuICAvLyBTdWNoIG51bWJlcnMgd2lsbCBqdXN0IGJlIGRpc2NhcmRlZC5cbiAgLy9cblxuXG4gIGlmIChuYXRpb25hbE51bWJlci5sZW5ndGggPiBNQVhfTEVOR1RIX0ZPUl9OU04pIHtcbiAgICBpZiAob3B0aW9ucy52Mikge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoJ1RPT19MT05HJyk7XG4gICAgfSAvLyBHb29nbGUncyBkZW1vIGp1c3QgdGhyb3dzIGFuIGVycm9yIGluIHRoaXMgY2FzZS5cblxuXG4gICAgcmV0dXJuIHt9O1xuICB9XG5cbiAgaWYgKG9wdGlvbnMudjIpIHtcbiAgICB2YXIgcGhvbmVOdW1iZXIgPSBuZXcgUGhvbmVOdW1iZXIoY291bnRyeUNhbGxpbmdDb2RlLCBuYXRpb25hbE51bWJlciwgbWV0YWRhdGEubWV0YWRhdGEpO1xuXG4gICAgaWYgKGNvdW50cnkpIHtcbiAgICAgIHBob25lTnVtYmVyLmNvdW50cnkgPSBjb3VudHJ5O1xuICAgIH1cblxuICAgIGlmIChjYXJyaWVyQ29kZSkge1xuICAgICAgcGhvbmVOdW1iZXIuY2FycmllckNvZGUgPSBjYXJyaWVyQ29kZTtcbiAgICB9XG5cbiAgICBpZiAoZXh0KSB7XG4gICAgICBwaG9uZU51bWJlci5leHQgPSBleHQ7XG4gICAgfVxuXG4gICAgcGhvbmVOdW1iZXIuX19jb3VudHJ5Q2FsbGluZ0NvZGVTb3VyY2UgPSBjb3VudHJ5Q2FsbGluZ0NvZGVTb3VyY2U7XG4gICAgcmV0dXJuIHBob25lTnVtYmVyO1xuICB9IC8vIENoZWNrIGlmIG5hdGlvbmFsIHBob25lIG51bWJlciBwYXR0ZXJuIG1hdGNoZXMgdGhlIG51bWJlci5cbiAgLy8gTmF0aW9uYWwgbnVtYmVyIHBhdHRlcm4gaXMgZGlmZmVyZW50IGZvciBlYWNoIGNvdW50cnksXG4gIC8vIGV2ZW4gZm9yIHRob3NlIG9uZXMgd2hpY2ggYXJlIHBhcnQgb2YgdGhlIFwiTkFOUEFcIiBncm91cC5cblxuXG4gIHZhciB2YWxpZCA9IChvcHRpb25zLmV4dGVuZGVkID8gbWV0YWRhdGEuaGFzU2VsZWN0ZWROdW1iZXJpbmdQbGFuKCkgOiBjb3VudHJ5KSA/IG1hdGNoZXNFbnRpcmVseShuYXRpb25hbE51bWJlciwgbWV0YWRhdGEubmF0aW9uYWxOdW1iZXJQYXR0ZXJuKCkpIDogZmFsc2U7XG5cbiAgaWYgKCFvcHRpb25zLmV4dGVuZGVkKSB7XG4gICAgcmV0dXJuIHZhbGlkID8gcmVzdWx0KGNvdW50cnksIG5hdGlvbmFsTnVtYmVyLCBleHQpIDoge307XG4gIH0gLy8gaXNJbnRlcm5hdGlvbmFsOiBjb3VudHJ5Q2FsbGluZ0NvZGUgIT09IHVuZGVmaW5lZFxuXG5cbiAgcmV0dXJuIHtcbiAgICBjb3VudHJ5OiBjb3VudHJ5LFxuICAgIGNvdW50cnlDYWxsaW5nQ29kZTogY291bnRyeUNhbGxpbmdDb2RlLFxuICAgIGNhcnJpZXJDb2RlOiBjYXJyaWVyQ29kZSxcbiAgICB2YWxpZDogdmFsaWQsXG4gICAgcG9zc2libGU6IHZhbGlkID8gdHJ1ZSA6IG9wdGlvbnMuZXh0ZW5kZWQgPT09IHRydWUgJiYgbWV0YWRhdGEucG9zc2libGVMZW5ndGhzKCkgJiYgaXNQb3NzaWJsZU51bWJlcihuYXRpb25hbE51bWJlciwgbWV0YWRhdGEpID8gdHJ1ZSA6IGZhbHNlLFxuICAgIHBob25lOiBuYXRpb25hbE51bWJlcixcbiAgICBleHQ6IGV4dFxuICB9O1xufVxuLyoqXHJcbiAqIEV4dHJhY3RzIGEgZm9ybWF0dGVkIHBob25lIG51bWJlciBmcm9tIHRleHQuXHJcbiAqIERvZXNuJ3QgZ3VhcmFudGVlIHRoYXQgdGhlIGV4dHJhY3RlZCBwaG9uZSBudW1iZXJcclxuICogaXMgYSB2YWxpZCBwaG9uZSBudW1iZXIgKGZvciBleGFtcGxlLCBkb2Vzbid0IHZhbGlkYXRlIGl0cyBsZW5ndGgpLlxyXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHRleHRcclxuICogQHBhcmFtICB7Ym9vbGVhbn0gW2V4dHJhY3RdIOKAlCBJZiBgZmFsc2VgLCB0aGVuIHdpbGwgcGFyc2UgdGhlIGVudGlyZSBgdGV4dGAgYXMgYSBwaG9uZSBudW1iZXIuXHJcbiAqIEBwYXJhbSAge2Jvb2xlYW59IFt0aHJvd09uRXJyb3JdIOKAlCBCeSBkZWZhdWx0LCBpdCB3b24ndCB0aHJvdyBpZiB0aGUgdGV4dCBpcyB0b28gbG9uZy5cclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBSZXR1cm5zIFwiKDIxMykgMzczLTQyNTNcIi5cclxuICogZXh0cmFjdEZvcm1hdHRlZFBob25lTnVtYmVyKFwiQ2FsbCAoMjEzKSAzNzMtNDI1MyBmb3IgYXNzaXN0YW5jZS5cIilcclxuICovXG5cbmZ1bmN0aW9uIF9leHRyYWN0Rm9ybWF0dGVkUGhvbmVOdW1iZXIodGV4dCwgZXh0cmFjdCwgdGhyb3dPbkVycm9yKSB7XG4gIGlmICghdGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmICh0ZXh0Lmxlbmd0aCA+IE1BWF9JTlBVVF9TVFJJTkdfTEVOR1RIKSB7XG4gICAgaWYgKHRocm93T25FcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFBhcnNlRXJyb3IoJ1RPT19MT05HJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGV4dHJhY3QgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH0gLy8gQXR0ZW1wdCB0byBleHRyYWN0IGEgcG9zc2libGUgbnVtYmVyIGZyb20gdGhlIHN0cmluZyBwYXNzZWQgaW5cblxuXG4gIHZhciBzdGFydHNBdCA9IHRleHQuc2VhcmNoKFBIT05FX05VTUJFUl9TVEFSVF9QQVRURVJOKTtcblxuICBpZiAoc3RhcnRzQXQgPCAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHRleHQgLy8gVHJpbSBldmVyeXRoaW5nIHRvIHRoZSBsZWZ0IG9mIHRoZSBwaG9uZSBudW1iZXJcbiAgLnNsaWNlKHN0YXJ0c0F0KSAvLyBSZW1vdmUgdHJhaWxpbmcgbm9uLW51bWVyaWNhbCBjaGFyYWN0ZXJzXG4gIC5yZXBsYWNlKEFGVEVSX1BIT05FX05VTUJFUl9FTkRfUEFUVEVSTiwgJycpO1xufVxuLyoqXHJcbiAqIEBwYXJhbSAge3N0cmluZ30gdGV4dCAtIElucHV0LlxyXG4gKiBAcGFyYW0gIHtib29sZWFufSB2MiAtIExlZ2FjeSBBUEkgZnVuY3Rpb25zIGRvbid0IHBhc3MgYHYyOiB0cnVlYCBmbGFnLlxyXG4gKiBAcGFyYW0gIHtib29sZWFufSBbZXh0cmFjdF0gLSBXaGV0aGVyIHRvIGV4dHJhY3QgYSBwaG9uZSBudW1iZXIgZnJvbSBgdGV4dGAsIG9yIGF0dGVtcHQgdG8gcGFyc2UgdGhlIGVudGlyZSB0ZXh0IGFzIGEgcGhvbmUgbnVtYmVyLlxyXG4gKiBAcmV0dXJuIHtvYmplY3R9IGB7ID9udW1iZXIsID9leHQgfWAuXHJcbiAqL1xuXG5cbmZ1bmN0aW9uIHBhcnNlSW5wdXQodGV4dCwgdjIsIGV4dHJhY3QpIHtcbiAgLy8gLy8gUGFyc2UgUkZDIDM5NjYgcGhvbmUgbnVtYmVyIFVSSS5cbiAgLy8gaWYgKHRleHQgJiYgdGV4dC5pbmRleE9mKCd0ZWw6JykgPT09IDApIHtcbiAgLy8gXHRyZXR1cm4gcGFyc2VSRkMzOTY2KHRleHQpXG4gIC8vIH1cbiAgLy8gbGV0IG51bWJlciA9IGV4dHJhY3RGb3JtYXR0ZWRQaG9uZU51bWJlcih0ZXh0LCBleHRyYWN0LCB2MilcbiAgdmFyIG51bWJlciA9IGV4dHJhY3RGb3JtYXR0ZWRQaG9uZU51bWJlckZyb21Qb3NzaWJsZVJmYzM5NjZOdW1iZXJVcmkodGV4dCwge1xuICAgIGV4dHJhY3RGb3JtYXR0ZWRQaG9uZU51bWJlcjogZnVuY3Rpb24gZXh0cmFjdEZvcm1hdHRlZFBob25lTnVtYmVyKHRleHQpIHtcbiAgICAgIHJldHVybiBfZXh0cmFjdEZvcm1hdHRlZFBob25lTnVtYmVyKHRleHQsIGV4dHJhY3QsIHYyKTtcbiAgICB9XG4gIH0pOyAvLyBJZiB0aGUgcGhvbmUgbnVtYmVyIGlzIG5vdCB2aWFibGUsIHRoZW4gYWJvcnQuXG5cbiAgaWYgKCFudW1iZXIpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBpZiAoIWlzVmlhYmxlUGhvbmVOdW1iZXIobnVtYmVyKSkge1xuICAgIGlmIChpc1ZpYWJsZVBob25lTnVtYmVyU3RhcnQobnVtYmVyKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXJyb3I6ICdUT09fU0hPUlQnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7fTtcbiAgfSAvLyBBdHRlbXB0IHRvIHBhcnNlIGV4dGVuc2lvbiBmaXJzdCwgc2luY2UgaXQgZG9lc24ndCByZXF1aXJlIHJlZ2lvbi1zcGVjaWZpY1xuICAvLyBkYXRhIGFuZCB3ZSB3YW50IHRvIGhhdmUgdGhlIG5vbi1ub3JtYWxpc2VkIG51bWJlciBoZXJlLlxuXG5cbiAgdmFyIHdpdGhFeHRlbnNpb25TdHJpcHBlZCA9IGV4dHJhY3RFeHRlbnNpb24obnVtYmVyKTtcblxuICBpZiAod2l0aEV4dGVuc2lvblN0cmlwcGVkLmV4dCkge1xuICAgIHJldHVybiB3aXRoRXh0ZW5zaW9uU3RyaXBwZWQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG51bWJlcjogbnVtYmVyXG4gIH07XG59XG4vKipcclxuICogQ3JlYXRlcyBgcGFyc2UoKWAgcmVzdWx0IG9iamVjdC5cclxuICovXG5cblxuZnVuY3Rpb24gcmVzdWx0KGNvdW50cnksIG5hdGlvbmFsTnVtYmVyLCBleHQpIHtcbiAgdmFyIHJlc3VsdCA9IHtcbiAgICBjb3VudHJ5OiBjb3VudHJ5LFxuICAgIHBob25lOiBuYXRpb25hbE51bWJlclxuICB9O1xuXG4gIGlmIChleHQpIHtcbiAgICByZXN1bHQuZXh0ID0gZXh0O1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKlxyXG4gKiBQYXJzZXMgYSB2aWFibGUgcGhvbmUgbnVtYmVyLlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0dGVkUGhvbmVOdW1iZXIg4oCUIEV4YW1wbGU6IFwiKDIxMykgMzczLTQyNTNcIi5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0Q291bnRyeV1cclxuICogQHBhcmFtIHtzdHJpbmd9IFtkZWZhdWx0Q2FsbGluZ0NvZGVdXHJcbiAqIEBwYXJhbSB7TWV0YWRhdGF9IG1ldGFkYXRhXHJcbiAqIEByZXR1cm4ge29iamVjdH0gUmV0dXJucyBgeyBjb3VudHJ5OiBzdHJpbmc/LCBjb3VudHJ5Q2FsbGluZ0NvZGU6IHN0cmluZz8sIG5hdGlvbmFsTnVtYmVyOiBzdHJpbmc/IH1gLlxyXG4gKi9cblxuXG5mdW5jdGlvbiBwYXJzZVBob25lTnVtYmVyKGZvcm1hdHRlZFBob25lTnVtYmVyLCBkZWZhdWx0Q291bnRyeSwgZGVmYXVsdENhbGxpbmdDb2RlLCBtZXRhZGF0YSkge1xuICAvLyBFeHRyYWN0IGNhbGxpbmcgY29kZSBmcm9tIHBob25lIG51bWJlci5cbiAgdmFyIF9leHRyYWN0Q291bnRyeUNhbGxpbiA9IGV4dHJhY3RDb3VudHJ5Q2FsbGluZ0NvZGUocGFyc2VJbmNvbXBsZXRlUGhvbmVOdW1iZXIoZm9ybWF0dGVkUGhvbmVOdW1iZXIpLCBkZWZhdWx0Q291bnRyeSwgZGVmYXVsdENhbGxpbmdDb2RlLCBtZXRhZGF0YS5tZXRhZGF0YSksXG4gICAgICBjb3VudHJ5Q2FsbGluZ0NvZGVTb3VyY2UgPSBfZXh0cmFjdENvdW50cnlDYWxsaW4uY291bnRyeUNhbGxpbmdDb2RlU291cmNlLFxuICAgICAgY291bnRyeUNhbGxpbmdDb2RlID0gX2V4dHJhY3RDb3VudHJ5Q2FsbGluLmNvdW50cnlDYWxsaW5nQ29kZSxcbiAgICAgIG51bWJlciA9IF9leHRyYWN0Q291bnRyeUNhbGxpbi5udW1iZXI7IC8vIENob29zZSBhIGNvdW50cnkgYnkgYGNvdW50cnlDYWxsaW5nQ29kZWAuXG5cblxuICB2YXIgY291bnRyeTtcblxuICBpZiAoY291bnRyeUNhbGxpbmdDb2RlKSB7XG4gICAgbWV0YWRhdGEuc2VsZWN0TnVtYmVyaW5nUGxhbihjb3VudHJ5Q2FsbGluZ0NvZGUpO1xuICB9IC8vIElmIGBmb3JtYXR0ZWRQaG9uZU51bWJlcmAgaXMgcGFzc2VkIGluIFwibmF0aW9uYWxcIiBmb3JtYXRcbiAgLy8gdGhlbiBgbnVtYmVyYCBpcyBkZWZpbmVkIGFuZCBgY291bnRyeUNhbGxpbmdDb2RlYCBpcyBgdW5kZWZpbmVkYC5cbiAgZWxzZSBpZiAobnVtYmVyICYmIChkZWZhdWx0Q291bnRyeSB8fCBkZWZhdWx0Q2FsbGluZ0NvZGUpKSB7XG4gICAgbWV0YWRhdGEuc2VsZWN0TnVtYmVyaW5nUGxhbihkZWZhdWx0Q291bnRyeSwgZGVmYXVsdENhbGxpbmdDb2RlKTtcblxuICAgIGlmIChkZWZhdWx0Q291bnRyeSkge1xuICAgICAgY291bnRyeSA9IGRlZmF1bHRDb3VudHJ5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChVU0VfTk9OX0dFT0dSQVBISUNfQ09VTlRSWV9DT0RFKSB7XG4gICAgICAgIGlmIChtZXRhZGF0YS5pc05vbkdlb2dyYXBoaWNDYWxsaW5nQ29kZShkZWZhdWx0Q2FsbGluZ0NvZGUpKSB7XG4gICAgICAgICAgY291bnRyeSA9ICcwMDEnO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY291bnRyeUNhbGxpbmdDb2RlID0gZGVmYXVsdENhbGxpbmdDb2RlIHx8IGdldENvdW50cnlDYWxsaW5nQ29kZShkZWZhdWx0Q291bnRyeSwgbWV0YWRhdGEubWV0YWRhdGEpO1xuICB9IGVsc2UgcmV0dXJuIHt9O1xuXG4gIGlmICghbnVtYmVyKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvdW50cnlDYWxsaW5nQ29kZVNvdXJjZTogY291bnRyeUNhbGxpbmdDb2RlU291cmNlLFxuICAgICAgY291bnRyeUNhbGxpbmdDb2RlOiBjb3VudHJ5Q2FsbGluZ0NvZGVcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9leHRyYWN0TmF0aW9uYWxOdW1iZSA9IGV4dHJhY3ROYXRpb25hbE51bWJlcihwYXJzZUluY29tcGxldGVQaG9uZU51bWJlcihudW1iZXIpLCBtZXRhZGF0YSksXG4gICAgICBuYXRpb25hbE51bWJlciA9IF9leHRyYWN0TmF0aW9uYWxOdW1iZS5uYXRpb25hbE51bWJlcixcbiAgICAgIGNhcnJpZXJDb2RlID0gX2V4dHJhY3ROYXRpb25hbE51bWJlLmNhcnJpZXJDb2RlOyAvLyBTb21ldGltZXMgdGhlcmUgYXJlIHNldmVyYWwgY291bnRyaWVzXG4gIC8vIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNhbWUgY291bnRyeSBwaG9uZSBjb2RlXG4gIC8vIChlLmcuIE5BTlBBIGNvdW50cmllcyBhbGwgaGF2aW5nIGAxYCBjb3VudHJ5IHBob25lIGNvZGUpLlxuICAvLyBUaGVyZWZvcmUsIHRvIHJlbGlhYmx5IGRldGVybWluZSB0aGUgZXhhY3QgY291bnRyeSxcbiAgLy8gbmF0aW9uYWwgKHNpZ25pZmljYW50KSBudW1iZXIgc2hvdWxkIGhhdmUgYmVlbiBwYXJzZWQgZmlyc3QuXG4gIC8vXG4gIC8vIFdoZW4gYG1ldGFkYXRhLmpzb25gIGlzIGdlbmVyYXRlZCwgYWxsIFwiYW1iaWd1b3VzXCIgY291bnRyeSBwaG9uZSBjb2Rlc1xuICAvLyBnZXQgdGhlaXIgY291bnRyaWVzIHBvcHVsYXRlZCB3aXRoIHRoZSBmdWxsIHNldCBvZlxuICAvLyBcInBob25lIG51bWJlciB0eXBlXCIgcmVndWxhciBleHByZXNzaW9ucy5cbiAgLy9cblxuXG4gIHZhciBleGFjdENvdW50cnkgPSBnZXRDb3VudHJ5QnlDYWxsaW5nQ29kZShjb3VudHJ5Q2FsbGluZ0NvZGUsIG5hdGlvbmFsTnVtYmVyLCBtZXRhZGF0YSk7XG5cbiAgaWYgKGV4YWN0Q291bnRyeSkge1xuICAgIGNvdW50cnkgPSBleGFjdENvdW50cnk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG5cbiAgICBpZiAoZXhhY3RDb3VudHJ5ID09PSAnMDAxJykgey8vIENhbid0IGhhcHBlbiB3aXRoIGBVU0VfTk9OX0dFT0dSQVBISUNfQ09VTlRSWV9DT0RFYCBiZWluZyBgZmFsc2VgLlxuICAgICAgLy8gSWYgYFVTRV9OT05fR0VPR1JBUEhJQ19DT1VOVFJZX0NPREVgIGlzIHNldCB0byBgdHJ1ZWAgZm9yIHNvbWUgcmVhc29uLFxuICAgICAgLy8gdGhlbiByZW1vdmUgdGhlIFwiaXN0YW5idWwgaWdub3JlIGlmXCIuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1ldGFkYXRhLmNvdW50cnkoY291bnRyeSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjb3VudHJ5OiBjb3VudHJ5LFxuICAgIGNvdW50cnlDYWxsaW5nQ29kZTogY291bnRyeUNhbGxpbmdDb2RlLFxuICAgIGNvdW50cnlDYWxsaW5nQ29kZVNvdXJjZTogY291bnRyeUNhbGxpbmdDb2RlU291cmNlLFxuICAgIG5hdGlvbmFsTnVtYmVyOiBuYXRpb25hbE51bWJlcixcbiAgICBjYXJyaWVyQ29kZTogY2FycmllckNvZGVcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlLmpzLm1hcCIsImZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2UobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0ID0gdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl0gfHwgb1tcIkBAaXRlcmF0b3JcIl07IGlmIChpdCkgcmV0dXJuIChpdCA9IGl0LmNhbGwobykpLm5leHQuYmluZChpdCk7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5pbXBvcnQgeyBwYXJzZURpZ2l0IH0gZnJvbSAnLi9oZWxwZXJzL3BhcnNlRGlnaXRzLmpzJztcbi8qKlxyXG4gKiBQYXJzZXMgcGhvbmUgbnVtYmVyIGNoYXJhY3RlcnMgZnJvbSBhIHN0cmluZy5cclxuICogRHJvcHMgYWxsIHB1bmN0dWF0aW9uIGxlYXZpbmcgb25seSBkaWdpdHMgYW5kIHRoZSBsZWFkaW5nIGArYCBzaWduIChpZiBhbnkpLlxyXG4gKiBBbHNvIGNvbnZlcnRzIHdpZGUtYXNjaWkgYW5kIGFyYWJpYy1pbmRpYyBudW1lcmFscyB0byBjb252ZW50aW9uYWwgbnVtZXJhbHMuXHJcbiAqIEUuZy4gaW4gSXJhcSB0aGV5IGRvbid0IHdyaXRlIGArNDQyMzIzMjM0YCBidXQgcmF0aGVyIGAr2aTZpNmi2aPZotmj2aLZo9mkYC5cclxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJpbmdcclxuICogQHJldHVybiB7c3RyaW5nfVxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqc1xyXG4gKiAvLyBPdXRwdXRzICc4ODAwNTU1Jy5cclxuICogcGFyc2VJbmNvbXBsZXRlUGhvbmVOdW1iZXIoJzggKDgwMCkgNTU1JylcclxuICogLy8gT3V0cHV0cyAnKzc4MDA1NTUnLlxyXG4gKiBwYXJzZUluY29tcGxldGVQaG9uZU51bWJlcignKzcgODAwIDU1NScpXHJcbiAqIGBgYFxyXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VJbmNvbXBsZXRlUGhvbmVOdW1iZXIoc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSAnJzsgLy8gVXNpbmcgYC5zcGxpdCgnJylgIGhlcmUgaW5zdGVhZCBvZiBub3JtYWwgYGZvciAuLi4gb2ZgXG4gIC8vIGJlY2F1c2UgdGhlIGltcG9ydGluZyBhcHBsaWNhdGlvbiBkb2Vzbid0IG5lY2Nlc3NhcmlseSBpbmNsdWRlIGFuIEVTNiBwb2x5ZmlsbC5cbiAgLy8gVGhlIGAuc3BsaXQoJycpYCBhcHByb2FjaCBkaXNjYXJkcyBcImV4b3RpY1wiIFVURi04IGNoYXJhY3RlcnNcbiAgLy8gKHRoZSBvbmVzIGNvbnNpc3Rpbmcgb2YgZm91ciBieXRlcykgYnV0IGRpZ2l0c1xuICAvLyAoaW5jbHVkaW5nIG5vbi1FdXJvcGVhbiBvbmVzKSBkb24ndCBmYWxsIGludG8gdGhhdCByYW5nZVxuICAvLyBzbyBzdWNoIFwiZXhvdGljXCIgY2hhcmFjdGVycyB3b3VsZCBiZSBkaXNjYXJkZWQgYW55d2F5LlxuXG4gIGZvciAodmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyTG9vc2Uoc3RyaW5nLnNwbGl0KCcnKSksIF9zdGVwOyAhKF9zdGVwID0gX2l0ZXJhdG9yKCkpLmRvbmU7KSB7XG4gICAgdmFyIGNoYXJhY3RlciA9IF9zdGVwLnZhbHVlO1xuICAgIHJlc3VsdCArPSBwYXJzZVBob25lTnVtYmVyQ2hhcmFjdGVyKGNoYXJhY3RlciwgcmVzdWx0KSB8fCAnJztcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcclxuICogUGFyc2VzIG5leHQgY2hhcmFjdGVyIHdoaWxlIHBhcnNpbmcgcGhvbmUgbnVtYmVyIGRpZ2l0cyAoaW5jbHVkaW5nIGEgYCtgKVxyXG4gKiBmcm9tIHRleHQ6IGRpc2NhcmRzIGV2ZXJ5dGhpbmcgZXhjZXB0IGArYCBhbmQgZGlnaXRzLCBhbmQgYCtgIGlzIG9ubHkgYWxsb3dlZFxyXG4gKiBhdCB0aGUgc3RhcnQgb2YgYSBwaG9uZSBudW1iZXIuXHJcbiAqIEZvciBleGFtcGxlLCBpcyB1c2VkIGluIGByZWFjdC1waG9uZS1udW1iZXItaW5wdXRgIHdoZXJlIGl0IHVzZXNcclxuICogW2BpbnB1dC1mb3JtYXRgXShodHRwczovL2dpdGxhYi5jb20vY2F0YW1waGV0YW1pbmUvaW5wdXQtZm9ybWF0KS5cclxuICogQHBhcmFtICB7c3RyaW5nfSBjaGFyYWN0ZXIgLSBZZXQgYW5vdGhlciBjaGFyYWN0ZXIgZnJvbSByYXcgaW5wdXQgc3RyaW5nLlxyXG4gKiBAcGFyYW0gIHtzdHJpbmc/fSBwcmV2UGFyc2VkQ2hhcmFjdGVycyAtIFByZXZpb3VzIHBhcnNlZCBjaGFyYWN0ZXJzLlxyXG4gKiBAcGFyYW0gIHtvYmplY3R9IG1ldGEgLSBPcHRpb25hbCBjdXN0b20gdXNlLWNhc2Utc3BlY2lmaWMgbWV0YWRhdGEuXHJcbiAqIEByZXR1cm4ge3N0cmluZz99IFRoZSBwYXJzZWQgY2hhcmFjdGVyLlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlUGhvbmVOdW1iZXJDaGFyYWN0ZXIoY2hhcmFjdGVyLCBwcmV2UGFyc2VkQ2hhcmFjdGVycykge1xuICAvLyBPbmx5IGFsbG93IGEgbGVhZGluZyBgK2AuXG4gIGlmIChjaGFyYWN0ZXIgPT09ICcrJykge1xuICAgIC8vIElmIHRoaXMgYCtgIGlzIG5vdCB0aGUgZmlyc3QgcGFyc2VkIGNoYXJhY3RlclxuICAgIC8vIHRoZW4gZGlzY2FyZCBpdC5cbiAgICBpZiAocHJldlBhcnNlZENoYXJhY3RlcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gJysnO1xuICB9IC8vIEFsbG93IGRpZ2l0cy5cblxuXG4gIHJldHVybiBwYXJzZURpZ2l0KGNoYXJhY3Rlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZUluY29tcGxldGVQaG9uZU51bWJlci5qcy5tYXAiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgcGFyc2UgZnJvbSAnLi9wYXJzZS5qcyc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVBob25lTnVtYmVyV2l0aEVycm9yKHRleHQsIG9wdGlvbnMsIG1ldGFkYXRhKSB7XG4gIHJldHVybiBwYXJzZSh0ZXh0LCBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgIHYyOiB0cnVlXG4gIH0pLCBtZXRhZGF0YSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYXJzZVBob25lTnVtYmVyV2l0aEVycm9yXy5qcy5tYXAiLCJmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlOyB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gbnVsbCAhPSBhcmd1bWVudHNbaV0gPyBhcmd1bWVudHNbaV0gOiB7fTsgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IF9kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5pbXBvcnQgcGFyc2VQaG9uZU51bWJlcldpdGhFcnJvciBmcm9tICcuL3BhcnNlUGhvbmVOdW1iZXJXaXRoRXJyb3JfLmpzJztcbmltcG9ydCBQYXJzZUVycm9yIGZyb20gJy4vUGFyc2VFcnJvci5qcyc7XG5pbXBvcnQgeyBpc1N1cHBvcnRlZENvdW50cnkgfSBmcm9tICcuL21ldGFkYXRhLmpzJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlUGhvbmVOdW1iZXIodGV4dCwgb3B0aW9ucywgbWV0YWRhdGEpIHtcbiAgLy8gVmFsaWRhdGUgYGRlZmF1bHRDb3VudHJ5YC5cbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWZhdWx0Q291bnRyeSAmJiAhaXNTdXBwb3J0ZWRDb3VudHJ5KG9wdGlvbnMuZGVmYXVsdENvdW50cnksIG1ldGFkYXRhKSkge1xuICAgIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG9wdGlvbnMpLCB7fSwge1xuICAgICAgZGVmYXVsdENvdW50cnk6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9IC8vIFBhcnNlIHBob25lIG51bWJlci5cblxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIHBhcnNlUGhvbmVOdW1iZXJXaXRoRXJyb3IodGV4dCwgb3B0aW9ucywgbWV0YWRhdGEpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgUGFyc2VFcnJvcikgey8vXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2VQaG9uZU51bWJlcl8uanMubWFwIiwiLy8gQ29weS1wYXN0ZWQgZnJvbTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zdWJzdGFjay9zZW12ZXItY29tcGFyZS9ibG9iL21hc3Rlci9pbmRleC5qc1xuLy9cbi8vIElubGluaW5nIHRoaXMgZnVuY3Rpb24gYmVjYXVzZSBzb21lIHVzZXJzIHJlcG9ydGVkIGlzc3VlcyB3aXRoXG4vLyBpbXBvcnRpbmcgZnJvbSBgc2VtdmVyLWNvbXBhcmVgIGluIGEgYnJvd3NlciB3aXRoIEVTNiBcIm5hdGl2ZVwiIG1vZHVsZXMuXG4vL1xuLy8gRml4ZXMgYHNlbXZlci1jb21wYXJlYCBub3QgYmVpbmcgYWJsZSB0byBjb21wYXJlIHZlcnNpb25zIHdpdGggYWxwaGEvYmV0YS9ldGMgXCJ0YWdzXCIuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2F0YW1waGV0YW1pbmUvbGlicGhvbmVudW1iZXItanMvaXNzdWVzLzM4MVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKGEsIGIpIHtcbiAgYSA9IGEuc3BsaXQoJy0nKTtcbiAgYiA9IGIuc3BsaXQoJy0nKTtcbiAgdmFyIHBhID0gYVswXS5zcGxpdCgnLicpO1xuICB2YXIgcGIgPSBiWzBdLnNwbGl0KCcuJyk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiAgICB2YXIgbmEgPSBOdW1iZXIocGFbaV0pO1xuICAgIHZhciBuYiA9IE51bWJlcihwYltpXSk7XG4gICAgaWYgKG5hID4gbmIpIHJldHVybiAxO1xuICAgIGlmIChuYiA+IG5hKSByZXR1cm4gLTE7XG4gICAgaWYgKCFpc05hTihuYSkgJiYgaXNOYU4obmIpKSByZXR1cm4gMTtcbiAgICBpZiAoaXNOYU4obmEpICYmICFpc05hTihuYikpIHJldHVybiAtMTtcbiAgfVxuXG4gIGlmIChhWzFdICYmIGJbMV0pIHtcbiAgICByZXR1cm4gYVsxXSA+IGJbMV0gPyAxIDogYVsxXSA8IGJbMV0gPyAtMSA6IDA7XG4gIH1cblxuICByZXR1cm4gIWFbMV0gJiYgYlsxXSA/IDEgOiBhWzFdICYmICFiWzFdID8gLTEgOiAwO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VtdmVyLWNvbXBhcmUuanMubWFwIiwiLy8gVGhpcyBmaWxlIGlzIGEgd29ya2Fyb3VuZCBmb3IgYSBidWcgaW4gd2ViIGJyb3dzZXJzJyBcIm5hdGl2ZVwiXG4vLyBFUzYgaW1wb3J0aW5nIHN5c3RlbSB3aGljaCBpcyB1bmNhcGFibGUgb2YgaW1wb3J0aW5nIFwiKi5qc29uXCIgZmlsZXMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2F0YW1waGV0YW1pbmUvbGlicGhvbmVudW1iZXItanMvaXNzdWVzLzIzOVxuZXhwb3J0IGRlZmF1bHQge1widmVyc2lvblwiOjQsXCJjb3VudHJ5X2NhbGxpbmdfY29kZXNcIjp7XCIxXCI6W1wiVVNcIixcIkFHXCIsXCJBSVwiLFwiQVNcIixcIkJCXCIsXCJCTVwiLFwiQlNcIixcIkNBXCIsXCJETVwiLFwiRE9cIixcIkdEXCIsXCJHVVwiLFwiSk1cIixcIktOXCIsXCJLWVwiLFwiTENcIixcIk1QXCIsXCJNU1wiLFwiUFJcIixcIlNYXCIsXCJUQ1wiLFwiVFRcIixcIlZDXCIsXCJWR1wiLFwiVklcIl0sXCI3XCI6W1wiUlVcIixcIktaXCJdLFwiMjBcIjpbXCJFR1wiXSxcIjI3XCI6W1wiWkFcIl0sXCIzMFwiOltcIkdSXCJdLFwiMzFcIjpbXCJOTFwiXSxcIjMyXCI6W1wiQkVcIl0sXCIzM1wiOltcIkZSXCJdLFwiMzRcIjpbXCJFU1wiXSxcIjM2XCI6W1wiSFVcIl0sXCIzOVwiOltcIklUXCIsXCJWQVwiXSxcIjQwXCI6W1wiUk9cIl0sXCI0MVwiOltcIkNIXCJdLFwiNDNcIjpbXCJBVFwiXSxcIjQ0XCI6W1wiR0JcIixcIkdHXCIsXCJJTVwiLFwiSkVcIl0sXCI0NVwiOltcIkRLXCJdLFwiNDZcIjpbXCJTRVwiXSxcIjQ3XCI6W1wiTk9cIixcIlNKXCJdLFwiNDhcIjpbXCJQTFwiXSxcIjQ5XCI6W1wiREVcIl0sXCI1MVwiOltcIlBFXCJdLFwiNTJcIjpbXCJNWFwiXSxcIjUzXCI6W1wiQ1VcIl0sXCI1NFwiOltcIkFSXCJdLFwiNTVcIjpbXCJCUlwiXSxcIjU2XCI6W1wiQ0xcIl0sXCI1N1wiOltcIkNPXCJdLFwiNThcIjpbXCJWRVwiXSxcIjYwXCI6W1wiTVlcIl0sXCI2MVwiOltcIkFVXCIsXCJDQ1wiLFwiQ1hcIl0sXCI2MlwiOltcIklEXCJdLFwiNjNcIjpbXCJQSFwiXSxcIjY0XCI6W1wiTlpcIl0sXCI2NVwiOltcIlNHXCJdLFwiNjZcIjpbXCJUSFwiXSxcIjgxXCI6W1wiSlBcIl0sXCI4MlwiOltcIktSXCJdLFwiODRcIjpbXCJWTlwiXSxcIjg2XCI6W1wiQ05cIl0sXCI5MFwiOltcIlRSXCJdLFwiOTFcIjpbXCJJTlwiXSxcIjkyXCI6W1wiUEtcIl0sXCI5M1wiOltcIkFGXCJdLFwiOTRcIjpbXCJMS1wiXSxcIjk1XCI6W1wiTU1cIl0sXCI5OFwiOltcIklSXCJdLFwiMjExXCI6W1wiU1NcIl0sXCIyMTJcIjpbXCJNQVwiLFwiRUhcIl0sXCIyMTNcIjpbXCJEWlwiXSxcIjIxNlwiOltcIlROXCJdLFwiMjE4XCI6W1wiTFlcIl0sXCIyMjBcIjpbXCJHTVwiXSxcIjIyMVwiOltcIlNOXCJdLFwiMjIyXCI6W1wiTVJcIl0sXCIyMjNcIjpbXCJNTFwiXSxcIjIyNFwiOltcIkdOXCJdLFwiMjI1XCI6W1wiQ0lcIl0sXCIyMjZcIjpbXCJCRlwiXSxcIjIyN1wiOltcIk5FXCJdLFwiMjI4XCI6W1wiVEdcIl0sXCIyMjlcIjpbXCJCSlwiXSxcIjIzMFwiOltcIk1VXCJdLFwiMjMxXCI6W1wiTFJcIl0sXCIyMzJcIjpbXCJTTFwiXSxcIjIzM1wiOltcIkdIXCJdLFwiMjM0XCI6W1wiTkdcIl0sXCIyMzVcIjpbXCJURFwiXSxcIjIzNlwiOltcIkNGXCJdLFwiMjM3XCI6W1wiQ01cIl0sXCIyMzhcIjpbXCJDVlwiXSxcIjIzOVwiOltcIlNUXCJdLFwiMjQwXCI6W1wiR1FcIl0sXCIyNDFcIjpbXCJHQVwiXSxcIjI0MlwiOltcIkNHXCJdLFwiMjQzXCI6W1wiQ0RcIl0sXCIyNDRcIjpbXCJBT1wiXSxcIjI0NVwiOltcIkdXXCJdLFwiMjQ2XCI6W1wiSU9cIl0sXCIyNDdcIjpbXCJBQ1wiXSxcIjI0OFwiOltcIlNDXCJdLFwiMjQ5XCI6W1wiU0RcIl0sXCIyNTBcIjpbXCJSV1wiXSxcIjI1MVwiOltcIkVUXCJdLFwiMjUyXCI6W1wiU09cIl0sXCIyNTNcIjpbXCJESlwiXSxcIjI1NFwiOltcIktFXCJdLFwiMjU1XCI6W1wiVFpcIl0sXCIyNTZcIjpbXCJVR1wiXSxcIjI1N1wiOltcIkJJXCJdLFwiMjU4XCI6W1wiTVpcIl0sXCIyNjBcIjpbXCJaTVwiXSxcIjI2MVwiOltcIk1HXCJdLFwiMjYyXCI6W1wiUkVcIixcIllUXCJdLFwiMjYzXCI6W1wiWldcIl0sXCIyNjRcIjpbXCJOQVwiXSxcIjI2NVwiOltcIk1XXCJdLFwiMjY2XCI6W1wiTFNcIl0sXCIyNjdcIjpbXCJCV1wiXSxcIjI2OFwiOltcIlNaXCJdLFwiMjY5XCI6W1wiS01cIl0sXCIyOTBcIjpbXCJTSFwiLFwiVEFcIl0sXCIyOTFcIjpbXCJFUlwiXSxcIjI5N1wiOltcIkFXXCJdLFwiMjk4XCI6W1wiRk9cIl0sXCIyOTlcIjpbXCJHTFwiXSxcIjM1MFwiOltcIkdJXCJdLFwiMzUxXCI6W1wiUFRcIl0sXCIzNTJcIjpbXCJMVVwiXSxcIjM1M1wiOltcIklFXCJdLFwiMzU0XCI6W1wiSVNcIl0sXCIzNTVcIjpbXCJBTFwiXSxcIjM1NlwiOltcIk1UXCJdLFwiMzU3XCI6W1wiQ1lcIl0sXCIzNThcIjpbXCJGSVwiLFwiQVhcIl0sXCIzNTlcIjpbXCJCR1wiXSxcIjM3MFwiOltcIkxUXCJdLFwiMzcxXCI6W1wiTFZcIl0sXCIzNzJcIjpbXCJFRVwiXSxcIjM3M1wiOltcIk1EXCJdLFwiMzc0XCI6W1wiQU1cIl0sXCIzNzVcIjpbXCJCWVwiXSxcIjM3NlwiOltcIkFEXCJdLFwiMzc3XCI6W1wiTUNcIl0sXCIzNzhcIjpbXCJTTVwiXSxcIjM4MFwiOltcIlVBXCJdLFwiMzgxXCI6W1wiUlNcIl0sXCIzODJcIjpbXCJNRVwiXSxcIjM4M1wiOltcIlhLXCJdLFwiMzg1XCI6W1wiSFJcIl0sXCIzODZcIjpbXCJTSVwiXSxcIjM4N1wiOltcIkJBXCJdLFwiMzg5XCI6W1wiTUtcIl0sXCI0MjBcIjpbXCJDWlwiXSxcIjQyMVwiOltcIlNLXCJdLFwiNDIzXCI6W1wiTElcIl0sXCI1MDBcIjpbXCJGS1wiXSxcIjUwMVwiOltcIkJaXCJdLFwiNTAyXCI6W1wiR1RcIl0sXCI1MDNcIjpbXCJTVlwiXSxcIjUwNFwiOltcIkhOXCJdLFwiNTA1XCI6W1wiTklcIl0sXCI1MDZcIjpbXCJDUlwiXSxcIjUwN1wiOltcIlBBXCJdLFwiNTA4XCI6W1wiUE1cIl0sXCI1MDlcIjpbXCJIVFwiXSxcIjU5MFwiOltcIkdQXCIsXCJCTFwiLFwiTUZcIl0sXCI1OTFcIjpbXCJCT1wiXSxcIjU5MlwiOltcIkdZXCJdLFwiNTkzXCI6W1wiRUNcIl0sXCI1OTRcIjpbXCJHRlwiXSxcIjU5NVwiOltcIlBZXCJdLFwiNTk2XCI6W1wiTVFcIl0sXCI1OTdcIjpbXCJTUlwiXSxcIjU5OFwiOltcIlVZXCJdLFwiNTk5XCI6W1wiQ1dcIixcIkJRXCJdLFwiNjcwXCI6W1wiVExcIl0sXCI2NzJcIjpbXCJORlwiXSxcIjY3M1wiOltcIkJOXCJdLFwiNjc0XCI6W1wiTlJcIl0sXCI2NzVcIjpbXCJQR1wiXSxcIjY3NlwiOltcIlRPXCJdLFwiNjc3XCI6W1wiU0JcIl0sXCI2NzhcIjpbXCJWVVwiXSxcIjY3OVwiOltcIkZKXCJdLFwiNjgwXCI6W1wiUFdcIl0sXCI2ODFcIjpbXCJXRlwiXSxcIjY4MlwiOltcIkNLXCJdLFwiNjgzXCI6W1wiTlVcIl0sXCI2ODVcIjpbXCJXU1wiXSxcIjY4NlwiOltcIktJXCJdLFwiNjg3XCI6W1wiTkNcIl0sXCI2ODhcIjpbXCJUVlwiXSxcIjY4OVwiOltcIlBGXCJdLFwiNjkwXCI6W1wiVEtcIl0sXCI2OTFcIjpbXCJGTVwiXSxcIjY5MlwiOltcIk1IXCJdLFwiODUwXCI6W1wiS1BcIl0sXCI4NTJcIjpbXCJIS1wiXSxcIjg1M1wiOltcIk1PXCJdLFwiODU1XCI6W1wiS0hcIl0sXCI4NTZcIjpbXCJMQVwiXSxcIjg4MFwiOltcIkJEXCJdLFwiODg2XCI6W1wiVFdcIl0sXCI5NjBcIjpbXCJNVlwiXSxcIjk2MVwiOltcIkxCXCJdLFwiOTYyXCI6W1wiSk9cIl0sXCI5NjNcIjpbXCJTWVwiXSxcIjk2NFwiOltcIklRXCJdLFwiOTY1XCI6W1wiS1dcIl0sXCI5NjZcIjpbXCJTQVwiXSxcIjk2N1wiOltcIllFXCJdLFwiOTY4XCI6W1wiT01cIl0sXCI5NzBcIjpbXCJQU1wiXSxcIjk3MVwiOltcIkFFXCJdLFwiOTcyXCI6W1wiSUxcIl0sXCI5NzNcIjpbXCJCSFwiXSxcIjk3NFwiOltcIlFBXCJdLFwiOTc1XCI6W1wiQlRcIl0sXCI5NzZcIjpbXCJNTlwiXSxcIjk3N1wiOltcIk5QXCJdLFwiOTkyXCI6W1wiVEpcIl0sXCI5OTNcIjpbXCJUTVwiXSxcIjk5NFwiOltcIkFaXCJdLFwiOTk1XCI6W1wiR0VcIl0sXCI5OTZcIjpbXCJLR1wiXSxcIjk5OFwiOltcIlVaXCJdfSxcImNvdW50cmllc1wiOntcIkFDXCI6W1wiMjQ3XCIsXCIwMFwiLFwiKD86WzAxNTg5XVxcXFxkfFs0Nl0pXFxcXGR7NH1cIixbNSw2XV0sXCJBRFwiOltcIjM3NlwiLFwiMDBcIixcIig/OjF8NlxcXFxkKVxcXFxkezd9fFsxMzUtOV1cXFxcZHs1fVwiLFs2LDgsOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMlwiLFtcIlsxMzUtOV1cIl1dLFtcIihcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIjFcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI2XCJdXV1dLFwiQUVcIjpbXCI5NzFcIixcIjAwXCIsXCIoPzpbNC03XVxcXFxkfDlbMC02ODldKVxcXFxkezd9fDgwMFxcXFxkezIsOX18WzItNDY3OV1cXFxcZHs3fVwiLFs1LDYsNyw4LDksMTAsMTEsMTJdLFtbXCIoXFxcXGR7M30pKFxcXFxkezIsOX0pXCIsXCIkMSAkMlwiLFtcIjYwfDhcIl1dLFtcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjM2XXxbNDc5XVsyLThdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGQpKFxcXFxkezV9KVwiLFwiJDEgJDIgJDNcIixbXCJbNDc5XVwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjVcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkFGXCI6W1wiOTNcIixcIjAwXCIsXCJbMi03XVxcXFxkezh9XCIsWzldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzItN11cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkFHXCI6W1wiMVwiLFwiMDExXCIsXCIoPzoyNjh8WzU4XVxcXFxkXFxcXGR8OTAwKVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsXCIoWzQ1N11cXFxcZHs2fSkkfDFcIixcIjI2OCQxXCIsMCxcIjI2OFwiXSxcIkFJXCI6W1wiMVwiLFwiMDExXCIsXCIoPzoyNjR8WzU4XVxcXFxkXFxcXGR8OTAwKVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsXCIoWzI0NTddXFxcXGR7Nn0pJHwxXCIsXCIyNjQkMVwiLDAsXCIyNjRcIl0sXCJBTFwiOltcIjM1NVwiLFwiMDBcIixcIig/OjcwMFxcXFxkXFxcXGR8OTAwKVxcXFxkezN9fDhcXFxcZHs1LDd9fCg/OlsyLTVdfDZcXFxcZClcXFxcZHs3fVwiLFs2LDcsOCw5XSxbW1wiKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDJcIixbXCI4MHw5XCJdLFwiMCQxXCJdLFtcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI0WzItNl1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlsyMzU4XVsyLTVdfDRcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiWzIzNTc4XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiNlwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiQU1cIjpbXCIzNzRcIixcIjAwXCIsXCIoPzpbMS00ODldXFxcXGR8NTV8NjB8NzcpXFxcXGR7Nn1cIixbOF0sW1tcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbODldMFwiXSxcIjAgJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiMnwzWzEyXVwiXSxcIigwJDEpXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7Nn0pXCIsXCIkMSAkMlwiLFtcIjF8NDdcIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezZ9KVwiLFwiJDEgJDJcIixbXCJbMy05XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiQU9cIjpbXCIyNDRcIixcIjAwXCIsXCJbMjldXFxcXGR7OH1cIixbOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjldXCJdXV1dLFwiQVJcIjpbXCI1NFwiLFwiMDBcIixcIig/OjExfFs4OV1cXFxcZFxcXFxkKVxcXFxkezh9fFsyMzY4XVxcXFxkezl9XCIsWzEwLDExXSxbW1wiKFxcXFxkezR9KShcXFxcZHsyfSkoXFxcXGR7NH0pXCIsXCIkMSAkMi0kM1wiLFtcIjIoPzoyWzAyNC05XXwzWzAtNTldfDQ3fDZbMjQ1XXw5WzAyLThdKXwzKD86M1syOF18NFswMy05XXw1WzItNDYtOF18N1sxLTU3OF18OFsyLTldKVwiLFwiMig/OlsyM10wMnw2KD86WzI1XXw0WzYtOF0pfDkoPzpbMDIzNTZdfDRbMDI1NjhdfDcyfDhbMjNdKSl8Myg/OjNbMjhdfDQoPzpbMDQ2NzldfDNbNS04XXw1WzQtNjhdfDhbMjM3OV0pfDUoPzpbMjQ2N118M1syMzddfDhbMi01XSl8N1sxLTU3OF18OCg/OlsyNDY5XXwzWzI1NzhdfDVbNC04XXw3WzM2LThdfDhbNS04XSkpfDIoPzoyWzI0LTldfDNbMS01OV18NDcpXCIsXCIyKD86WzIzXTAyfDYoPzpbMjVdfDQoPzo2NHxbNzhdKSl8OSg/OlswMjM1Nl18NCg/OlswMjY4XXw1WzItNl0pfDcyfDhbMjNdKSl8Myg/OjNbMjhdfDQoPzpbMDQ2NzldfDNbNzhdfDUoPzo0WzQ2XXw4KXw4WzIzNzldKXw1KD86WzI0NjddfDNbMjM3XXw4WzIzXSl8N1sxLTU3OF18OCg/OlsyNDY5XXwzWzI3OF18NVs1Nl1bNDZdfDg2WzMtNl0pKXwyKD86MlsyNC05XXwzWzEtNTldfDQ3KXwzOCg/Ols1OF1bNzhdfDdbMzc4XSl8Myg/OjRbMzVdWzU2XXw1OFs0NV18OCg/OlszOF01fDU0fDc2KSlbNC02XVwiLFwiMig/OlsyM10wMnw2KD86WzI1XXw0KD86NjR8Wzc4XSkpfDkoPzpbMDIzNTZdfDQoPzpbMDI2OF18NVsyLTZdKXw3Mnw4WzIzXSkpfDMoPzozWzI4XXw0KD86WzA0Njc5XXwzKD86NSg/OjRbMC0yNTY4OV18WzU2XSl8Wzc4XSl8NTh8OFsyMzc5XSl8NSg/OlsyNDY3XXwzWzIzN118OCg/OlsyM118NCg/Ols0NV18NjApfDUoPzo0WzAtMzldfDV8NjQpKSl8N1sxLTU3OF18OCg/OlsyNDY5XXwzWzI3OF18NTQoPzo0fDVbMTMtN118Nls4OV0pfDg2WzMtNl0pKXwyKD86MlsyNC05XXwzWzEtNTldfDQ3KXwzOCg/Ols1OF1bNzhdfDdbMzc4XSl8Myg/OjQ1NHw4NVs1Nl0pWzQ2XXwzKD86NCg/OjM2fDVbNTZdKXw4KD86WzM4XTV8NzYpKVs0LTZdXCJdLFwiMCQxXCIsMV0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMi0kM1wiLFtcIjFcIl0sXCIwJDFcIiwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxLSQyLSQzXCIsW1wiWzY4XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyLSQzXCIsW1wiWzIzXVwiXSxcIjAkMVwiLDFdLFtcIihcXFxcZCkoXFxcXGR7NH0pKFxcXFxkezJ9KShcXFxcZHs0fSlcIixcIiQyIDE1LSQzLSQ0XCIsW1wiOSg/OjJbMi00NjldfDNbMy01NzhdKVwiLFwiOSg/OjIoPzoyWzAyNC05XXwzWzAtNTldfDQ3fDZbMjQ1XXw5WzAyLThdKXwzKD86M1syOF18NFswMy05XXw1WzItNDYtOF18N1sxLTU3OF18OFsyLTldKSlcIixcIjkoPzoyKD86WzIzXTAyfDYoPzpbMjVdfDRbNi04XSl8OSg/OlswMjM1Nl18NFswMjU2OF18NzJ8OFsyM10pKXwzKD86M1syOF18NCg/OlswNDY3OV18M1s1LThdfDVbNC02OF18OFsyMzc5XSl8NSg/OlsyNDY3XXwzWzIzN118OFsyLTVdKXw3WzEtNTc4XXw4KD86WzI0NjldfDNbMjU3OF18NVs0LThdfDdbMzYtOF18OFs1LThdKSkpfDkyKD86MlsyNC05XXwzWzEtNTldfDQ3KVwiLFwiOSg/OjIoPzpbMjNdMDJ8Nig/OlsyNV18NCg/OjY0fFs3OF0pKXw5KD86WzAyMzU2XXw0KD86WzAyNjhdfDVbMi02XSl8NzJ8OFsyM10pKXwzKD86M1syOF18NCg/OlswNDY3OV18M1s3OF18NSg/OjRbNDZdfDgpfDhbMjM3OV0pfDUoPzpbMjQ2N118M1syMzddfDhbMjNdKXw3WzEtNTc4XXw4KD86WzI0NjldfDNbMjc4XXw1KD86WzU2XVs0Nl18Wzc4XSl8N1szNzhdfDgoPzo2WzMtNl18Wzc4XSkpKSl8OTIoPzoyWzI0LTldfDNbMS01OV18NDcpfDkzKD86NFszNV1bNTZdfDU4WzQ1XXw4KD86WzM4XTV8NTR8NzYpKVs0LTZdXCIsXCI5KD86Mig/OlsyM10wMnw2KD86WzI1XXw0KD86NjR8Wzc4XSkpfDkoPzpbMDIzNTZdfDQoPzpbMDI2OF18NVsyLTZdKXw3Mnw4WzIzXSkpfDMoPzozWzI4XXw0KD86WzA0Njc5XXwzKD86NSg/OjRbMC0yNTY4OV18WzU2XSl8Wzc4XSl8NSg/OjRbNDZdfDgpfDhbMjM3OV0pfDUoPzpbMjQ2N118M1syMzddfDgoPzpbMjNdfDQoPzpbNDVdfDYwKXw1KD86NFswLTM5XXw1fDY0KSkpfDdbMS01NzhdfDgoPzpbMjQ2OV18M1syNzhdfDUoPzo0KD86NHw1WzEzLTddfDZbODldKXxbNTZdWzQ2XXxbNzhdKXw3WzM3OF18OCg/OjZbMy02XXxbNzhdKSkpKXw5Mig/OjJbMjQtOV18M1sxLTU5XXw0Nyl8OTMoPzo0KD86MzZ8NVs1Nl0pfDgoPzpbMzhdNXw3NikpWzQtNl1cIl0sXCIwJDFcIiwwLFwiJDEgJDIgJDMtJDRcIl0sW1wiKFxcXFxkKShcXFxcZHsyfSkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDIgMTUtJDMtJDRcIixbXCI5MVwiXSxcIjAkMVwiLDAsXCIkMSAkMiAkMy0kNFwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs1fSlcIixcIiQxLSQyLSQzXCIsW1wiOFwiXSxcIjAkMVwiXSxbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMiAxNS0kMy0kNFwiLFtcIjlcIl0sXCIwJDFcIiwwLFwiJDEgJDIgJDMtJDRcIl1dLFwiMFwiLDAsXCIwPyg/OigxMXwyKD86Mig/OjAyP3xbMTNdfDJbMTMtNzldfDRbMS02XXw1WzI0NTddfDZbMTI0LThdfDdbMS00XXw4WzEzLTZdfDlbMTI2N10pfDMoPzowMj98MVs0NjddfDJbMDMtNl18M1sxMy04XXxbNDldWzItNl18NVsyLThdfFs2N10pfDQoPzo3WzMtNTc4XXw5KXw2KD86WzAxMzZdfDJbMjQtNl18NFs2LThdP3w1WzE1LThdKXw4MHw5KD86MFsxLTNdfFsxOV18MlxcXFxkfDNbMS02XXw0WzAyNTY4XT98NVsyLTRdfDZbMi00Nl18NzI/fDhbMjNdPykpfDMoPzozKD86Mls3OV18Nnw4WzI1NzhdKXw0KD86MFswLTI0LTldfFsxMl18M1s1LThdP3w0WzI0LTddfDVbNC02OF0/fDZbMDItOV18N1sxMjZdfDhbMjM3OV0/fDlbMS0zNi04XSl8NSg/OjF8MlsxMjQ1XXwzWzIzN10/fDRbMS00Ni05XXw2WzItNF18N1sxLTZdfDhbMi01XT8pfDZbMjRdfDcoPzpbMDY5XXwxWzE1NjhdfDJbMTVdfDNbMTQ1XXw0WzEzXXw1WzE0LThdfDdbMi01N118OFsxMjZdKXw4KD86WzAxXXwyWzE1LTddfDNbMjU3OF0/fDRbMTMtNl18NVs0LThdP3w2WzEtMzU3LTldfDdbMzYtOF0/fDhbNS04XT98OVsxMjRdKSkpMTUpP1wiLFwiOSQxXCJdLFwiQVNcIjpbXCIxXCIsXCIwMTFcIixcIig/Ols1OF1cXFxcZFxcXFxkfDY4NHw5MDApXFxcXGR7N31cIixbMTBdLDAsXCIxXCIsMCxcIihbMjY3XVxcXFxkezZ9KSR8MVwiLFwiNjg0JDFcIiwwLFwiNjg0XCJdLFwiQVRcIjpbXCI0M1wiLFwiMDBcIixcIjFcXFxcZHszLDEyfXwyXFxcXGR7NiwxMn18NDMoPzooPzowXFxcXGR8NVswMi05XSlcXFxcZHszLDl9fDJcXFxcZHs0LDV9fFszNDY3XVxcXFxkezR9fDhcXFxcZHs0LDZ9fDlcXFxcZHs0LDd9KXw1XFxcXGR7NCwxMn18OFxcXFxkezcsMTJ9fDlcXFxcZHs4LDEyfXwoPzpbMzY3XVxcXFxkfDRbMC0yNC05XSlcXFxcZHs0LDExfVwiLFs0LDUsNiw3LDgsOSwxMCwxMSwxMiwxM10sW1tcIihcXFxcZCkoXFxcXGR7MywxMn0pXCIsXCIkMSAkMlwiLFtcIjEoPzoxMXxbMi05XSlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSlcIixcIiQxICQyXCIsW1wiNTE3XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7Myw1fSlcIixcIiQxICQyXCIsW1wiNVswNzldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7MywxMH0pXCIsXCIkMSAkMlwiLFtcIig/OjMxfDQpNnw1MXw2KD86NVswLTM1NzldfFs2LTldKXw3KD86MjB8MzJ8OCl8Wzg5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezMsOX0pXCIsXCIkMSAkMlwiLFtcIlsyLTQ2N118NVsyLTZdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezMsNH0pXCIsXCIkMSAkMiAkM1wiLFtcIjVcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NCw3fSlcIixcIiQxICQyICQzXCIsW1wiNVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiQVVcIjpbXCI2MVwiLFwiMDAxWzE0LTY4OV18MTQoPzoxWzE0XXwzNHw0WzE3XXxbNTZdNnw3WzQ3XXw4OCkwMDExXCIsXCIxKD86WzAtNzldXFxcXGR7N30oPzpcXFxcZCg/OlxcXFxkezJ9KT8pP3w4WzAtMjQtOV1cXFxcZHs3fSl8WzItNDc4XVxcXFxkezh9fDFcXFxcZHs0LDd9XCIsWzUsNiw3LDgsOSwxMCwxMl0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyXCIsW1wiMTZcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Miw0fSlcIixcIiQxICQyICQzXCIsW1wiMTZcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjE0fDRcIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsyMzc4XVwiXSxcIigwJDEpXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIxKD86MzB8Wzg5XSlcIl1dXSxcIjBcIiwwLFwiKDE4M1sxMl0pfDBcIiwwLDAsMCxbW1wiKD86KD86Mig/OlswLTI2LTldXFxcXGR8M1swLThdfDRbMDItOV18NVswMTM1LTldKXwzKD86WzAtMzU4OV1cXFxcZHw0WzAtNTc4XXw2WzEtOV18N1swLTM1LTldKXw3KD86WzAxMy01Ny05XVxcXFxkfDJbMC04XSkpXFxcXGR7M318OCg/OjUxKD86MCg/OjBbMDMtOV18WzEyNDc5XVxcXFxkfDNbMi05XXw1WzAtOF18NlsxLTldfDhbMC03XSl8MSg/OlswMjM1Njg5XVxcXFxkfDFbMC02OV18NFswLTU4OV18N1swLTQ3LTldKXwyKD86MFswLTc5XXxbMThdWzEzNTc5XXwyWzE0LTldfDNbMC00Ni05XXxbNC02XVxcXFxkfDdbODldfDlbMC00XSkpfCg/OjZbMC04XXxbNzhdXFxcXGQpXFxcXGR7M318OSg/OlswMi05XVxcXFxkezN9fDEoPzooPzpbMC01OF1cXFxcZHw2WzAxMzUtOV0pXFxcXGR8Nyg/OjBbMC0yNC05XXxbMS05XVxcXFxkKXw5KD86WzAtNDYtOV1cXFxcZHw1WzAtNzldKSkpKSlcXFxcZHszfVwiLFs5XV0sW1wiNCg/Oig/Ojc5fDk0KVswMV18ODNbMC0zODldKVxcXFxkezV9fDQoPzpbMC0zXVxcXFxkfDRbMDQ3LTldfDVbMC0yNS05XXw2WzAxNi05XXw3WzAyLThdfDhbMC0yNC05XXw5WzAtMzctOV0pXFxcXGR7Nn1cIixbOV1dLFtcIjE4MCg/OjBcXFxcZHszfXwyKVxcXFxkezN9XCIsWzcsMTBdXSxbXCIxOTBbMC0yNl1cXFxcZHs2fVwiLFsxMF1dLDAsMCwwLFtcIjE2M1xcXFxkezIsNn1cIixbNSw2LDcsOCw5XV0sW1wiMTQoPzo1KD86MVswNDU4XXxbMjNdWzQ1OF0pfDcxXFxcXGQpXFxcXGR7NH1cIixbOV1dLFtcIjEzKD86MDBcXFxcZHs2fSg/OlxcXFxkezJ9KT98NDVbMC00XVxcXFxkezN9KXwxM1xcXFxkezR9XCIsWzYsOCwxMCwxMl1dXSxcIjAwMTFcIl0sXCJBV1wiOltcIjI5N1wiLFwiMDBcIixcIig/OlsyNS03OV1cXFxcZFxcXFxkfDgwMClcXFxcZHs0fVwiLFs3XSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzI1LTldXCJdXV1dLFwiQVhcIjpbXCIzNThcIixcIjAwfDk5KD86WzAxNDY5XXw1KD86WzE0XTF8M1syM118NVs1OV18Nzd8ODh8OVswOV0pKVwiLFwiMlxcXFxkezQsOX18MzVcXFxcZHs0LDV9fCg/OjYwXFxcXGRcXFxcZHw4MDApXFxcXGR7NCw2fXw3XFxcXGR7NSwxMX18KD86WzE0XVxcXFxkfDNbMC00Ni05XXw1MClcXFxcZHs0LDh9XCIsWzUsNiw3LDgsOSwxMCwxMSwxMl0sMCxcIjBcIiwwLDAsMCwwLFwiMThcIiwwLFwiMDBcIl0sXCJBWlwiOltcIjk5NFwiLFwiMDBcIixcIjM2NVxcXFxkezZ9fCg/OlsxMjQ1NzldXFxcXGR8NjB8ODgpXFxcXGR7N31cIixbOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiOTBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCIxWzI4XXwyfDM2NXw0NlwiLFwiMVsyOF18MnwzNjVbNDVdfDQ2XCIsXCIxWzI4XXwyfDM2NSg/OjR8NVswMl0pfDQ2XCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMTMtOV1cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkJBXCI6W1wiMzg3XCIsXCIwMFwiLFwiNlxcXFxkezh9fCg/OlszNTY4OV1cXFxcZHw0OXw3MClcXFxcZHs2fVwiLFs4LDldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiNlsxLTNdfFs3LTldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDItJDNcIixbXCJbMy01XXw2WzU2XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjZcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkJCXCI6W1wiMVwiLFwiMDExXCIsXCIoPzoyNDZ8WzU4XVxcXFxkXFxcXGR8OTAwKVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsXCIoWzItOV1cXFxcZHs2fSkkfDFcIixcIjI0NiQxXCIsMCxcIjI0NlwiXSxcIkJEXCI6W1wiODgwXCIsXCIwMFwiLFwiWzEtNDY5XVxcXFxkezl9fDhbMC03OV1cXFxcZHs3LDh9fFsyLTc5XVxcXFxkezh9fFsyLTldXFxcXGR7N318WzMtOV1cXFxcZHs2fXxbNTctOV1cXFxcZHs1fVwiLFs2LDcsOCw5LDEwXSxbW1wiKFxcXFxkezJ9KShcXFxcZHs0LDZ9KVwiLFwiJDEtJDJcIixbXCIzMVs1LThdfFs0NTldMVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezMsN30pXCIsXCIkMS0kMlwiLFtcIjMoPzpbNjddfDhbMDEzLTldKXw0KD86NlsxNjhdfDd8Wzg5XVsxOF0pfDUoPzo2WzEyOF18OSl8Nig/OjI4fDRbMTRdfDUpfDdbMi01ODldfDgoPzowWzAxNC05XXxbMTJdKXw5WzM1OF18KD86M1syLTVdfDRbMjM1XXw1WzItNTc4XXw2WzAzODldfDc2fDhbMy03XXw5WzI0XSkxfCg/OjQ0fDY2KVswMTM0Ni05XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezMsNn0pXCIsXCIkMS0kMlwiLFtcIlsxMy05XXwyMlwiXSxcIjAkMVwiXSxbXCIoXFxcXGQpKFxcXFxkezcsOH0pXCIsXCIkMS0kMlwiLFtcIjJcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkJFXCI6W1wiMzJcIixcIjAwXCIsXCI0XFxcXGR7OH18WzEtOV1cXFxcZHs3fVwiLFs4LDldLFtbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiKD86ODB8OSkwXCJdLFwiMCQxXCJdLFtcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzIzOV18NFsyM11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMTUtOF1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCI0XCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJCRlwiOltcIjIyNlwiLFwiMDBcIixcIlswMjUtN11cXFxcZHs3fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMDI1LTddXCJdXV1dLFwiQkdcIjpbXCIzNTlcIixcIjAwXCIsXCIwMDgwMFxcXFxkezd9fFsyLTddXFxcXGR7Niw3fXxbODldXFxcXGR7Niw4fXwyXFxcXGR7NX1cIixbNiw3LDgsOSwxMl0sW1tcIihcXFxcZCkoXFxcXGQpKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiMlwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCI0M1sxLTZdfDcwWzEtOV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiMlwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHsyLDN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMzU2XXw0WzEyNC03XXw3WzEtOV18OFsxLTZdfDlbMS03XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiKD86NzB8OCkwXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDNcIixbXCI0M1sxLTddfDdcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiWzQ4XXw5WzA4XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiOVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiQkhcIjpbXCI5NzNcIixcIjAwXCIsXCJbMTM2LTldXFxcXGR7N31cIixbOF0sW1tcIihcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIlsxMzY3OV18OFswNDddXCJdXV1dLFwiQklcIjpbXCIyNTdcIixcIjAwXCIsXCIoPzpbMjY3XVxcXFxkfDMxKVxcXFxkezZ9XCIsWzhdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlsyMzY3XVwiXV1dXSxcIkJKXCI6W1wiMjI5XCIsXCIwMFwiLFwiWzI0LTY4OV1cXFxcZHs3fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMjQtNjg5XVwiXV1dXSxcIkJMXCI6W1wiNTkwXCIsXCIwMFwiLFwiNTkwXFxcXGR7Nn18KD86Njl8ODB8OVxcXFxkKVxcXFxkezd9XCIsWzldLDAsXCIwXCIsMCwwLDAsMCwwLFtbXCI1OTAoPzoyWzctOV18NVsxMl18ODcpXFxcXGR7NH1cIl0sW1wiNjkoPzowXFxcXGRcXFxcZHwxKD86MlsyLTldfDNbMC01XSkpXFxcXGR7NH1cIl0sW1wiODBbMC01XVxcXFxkezZ9XCJdLDAsMCwwLDAsMCxbXCI5KD86KD86Mzk1fDc2WzAxOF0pXFxcXGR8NDc1WzAtMl0pXFxcXGR7NH1cIl1dXSxcIkJNXCI6W1wiMVwiLFwiMDExXCIsXCIoPzo0NDF8WzU4XVxcXFxkXFxcXGR8OTAwKVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsXCIoWzItOV1cXFxcZHs2fSkkfDFcIixcIjQ0MSQxXCIsMCxcIjQ0MVwiXSxcIkJOXCI6W1wiNjczXCIsXCIwMFwiLFwiWzItNTc4XVxcXFxkezZ9XCIsWzddLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMi01NzhdXCJdXV1dLFwiQk9cIjpbXCI1OTFcIixcIjAwKD86MVxcXFxkKT9cIixcIig/OlsyLTQ2N11cXFxcZFxcXFxkfDgwMDEpXFxcXGR7NX1cIixbOCw5XSxbW1wiKFxcXFxkKShcXFxcZHs3fSlcIixcIiQxICQyXCIsW1wiWzIzXXw0WzQ2XVwiXV0sW1wiKFxcXFxkezh9KVwiLFwiJDFcIixbXCJbNjddXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiOFwiXV1dLFwiMFwiLDAsXCIwKDFcXFxcZCk/XCJdLFwiQlFcIjpbXCI1OTlcIixcIjAwXCIsXCIoPzpbMzRdMXw3XFxcXGQpXFxcXGR7NX1cIixbN10sMCwwLDAsMCwwLDAsXCJbMzQ3XVwiXSxcIkJSXCI6W1wiNTVcIixcIjAwKD86MVsyNDVdfDJbMS0zNV18MzF8NFsxM118WzU2XTV8OTkpXCIsXCIoPzpbMS00Ni05XVxcXFxkXFxcXGR8NSg/OlswLTQ2LTldXFxcXGR8NVswLTQ2LTldKSlcXFxcZHs4fXxbMS05XVxcXFxkezl9fFszNTg5XVxcXFxkezh9fFszNF1cXFxcZHs3fVwiLFs4LDksMTAsMTFdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCIzMDB8NCg/OjBbMDJdfDM3KVwiLFwiNCg/OjAyfDM3KTB8WzM0XTAwXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezIsM30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIoPzpbMzU4XXw5MCkwXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDItJDNcIixbXCIoPzpbMTQ2ODldWzEtOV18MlsxMjQ3OF18M1sxLTU3OF18NVsxMy01XXw3WzEzLTU3OV0pWzItNTddXCJdLFwiKCQxKVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezV9KShcXFxcZHs0fSlcIixcIiQxICQyLSQzXCIsW1wiWzE2XVsxLTldfFsyLTU3LTldXCJdLFwiKCQxKVwiXV0sXCIwXCIsMCxcIig/OjB8OTApKD86KDFbMjQ1XXwyWzEtMzVdfDMxfDRbMTNdfFs1Nl01fDk5KShcXFxcZHsxMCwxMX0pKT9cIixcIiQyXCJdLFwiQlNcIjpbXCIxXCIsXCIwMTFcIixcIig/OjI0MnxbNThdXFxcXGRcXFxcZHw5MDApXFxcXGR7N31cIixbMTBdLDAsXCIxXCIsMCxcIihbMy04XVxcXFxkezZ9KSR8MVwiLFwiMjQyJDFcIiwwLFwiMjQyXCJdLFwiQlRcIjpbXCI5NzVcIixcIjAwXCIsXCJbMTddXFxcXGR7N318WzItOF1cXFxcZHs2fVwiLFs3LDhdLFtbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiWzItNjhdfDdbMjQ2XVwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCIxWzY3XXw3XCJdXV1dLFwiQldcIjpbXCIyNjdcIixcIjAwXCIsXCIoPzowODAwfCg/OlszN118ODAwKVxcXFxkKVxcXFxkezZ9fCg/OlsyLTZdXFxcXGR8OTApXFxcXGR7NX1cIixbNyw4LDEwXSxbW1wiKFxcXFxkezJ9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiOTBcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIlsyNC02XXwzWzE1LTc5XVwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlszN11cIl1dLFtcIihcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIwXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiOFwiXV1dXSxcIkJZXCI6W1wiMzc1XCIsXCI4MTBcIixcIig/OlsxMl1cXFxcZHwzM3w0NHw5MDIpXFxcXGR7N318OCg/OjBbMC03OV1cXFxcZHs1LDd9fFsxLTddXFxcXGR7OX0pfDgoPzoxWzAtNDg5XXxbNS03OV1cXFxcZClcXFxcZHs3fXw4WzEtNzldXFxcXGR7Niw3fXw4WzAtNzldXFxcXGR7NX18OFxcXFxkezV9XCIsWzYsNyw4LDksMTAsMTFdLFtbXCIoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDJcIixbXCI4MDBcIl0sXCI4ICQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezIsNH0pXCIsXCIkMSAkMiAkM1wiLFtcIjgwMFwiXSxcIjggJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMi0kM1wiLFtcIjEoPzo1WzE2OV18NlszLTVdfDdbMTc5XSl8Mig/OjFbMzVdfDJbMzRdfDNbMy01XSlcIixcIjEoPzo1WzE2OV18Nig/OjNbMS0zXXw0fDVbMTI1XSl8Nyg/OjFbMy05XXw3WzAtMjQtNl18OVsyLTddKSl8Mig/OjFbMzVdfDJbMzRdfDNbMy01XSlcIl0sXCI4IDAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMi0kMy0kNFwiLFtcIjEoPzpbNTZdfDdbNDY3XSl8MlsxLTNdXCJdLFwiOCAwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDItJDMtJDRcIixbXCJbMS00XVwiXSxcIjggMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Myw0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIls4OV1cIl0sXCI4ICQxXCJdXSxcIjhcIiwwLFwiMHw4MD9cIiwwLDAsMCwwLFwiOH4xMFwiXSxcIkJaXCI6W1wiNTAxXCIsXCIwMFwiLFwiKD86MDgwMFxcXFxkfFsyLThdKVxcXFxkezZ9XCIsWzcsMTFdLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCJbMi04XVwiXV0sW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7NH0pKFxcXFxkezN9KVwiLFwiJDEtJDItJDMtJDRcIixbXCIwXCJdXV1dLFwiQ0FcIjpbXCIxXCIsXCIwMTFcIixcIig/OlsyLThdXFxcXGR8OTApXFxcXGR7OH18M1xcXFxkezZ9XCIsWzcsMTBdLDAsXCIxXCIsMCwwLDAsMCwwLFtbXCIoPzoyKD86MDR8WzIzXTZ8WzQ4XTl8NTB8NjMpfDMoPzowNnw0M3w1NHw2WzU3OF18ODIpfDQoPzowM3wxWzY4XXxbMjZdOHwzWzE3OF18NTB8NzQpfDUoPzowNnwxWzQ5XXw0OHw3OXw4WzE0N10pfDYoPzowNHxbMThdM3wzOXw0N3w3Mil8Nyg/OjBbNTldfDQyfDUzfDc4fDhbMDJdKXw4KD86WzA2XTd8MTl8MjV8NzMpfDkwWzI1XSlbMi05XVxcXFxkezZ9XCIsWzEwXV0sW1wiXCIsWzEwXV0sW1wiOCg/OjAwfDMzfDQ0fDU1fDY2fDc3fDg4KVsyLTldXFxcXGR7Nn1cIixbMTBdXSxbXCI5MDBbMi05XVxcXFxkezZ9XCIsWzEwXV0sW1wiNTIoPzozKD86WzItNDYtOV1bMDItOV1cXFxcZHw1KD86WzAyLTQ2LTldXFxcXGR8NVswLTQ2LTldKSl8NCg/OlsyLTQ3OF1bMDItOV1cXFxcZHw1KD86WzAzNF1cXFxcZHwyWzAyNC05XXw1WzAtNDYtOV0pfDYoPzowWzEtOV18WzItOV1cXFxcZCl8OSg/OlswNS05XVxcXFxkfDJbMC01XXw0OSkpKVxcXFxkezR9fDUyWzM0XVsyLTldMVswMi05XVxcXFxkezR9fCg/OjUoPzowMHwyWzEyNS05XXwzM3w0NHw2Nnw3N3w4OCl8NjIyKVsyLTldXFxcXGR7Nn1cIixbMTBdXSwwLFtcIjMxMFxcXFxkezR9XCIsWzddXSwwLFtcIjYwMFsyLTldXFxcXGR7Nn1cIixbMTBdXV1dLFwiQ0NcIjpbXCI2MVwiLFwiMDAxWzE0LTY4OV18MTQoPzoxWzE0XXwzNHw0WzE3XXxbNTZdNnw3WzQ3XXw4OCkwMDExXCIsXCIxKD86WzAtNzldXFxcXGR7OH0oPzpcXFxcZHsyfSk/fDhbMC0yNC05XVxcXFxkezd9KXxbMTQ4XVxcXFxkezh9fDFcXFxcZHs1LDd9XCIsWzYsNyw4LDksMTAsMTJdLDAsXCIwXCIsMCxcIihbNTldXFxcXGR7N30pJHwwXCIsXCI4JDFcIiwwLDAsW1tcIjgoPzo1MSg/OjAoPzowMnwzMXw2MHw4OSl8MSg/OjE4fDc2KXwyMjMpfDkxKD86MCg/OjFbMC0yXXwyOSl8MSg/OlsyOF0yfDUwfDc5KXwyKD86MTB8NjQpfDMoPzpbMDZdOHwyMil8NFsyOV04fDYyXFxcXGR8NzBbMjNdfDk1OSkpXFxcXGR7M31cIixbOV1dLFtcIjQoPzooPzo3OXw5NClbMDFdfDgzWzAtMzg5XSlcXFxcZHs1fXw0KD86WzAtM11cXFxcZHw0WzA0Ny05XXw1WzAtMjUtOV18NlswMTYtOV18N1swMi04XXw4WzAtMjQtOV18OVswLTM3LTldKVxcXFxkezZ9XCIsWzldXSxbXCIxODAoPzowXFxcXGR7M318MilcXFxcZHszfVwiLFs3LDEwXV0sW1wiMTkwWzAtMjZdXFxcXGR7Nn1cIixbMTBdXSwwLDAsMCwwLFtcIjE0KD86NSg/OjFbMDQ1OF18WzIzXVs0NThdKXw3MVxcXFxkKVxcXFxkezR9XCIsWzldXSxbXCIxMyg/OjAwXFxcXGR7Nn0oPzpcXFxcZHsyfSk/fDQ1WzAtNF1cXFxcZHszfSl8MTNcXFxcZHs0fVwiLFs2LDgsMTAsMTJdXV0sXCIwMDExXCJdLFwiQ0RcIjpbXCIyNDNcIixcIjAwXCIsXCJbMTg5XVxcXFxkezh9fFsxLTY4XVxcXFxkezZ9XCIsWzcsOV0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI4OFwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCJbMS02XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiWzg5XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiQ0ZcIjpbXCIyMzZcIixcIjAwXCIsXCIoPzpbMjddXFxcXGR7M318ODc3NilcXFxcZHs0fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMjc4XVwiXV1dXSxcIkNHXCI6W1wiMjQyXCIsXCIwMFwiLFwiMjIyXFxcXGR7Nn18KD86MFxcXFxkfDgwKVxcXFxkezd9XCIsWzldLFtbXCIoXFxcXGQpKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiOFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlswMl1cIl1dXV0sXCJDSFwiOltcIjQxXCIsXCIwMFwiLFwiOFxcXFxkezExfXxbMi05XVxcXFxkezh9XCIsWzldLFtbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiOFswNDddfDkwXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzItNzldfDgxXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNCAkNVwiLFtcIjhcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkNJXCI6W1wiMjI1XCIsXCIwMFwiLFwiWzAyXVxcXFxkezl9XCIsWzEwXSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGQpKFxcXFxkezV9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCIyXCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjBcIl1dXV0sXCJDS1wiOltcIjY4MlwiLFwiMDBcIixcIlsyLTU3OF1cXFxcZHs0fVwiLFs1XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSlcIixcIiQxICQyXCIsW1wiWzItNTc4XVwiXV1dXSxcIkNMXCI6W1wiNTZcIixcIig/OjB8MSg/OjFbMC02OV18MlswMi01XXw1WzEzLTU4XXw2OXw3WzAxNjddfDhbMDE4XSkpMFwiLFwiMTIzMDBcXFxcZHs2fXw2XFxcXGR7OSwxMH18WzItOV1cXFxcZHs4fVwiLFs5LDEwLDExXSxbW1wiKFxcXFxkezV9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiMjE5XCIsXCIyMTk2XCJdLFwiKCQxKVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiNDRcIl1dLFtcIihcXFxcZCkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIyWzEtMzZdXCJdLFwiKCQxKVwiXSxbXCIoXFxcXGQpKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiOVsyLTldXCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiM1syLTVdfFs0N118NVsxLTM1NzhdfDZbMTMtNTddfDgoPzowWzEtOV18WzEtOV0pXCJdLFwiKCQxKVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCI2MHw4XCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCI2MFwiXV1dXSxcIkNNXCI6W1wiMjM3XCIsXCIwMFwiLFwiWzI2XVxcXFxkezh9fDg4XFxcXGR7Niw3fVwiLFs4LDldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjg4XCJdXSxbXCIoXFxcXGQpKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDQgJDVcIixbXCJbMjZdfDg4XCJdXV1dLFwiQ05cIjpbXCI4NlwiLFwiMDB8MSg/OlsxMl1cXFxcZHw3OSlcXFxcZFxcXFxkMDBcIixcIjFbMTI3XVxcXFxkezgsOX18MlxcXFxkezl9KD86XFxcXGR7Mn0pP3xbMTJdXFxcXGR7Niw3fXw4NlxcXFxkezZ9fCg/OjFbMDMtNjg5XVxcXFxkfDYpXFxcXGR7Nyw5fXwoPzpbMy01NzldXFxcXGR8OFswLTU3LTldKVxcXFxkezYsOX1cIixbNyw4LDksMTAsMTEsMTJdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezUsNn0pXCIsXCIkMSAkMlwiLFtcIig/OjEwfDJbMC01Ny05XSlbMTldXCIsXCIoPzoxMHwyWzAtNTctOV0pKD86MTB8OVs1Nl0pXCIsXCIxMCg/OjEwfDlbNTZdKXwyWzAtNTctOV0oPzoxMDB8OVs1Nl0pXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7NSw2fSlcIixcIiQxICQyXCIsW1wiMyg/OlsxNTddfDM1fDQ5fDlbMS02OF0pfDQoPzpbMTddfDJbMTc5XXw2WzQ3LTldfDhbMjNdKXw1KD86WzEzNTddfDJbMzddfDRbMzZdfDZbMS00Nl18ODApfDYoPzozWzEtNV18NlswMjM4XXw5WzEyXSl8Nyg/OjAxfFsxNTc5XXwyWzI0OF18M1swMTQtOV18NFszLTZdfDZbMDIzNjg5XSl8OCg/OjFbMjM2LThdfDJbNS03XXxbMzddfDhbMzYtOF18OVsxLThdKXw5KD86MFsxLTM2ODldfDFbMS03OV18WzM3OV18NFsxM118NVsxLTVdKXwoPzo0WzM1XXw1OXw4NSlbMS05XVwiLFwiKD86Myg/OlsxNTddXFxcXGR8MzV8NDl8OVsxLTY4XSl8NCg/OlsxN11cXFxcZHwyWzE3OV18WzM1XVsxLTldfDZbNDctOV18OFsyM10pfDUoPzpbMTM1N11cXFxcZHwyWzM3XXw0WzM2XXw2WzEtNDZdfDgwfDlbMS05XSl8Nig/OjNbMS01XXw2WzAyMzhdfDlbMTJdKXw3KD86MDF8WzE1NzldXFxcXGR8MlsyNDhdfDNbMDE0LTldfDRbMy02XXw2WzAyMzY4OV0pfDgoPzoxWzIzNi04XXwyWzUtN118WzM3XVxcXFxkfDVbMS05XXw4WzM2LThdfDlbMS04XSl8OSg/OjBbMS0zNjg5XXwxWzEtNzldfFszNzldXFxcXGR8NFsxM118NVsxLTVdKSlbMTldXCIsXCI4NVsyM10oPzoxMHw5NSl8KD86Myg/OlsxNTddXFxcXGR8MzV8NDl8OVsxLTY4XSl8NCg/OlsxN11cXFxcZHwyWzE3OV18WzM1XVsxLTldfDZbNDctOV18OFsyM10pfDUoPzpbMTM1N11cXFxcZHwyWzM3XXw0WzM2XXw2WzEtNDZdfDgwfDlbMS05XSl8Nig/OjNbMS01XXw2WzAyMzhdfDlbMTJdKXw3KD86MDF8WzE1NzldXFxcXGR8MlsyNDhdfDNbMDE0LTldfDRbMy02XXw2WzAyMzY4OV0pfDgoPzoxWzIzNi04XXwyWzUtN118WzM3XVxcXFxkfDVbMTQtOV18OFszNi04XXw5WzEtOF0pfDkoPzowWzEtMzY4OV18MVsxLTc5XXxbMzc5XVxcXFxkfDRbMTNdfDVbMS01XSkpKD86MTB8OVs1Nl0pXCIsXCI4NVsyM10oPzoxMDB8OTUpfCg/OjMoPzpbMTU3XVxcXFxkfDM1fDQ5fDlbMS02OF0pfDQoPzpbMTddXFxcXGR8MlsxNzldfFszNV1bMS05XXw2WzQ3LTldfDhbMjNdKXw1KD86WzEzNTddXFxcXGR8MlszN118NFszNl18NlsxLTQ2XXw4MHw5WzEtOV0pfDYoPzozWzEtNV18NlswMjM4XXw5WzEyXSl8Nyg/OjAxfFsxNTc5XVxcXFxkfDJbMjQ4XXwzWzAxNC05XXw0WzMtNl18NlswMjM2ODldKXw4KD86MVsyMzYtOF18Mls1LTddfFszN11cXFxcZHw1WzE0LTldfDhbMzYtOF18OVsxLThdKXw5KD86MFsxLTM2ODldfDFbMS03OV18WzM3OV1cXFxcZHw0WzEzXXw1WzEtNV0pKSg/OjEwMHw5WzU2XSlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIig/OjR8ODApMFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjEwfDIoPzpbMDItNTctOV18MVsxLTldKVwiLFwiMTB8Mig/OlswMi01Ny05XXwxWzEtOV0pXCIsXCIxMFswLTc5XXwyKD86WzAyLTU3LTldfDFbMS03OV0pfCg/OjEwfDIxKTgoPzowWzEtOV18WzEtOV0pXCJdLFwiMCQxXCIsMV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjMoPzpbMy01OV18N1swMi02OF0pfDQoPzpbMjYtOF18M1szLTldfDVbMi05XSl8NSg/OjNbMDMtOV18WzQ2OF18N1swMjhdfDlbMi00Ni05XSl8Nnw3KD86WzAtMjQ3XXwzWzA0LTldfDVbMC00Njg5XXw2WzIzNjhdKXw4KD86WzEtMzU4XXw5WzEtN10pfDkoPzpbMDEzNDc5XXw1WzEtNV0pfCg/OlszNF0xfDU1fDc5fDg3KVswMi05XVwiXSxcIjAkMVwiLDFdLFtcIihcXFxcZHszfSkoXFxcXGR7Nyw4fSlcIixcIiQxICQyXCIsW1wiOVwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjgwXCJdLFwiMCQxXCIsMV0sW1wiKFxcXFxkezN9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlszLTU3OF1cIl0sXCIwJDFcIiwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMVszLTldXCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlsxMl1cIl0sXCIwJDFcIiwxXV0sXCIwXCIsMCxcIigxKD86WzEyXVxcXFxkfDc5KVxcXFxkXFxcXGQpfDBcIiwwLDAsMCwwLFwiMDBcIl0sXCJDT1wiOltcIjU3XCIsXCIwMCg/OjQoPzpbMTRdNHw1Nil8WzU3OV0pXCIsXCIoPzo2MFxcXFxkXFxcXGR8OTEwMSlcXFxcZHs2fXwoPzoxXFxcXGR8MylcXFxcZHs5fVwiLFsxMCwxMV0sW1tcIihcXFxcZHszfSkoXFxcXGR7N30pXCIsXCIkMSAkMlwiLFtcIjZcIl0sXCIoJDEpXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7N30pXCIsXCIkMSAkMlwiLFtcIjNbMC0zNTddfDkxXCJdXSxbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHs3fSlcIixcIiQxLSQyLSQzXCIsW1wiMVwiXSxcIjAkMVwiLDAsXCIkMSAkMiAkM1wiXV0sXCIwXCIsMCxcIjAoNCg/OlsxNF00fDU2KXxbNTc5XSk/XCJdLFwiQ1JcIjpbXCI1MDZcIixcIjAwXCIsXCIoPzo4XFxcXGR8OTApXFxcXGR7OH18KD86WzI0LThdXFxcXGR7M318MzAwNSlcXFxcZHs0fVwiLFs4LDEwXSxbW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzItN118OFszLTldXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxLSQyLSQzXCIsW1wiWzg5XVwiXV1dLDAsMCxcIigxOSg/OjBbMC0yNDY4XXwxWzA5XXwyMHw2Nnw3N3w5OSkpXCJdLFwiQ1VcIjpbXCI1M1wiLFwiMTE5XCIsXCJbMjddXFxcXGR7Niw3fXxbMzRdXFxcXGR7NSw3fXwoPzo1fDhcXFxcZFxcXFxkKVxcXFxkezd9XCIsWzYsNyw4LDEwXSxbW1wiKFxcXFxkezJ9KShcXFxcZHs0LDZ9KVwiLFwiJDEgJDJcIixbXCIyWzEtNF18WzM0XVwiXSxcIigwJDEpXCJdLFtcIihcXFxcZCkoXFxcXGR7Niw3fSlcIixcIiQxICQyXCIsW1wiN1wiXSxcIigwJDEpXCJdLFtcIihcXFxcZCkoXFxcXGR7N30pXCIsXCIkMSAkMlwiLFtcIjVcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs3fSlcIixcIiQxICQyXCIsW1wiOFwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiQ1ZcIjpbXCIyMzhcIixcIjBcIixcIig/OlsyLTU5XVxcXFxkXFxcXGR8ODAwKVxcXFxkezR9XCIsWzddLFtbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzXCIsW1wiWzItNTg5XVwiXV1dXSxcIkNXXCI6W1wiNTk5XCIsXCIwMFwiLFwiKD86WzM0XTF8NjB8KD86N3w5XFxcXGQpXFxcXGQpXFxcXGR7NX1cIixbNyw4XSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzM0NjddXCJdXSxbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiOVs0LThdXCJdXV0sMCwwLDAsMCwwLFwiWzY5XVwiXSxcIkNYXCI6W1wiNjFcIixcIjAwMVsxNC02ODldfDE0KD86MVsxNF18MzR8NFsxN118WzU2XTZ8N1s0N118ODgpMDAxMVwiLFwiMSg/OlswLTc5XVxcXFxkezh9KD86XFxcXGR7Mn0pP3w4WzAtMjQtOV1cXFxcZHs3fSl8WzE0OF1cXFxcZHs4fXwxXFxcXGR7NSw3fVwiLFs2LDcsOCw5LDEwLDEyXSwwLFwiMFwiLDAsXCIoWzU5XVxcXFxkezd9KSR8MFwiLFwiOCQxXCIsMCwwLFtbXCI4KD86NTEoPzowKD86MDF8MzB8NTl8ODgpfDEoPzoxN3w0Nnw3NSl8Mig/OjIyfDM1KSl8OTEoPzowMFs2LTldfDEoPzpbMjhdMXw0OXw3OCl8Mig/OjA5fDYzKXwzKD86MTJ8MjZ8NzUpfDQoPzo1Nnw5Nyl8NjRcXFxcZHw3KD86MFswMV18MVswLTJdKXw5NTgpKVxcXFxkezN9XCIsWzldXSxbXCI0KD86KD86Nzl8OTQpWzAxXXw4M1swLTM4OV0pXFxcXGR7NX18NCg/OlswLTNdXFxcXGR8NFswNDctOV18NVswLTI1LTldfDZbMDE2LTldfDdbMDItOF18OFswLTI0LTldfDlbMC0zNy05XSlcXFxcZHs2fVwiLFs5XV0sW1wiMTgwKD86MFxcXFxkezN9fDIpXFxcXGR7M31cIixbNywxMF1dLFtcIjE5MFswLTI2XVxcXFxkezZ9XCIsWzEwXV0sMCwwLDAsMCxbXCIxNCg/OjUoPzoxWzA0NThdfFsyM11bNDU4XSl8NzFcXFxcZClcXFxcZHs0fVwiLFs5XV0sW1wiMTMoPzowMFxcXFxkezZ9KD86XFxcXGR7Mn0pP3w0NVswLTRdXFxcXGR7M30pfDEzXFxcXGR7NH1cIixbNiw4LDEwLDEyXV1dLFwiMDAxMVwiXSxcIkNZXCI6W1wiMzU3XCIsXCIwMFwiLFwiKD86WzI3OV1cXFxcZHxbNThdMClcXFxcZHs2fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiWzI1Ny05XVwiXV1dXSxcIkNaXCI6W1wiNDIwXCIsXCIwMFwiLFwiKD86WzItNTc4XVxcXFxkfDYwKVxcXFxkezd9fDlcXFxcZHs4LDExfVwiLFs5XSxbW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlsyLThdfDlbMDE1LTddXCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjk2XCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjlcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzICQ0XCIsW1wiOVwiXV1dXSxcIkRFXCI6W1wiNDlcIixcIjAwXCIsXCJbMjU3OV1cXFxcZHs1LDE0fXw0OSg/OlszNF0wfDY5fDhcXFxcZClcXFxcZFxcXFxkP3w0OSg/OjM3fDQ5fDYwfDdbMDg5XXw5XFxcXGQpXFxcXGR7MSwzfXw0OSg/OjJbMDI0LTldfDNbMi02ODldfDdbMS03XSlcXFxcZHsxLDh9fCg/OjF8WzM2OF1cXFxcZHw0WzAtOF0pXFxcXGR7MywxM318NDkoPzpbMDE1XVxcXFxkfDJbMTNdfDMxfFs0Nl1bMS04XSlcXFxcZHsxLDl9XCIsWzQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszLDEzfSlcIixcIiQxICQyXCIsW1wiM1swMl18NDB8WzY4XTlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszLDEyfSlcIixcIiQxICQyXCIsW1wiMig/OjBbMS0zODldfDFbMTI0XXwyWzE4XXwzWzE0XSl8Myg/OlszNS05XVsxNV18NFswMTVdKXw5MDZ8KD86Mls0LTldfDRbMi05XXxbNTc5XVsxLTldfFs2OF1bMS04XSkxXCIsXCIyKD86MFsxLTM4OV18MTJbMC04XSl8Myg/OlszNS05XVsxNV18NFswMTVdKXw5MDZ8Mig/OlsxM11bMTRdfDJbMThdKXwoPzoyWzQtOV18NFsyLTldfFs1NzldWzEtOV18WzY4XVsxLThdKTFcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZHsyLDExfSlcIixcIiQxICQyXCIsW1wiWzI0LTZdfDMoPzpbMzU2OV1bMDItNDYtOV18NFsyLTQ2NzldfDdbMi00NjddfDhbMi00Ni04XSl8NzBbMi04XXw4KD86MFsyLTldfFsxLThdKXw5MFs3LTldfFs3OV1bMS05XVwiLFwiWzI0LTZdfDMoPzozKD86MFsxLTQ2N118MlsxMjctOV18M1sxMjQ1NzhdfDdbMTI1Ny05XXw4WzEyNTZdfDlbMTQ1XSl8NCg/OjJbMTM1XXw0WzEzNTc4XXw5WzEzNDZdKXw1KD86MFsxNF18MlsxLTM1ODldfDZbMS00XXw3WzEzNDY4XXw4WzEzNTY4XSl8Nig/OjJbMS00ODldfDNbMTI0LTZdfDZbMTNdfDdbMTI1NzldfDhbMS0zNTZdfDlbMTM1XSl8Nyg/OjJbMS03XXw0WzE0NV18NlsxLTVdfDdbMS00XSl8OCg/OjIxfDNbMTQ2OF18Nnw3WzE0NjddfDhbMTM2XSl8OSg/OjBbMTI0NzldfDJbMTM1OF18NFsxMzQ2NzldfDZbMS05XXw3WzEzNl18OFsxNDddfDlbMTQ2OF0pKXw3MFsyLThdfDgoPzowWzItOV18WzEtOF0pfDkwWzctOV18Wzc5XVsxLTldfDNbNjhdNFsxMzQ3XXwzKD86NDd8NjApWzEzNTZdfDMoPzozWzQ2XXw0Nnw1WzQ5XSlbMTI0Nl18M1s0NTc5XTNbMTM1N11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiMTM4XCJdLFwiMCQxXCJdLFtcIihcXFxcZHs1fSkoXFxcXGR7MiwxMH0pXCIsXCIkMSAkMlwiLFtcIjNcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs1LDExfSlcIixcIiQxICQyXCIsW1wiMTgxXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGQpKFxcXFxkezQsMTB9KVwiLFwiJDEgJDIgJDNcIixbXCIxKD86M3w4MCl8OVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezcsOH0pXCIsXCIkMSAkMlwiLFtcIjFbNjddXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7NywxMn0pXCIsXCIkMSAkMlwiLFtcIjhcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezV9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiMTg1XCIsXCIxODUwXCIsXCIxODUwMFwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiN1wiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezd9KVwiLFwiJDEgJDJcIixbXCIxOFs2OF1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezV9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiMTVbMDU2OF1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZHs3fSlcIixcIiQxICQyXCIsW1wiMTVbMTI3OV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs4fSlcIixcIiQxICQyXCIsW1wiMThcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Nyw4fSlcIixcIiQxICQyICQzXCIsW1wiMSg/OjZbMDIzXXw3KVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezJ9KShcXFxcZHs3fSlcIixcIiQxICQyICQzXCIsW1wiMTVbMjc5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHs4fSlcIixcIiQxICQyICQzXCIsW1wiMTVcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkRKXCI6W1wiMjUzXCIsXCIwMFwiLFwiKD86MlxcXFxkfDc3KVxcXFxkezZ9XCIsWzhdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlsyN11cIl1dXV0sXCJES1wiOltcIjQ1XCIsXCIwMFwiLFwiWzItOV1cXFxcZHs3fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMi05XVwiXV1dXSxcIkRNXCI6W1wiMVwiLFwiMDExXCIsXCIoPzpbNThdXFxcXGRcXFxcZHw3Njd8OTAwKVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsXCIoWzItN11cXFxcZHs2fSkkfDFcIixcIjc2NyQxXCIsMCxcIjc2N1wiXSxcIkRPXCI6W1wiMVwiLFwiMDExXCIsXCIoPzpbNThdXFxcXGRcXFxcZHw5MDApXFxcXGR7N31cIixbMTBdLDAsXCIxXCIsMCwwLDAsMCxcIjgwMDF8OFswMjRdOVwiXSxcIkRaXCI6W1wiMjEzXCIsXCIwMFwiLFwiKD86WzEtNF18WzUtNzldXFxcXGR8ODApXFxcXGR7N31cIixbOCw5XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMS00XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbNS04XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiRUNcIjpbXCI1OTNcIixcIjAwXCIsXCIxXFxcXGR7OSwxMH18KD86WzItN118OVxcXFxkKVxcXFxkezd9XCIsWzgsOSwxMCwxMV0sW1tcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDItJDNcIixbXCJbMi03XVwiXSxcIigwJDEpXCIsMCxcIiQxLSQyLSQzXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI5XCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezMsNH0pXCIsXCIkMSAkMiAkM1wiLFtcIjFcIl1dXSxcIjBcIl0sXCJFRVwiOltcIjM3MlwiLFwiMDBcIixcIjhcXFxcZHs5fXxbNDU3OF1cXFxcZHs3fXwoPzpbMy04XVxcXFxkfDkwKVxcXFxkezV9XCIsWzcsOCwxMF0sW1tcIihcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIlszNjldfDRbMy04XXw1KD86WzAtMl18NVswLTQ3OF18Nls0NV0pfDdbMS05XXw4OFwiLFwiWzM2OV18NFszLThdfDUoPzpbMDJdfDEoPzpbMC04XXw5NSl8NVswLTQ3OF18Nig/OjRbMC00XXw1WzEtNTg5XSkpfDdbMS05XXw4OFwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHszLDR9KVwiLFwiJDEgJDJcIixbXCJbNDVdfDgoPzowMHxbMS00OV0pXCIsXCJbNDVdfDgoPzowMFsxLTldfFsxLTQ5XSlcIl1dLFtcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI3XCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiOFwiXV1dXSxcIkVHXCI6W1wiMjBcIixcIjAwXCIsXCJbMTg5XVxcXFxkezgsOX18WzI0LTZdXFxcXGR7OH18WzEzNV1cXFxcZHs3fVwiLFs4LDksMTBdLFtbXCIoXFxcXGQpKFxcXFxkezcsOH0pXCIsXCIkMSAkMlwiLFtcIlsyM11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs2LDd9KVwiLFwiJDEgJDJcIixbXCIxWzM1XXxbNC02XXw4WzI0NjhdfDlbMjM1LTddXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMTg5XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiRUhcIjpbXCIyMTJcIixcIjAwXCIsXCJbNS04XVxcXFxkezh9XCIsWzldLDAsXCIwXCIsMCwwLDAsMCxcIjUyOFs4OV1cIl0sXCJFUlwiOltcIjI5MVwiLFwiMDBcIixcIlsxNzhdXFxcXGR7Nn1cIixbN10sW1tcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMTc4XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiRVNcIjpbXCIzNFwiLFwiMDBcIixcIls1LTldXFxcXGR7OH1cIixbOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbODldMDBcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzUtOV1cIl1dXV0sXCJFVFwiOltcIjI1MVwiLFwiMDBcIixcIig/OjExfFsyLTU3OV1cXFxcZClcXFxcZHs3fVwiLFs5XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsxLTU3OV1cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkZJXCI6W1wiMzU4XCIsXCIwMHw5OSg/OlswMTQ2OV18NSg/OlsxNF0xfDNbMjNdfDVbNTldfDc3fDg4fDlbMDldKSlcIixcIlsxLTM1Njg5XVxcXFxkezR9fDdcXFxcZHsxMCwxMX18KD86WzEyNC03XVxcXFxkfDNbMC00Ni05XSlcXFxcZHs4fXxbMS05XVxcXFxkezUsOH1cIixbNSw2LDcsOCw5LDEwLDExLDEyXSxbW1wiKFxcXFxkKShcXFxcZHs0LDl9KVwiLFwiJDEgJDJcIixbXCJbMjU2OF1bMS04XXwzKD86MFsxLTldfFsxLTldKXw5XCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Myw3fSlcIixcIiQxICQyXCIsW1wiWzEyXTAwfFszNjhdfDcwWzA3LTldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7NCw4fSlcIixcIiQxICQyXCIsW1wiWzEyNDVdfDdbMTM1XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezYsMTB9KVwiLFwiJDEgJDJcIixbXCI3XCJdLFwiMCQxXCJdXSxcIjBcIiwwLDAsMCwwLFwiMVswMy03OV18WzItOV1cIiwwLFwiMDBcIl0sXCJGSlwiOltcIjY3OVwiLFwiMCg/OjB8NTIpXCIsXCI0NVxcXFxkezV9fCg/OjA4MDBcXFxcZHxbMjM1LTldKVxcXFxkezZ9XCIsWzcsMTFdLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMjM1LTldfDQ1XCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMFwiXV1dLDAsMCwwLDAsMCwwLDAsXCIwMFwiXSxcIkZLXCI6W1wiNTAwXCIsXCIwMFwiLFwiWzItN11cXFxcZHs0fVwiLFs1XV0sXCJGTVwiOltcIjY5MVwiLFwiMDBcIixcIig/OlszOV1cXFxcZFxcXFxkfDgyMClcXFxcZHs0fVwiLFs3XSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzM4OV1cIl1dXV0sXCJGT1wiOltcIjI5OFwiLFwiMDBcIixcIlsyLTldXFxcXGR7NX1cIixbNl0sW1tcIihcXFxcZHs2fSlcIixcIiQxXCIsW1wiWzItOV1cIl1dXSwwLDAsXCIoMTAoPzowMXxbMTJdMHw4OCkpXCJdLFwiRlJcIjpbXCIzM1wiLFwiMDBcIixcIlsxLTldXFxcXGR7OH1cIixbOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiOFwiXSxcIjAgJDFcIl0sW1wiKFxcXFxkKShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0ICQ1XCIsW1wiWzEtNzldXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJHQVwiOltcIjI0MVwiLFwiMDBcIixcIig/OlswNjddXFxcXGR8MTEpXFxcXGR7Nn18WzItN11cXFxcZHs2fVwiLFs3LDhdLFtbXCIoXFxcXGQpKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlsyLTddXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiMFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCIxMXxbNjddXCJdLFwiMCQxXCJdXSwwLDAsXCIwKDExXFxcXGR7Nn18NjBcXFxcZHs2fXw2MVxcXFxkezZ9fDZbMjU2XVxcXFxkezZ9fDdbNDY3XVxcXFxkezZ9KVwiLFwiJDFcIl0sXCJHQlwiOltcIjQ0XCIsXCIwMFwiLFwiWzEtMzU3LTldXFxcXGR7OX18WzE4XVxcXFxkezh9fDhcXFxcZHs2fVwiLFs3LDksMTBdLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCI4MDBcIixcIjgwMDFcIixcIjgwMDExXCIsXCI4MDAxMTFcIixcIjgwMDExMTFcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkM1wiLFtcIjg0NVwiLFwiODQ1NFwiLFwiODQ1NDZcIixcIjg0NTQ2NFwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezZ9KVwiLFwiJDEgJDJcIixbXCI4MDBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezV9KShcXFxcZHs0LDV9KVwiLFwiJDEgJDJcIixbXCIxKD86Mzh8NVsyM118Njl8NzZ8OTQpXCIsXCIxKD86KD86Mzh8NjkpN3w1KD86MjR8MzkpfDc2OHw5NDYpXCIsXCIxKD86Mzg3M3w1KD86MjQyfDM5WzQtNl0pfCg/OjY5N3w3NjgpWzM0N118OTQ2NylcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZHs1LDZ9KVwiLFwiJDEgJDJcIixbXCIxKD86WzItNjldWzAyLTldfFs3OF0pXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjVdfDcoPzowfDZbMDItOV0pXCIsXCJbMjVdfDcoPzowfDYoPzpbMDMtOV18MlszNTZdKSlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiN1wiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzEzODldXCJdLFwiMCQxXCJdXSxcIjBcIiwwLDAsMCwwLDAsW1tcIig/OjEoPzoxKD86Myg/OlswLTU4XVxcXFxkXFxcXGR8NzNbMDIzNV0pfDQoPzpbMC01XVxcXFxkXFxcXGR8NjlbNy05XXw3MFswLTU3OV0pfCg/Oig/OjVbMC0yNi05XXxbNzhdWzAtNDldKVxcXFxkfDYoPzpbMC00XVxcXFxkfDUwKSlcXFxcZCl8KD86Mig/Oig/OjBbMDI0LTldfDJbMy05XXwzWzMtNzldfDRbMS02ODldfFs1OF1bMDItOV18NlswLTQ3LTldfDdbMDEzLTldfDlcXFxcZClcXFxcZHwxKD86WzAtN11cXFxcZHw4WzAtMl0pKXwoPzozKD86MFxcXFxkfDFbMC04XXxbMjVdWzAyLTldfDNbMDItNTc5XXxbNDY4XVswLTQ2LTldfDdbMS0zNS03OV18OVsyLTU3OF0pfDQoPzowWzAzLTldfFsxMzddXFxcXGR8WzI4XVswMi01Ny05XXw0WzAyLTY5XXw1WzAtOF18WzY5XVswLTc5XSl8NSg/OjBbMS0zNS05XXxbMTZdXFxcXGR8MlswMjQtOV18M1swMTU2ODldfDRbMDItOV18NVswMy05XXw3WzAtMzUtOV18OFswLTQ2OF18OVswLTU3LTldKXw2KD86MFswMzQ2ODldfDFcXFxcZHwyWzAtMzU2ODldfFszOF1bMDEzLTldfDRbMS00NjddfDVbMC02OV18NlsxMy05XXw3WzAtOF18OVswLTI0NTc4XSl8Nyg/OjBbMDI0Ni05XXwyXFxcXGR8M1swMjM2LThdfDRbMDMtOV18NVswLTQ2LTldfDZbMDEzLTldfDdbMC0zNS05XXw4WzAyNC05XXw5WzAyLTldKXw4KD86MFszNS05XXwyWzEtNTctOV18M1swMi01NzhdfDRbMC01NzhdfDVbMTI0LTldfDZbMi02OV18N1xcXFxkfDhbMDItOV18OVswMjU2OV0pfDkoPzowWzAyLTU4OV18WzE4XVxcXFxkfDJbMDItNjg5XXwzWzEtNTctOV18NFsyLTldfDVbMC01NzldfDZbMi00Ny05XXw3WzAtMjQ1NzhdfDlbMi01N10pKVxcXFxkKVxcXFxkKXwyKD86MFswMTM0NzhdfDNbMDE4OV18NFswMTddfDhbMC00Ni05XXw5WzAtMl0pXFxcXGR7M30pXFxcXGR7NH18MSg/OjIoPzowKD86NDZbMS00XXw4N1syLTldKXw1NDVbMS03OV18NzYoPzoyXFxcXGR8M1sxLThdfDZbMS02XSl8OSg/OjcoPzoyWzAtNF18M1syLTVdKXw4KD86MlsyLThdfDdbMC00Ny05XXw4WzMtNV0pKSl8Myg/OjYoPzozOFsyLTVdfDQ3WzIzXSl8OCg/OjQ3WzA0LTldfDY0WzAxNTctOV0pKXw0KD86MDQ0WzEtN118MjAoPzoyWzIzXXw4XFxcXGQpfDYoPzowKD86MzB8NVsyLTU3XXw2WzEtOF18N1syLThdKXwxNDApfDgoPzowNTJ8ODdbMS0zXSkpfDUoPzoyKD86NCg/OjNbMi03OV18NlxcXFxkKXw3NlxcXFxkKXw2KD86MjZbMDYtOV18Njg2KSl8Nig/OjA2KD86NFxcXFxkfDdbNC03OV0pfDI5NVs1LTddfDM1WzM0XVxcXFxkfDQ3KD86MjR8NjEpfDU5KD86NVswOF18Nls2N118NzQpfDkoPzo1NVswLTRdfDc3WzIzXSkpfDcoPzoyNig/OjZbMTMtOV18N1swLTddKXwoPzo0NDJ8Njg4KVxcXFxkfDUwKD86MlswLTNdfFszLTY4XTJ8NzYpKXw4KD86MjdbNTZdXFxcXGR8MzcoPzo1WzItNV18OFsyMzldKXw4NDNbMi01OF0pfDkoPzowKD86MCg/OjZbMS04XXw4NSl8NTJcXFxcZCl8MzU4M3w0KD86NjZbMS04XXw5KD86MlswMV18ODEpKXw2Myg/OjIzfDNbMS00XSl8OTU2MSkpXFxcXGR7M31cIixbOSwxMF1dLFtcIjcoPzo0NTdbMC01Ny05XXw3MDBbMDFdfDkxMVswMjhdKVxcXFxkezV9fDcoPzpbMS0zXVxcXFxkXFxcXGR8NCg/OlswLTQ2LTldXFxcXGR8NVswLTY4OV0pfDUoPzowWzAtOF18WzEzLTldXFxcXGR8MlswLTM1LTldKXw3KD86MFsxLTldfFsxLTddXFxcXGR8OFswMi05XXw5WzAtNjg5XSl8OCg/OlswMTQtOV1cXFxcZHxbMjNdWzAtOF0pfDkoPzpbMDI0LTldXFxcXGR8MVswMi05XXwzWzAtNjg5XSkpXFxcXGR7Nn1cIixbMTBdXSxbXCI4MFswOF1cXFxcZHs3fXw4MDBcXFxcZHs2fXw4MDAxMTExXCJdLFtcIig/OjgoPzo0WzItNV18N1swLTNdKXw5KD86WzAxXVxcXFxkfDhbMi00OV0pKVxcXFxkezd9fDg0NTQ2NFxcXFxkXCIsWzcsMTBdXSxbXCI3MFxcXFxkezh9XCIsWzEwXV0sMCxbXCIoPzozWzAzNDddfDU1KVxcXFxkezh9XCIsWzEwXV0sW1wiNzYoPzo0NjR8NjUyKVxcXFxkezV9fDc2KD86MFswLTI4XXwyWzM1Nl18MzR8NFswMTM0N118NVs0OV18NlswLTM2OV18Nzd8OFsxNF18OVsxMzldKVxcXFxkezZ9XCIsWzEwXV0sW1wiNTZcXFxcZHs4fVwiLFsxMF1dXSwwLFwiIHhcIl0sXCJHRFwiOltcIjFcIixcIjAxMVwiLFwiKD86NDczfFs1OF1cXFxcZFxcXFxkfDkwMClcXFxcZHs3fVwiLFsxMF0sMCxcIjFcIiwwLFwiKFsyLTldXFxcXGR7Nn0pJHwxXCIsXCI0NzMkMVwiLDAsXCI0NzNcIl0sXCJHRVwiOltcIjk5NVwiLFwiMDBcIixcIig/OlszLTU3XVxcXFxkXFxcXGR8ODAwKVxcXFxkezZ9XCIsWzldLFtbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiNzBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCIzMlwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIls1N11cIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzM0OF1cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkdGXCI6W1wiNTk0XCIsXCIwMFwiLFwiWzU2XTk0XFxcXGR7Nn18KD86ODB8OVxcXFxkKVxcXFxkezd9XCIsWzldLFtbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIls1Nl18OVs0N11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbODldXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJHR1wiOltcIjQ0XCIsXCIwMFwiLFwiKD86MTQ4MXxbMzU3LTldXFxcXGR7M30pXFxcXGR7Nn18OFxcXFxkezZ9KD86XFxcXGR7Mn0pP1wiLFs3LDksMTBdLDAsXCIwXCIsMCxcIihbMjUtOV1cXFxcZHs1fSkkfDBcIixcIjE0ODEkMVwiLDAsMCxbW1wiMTQ4MVsyNS05XVxcXFxkezV9XCIsWzEwXV0sW1wiNyg/Oig/Ojc4MXw4MzkpXFxcXGR8OTExWzE3XSlcXFxcZHs1fVwiLFsxMF1dLFtcIjgwWzA4XVxcXFxkezd9fDgwMFxcXFxkezZ9fDgwMDExMTFcIl0sW1wiKD86OCg/OjRbMi01XXw3WzAtM10pfDkoPzpbMDFdXFxcXGR8OFswLTNdKSlcXFxcZHs3fXw4NDU0NjRcXFxcZFwiLFs3LDEwXV0sW1wiNzBcXFxcZHs4fVwiLFsxMF1dLDAsW1wiKD86M1swMzQ3XXw1NSlcXFxcZHs4fVwiLFsxMF1dLFtcIjc2KD86NDY0fDY1MilcXFxcZHs1fXw3Nig/OjBbMC0yOF18MlszNTZdfDM0fDRbMDEzNDddfDVbNDldfDZbMC0zNjldfDc3fDhbMTRdfDlbMTM5XSlcXFxcZHs2fVwiLFsxMF1dLFtcIjU2XFxcXGR7OH1cIixbMTBdXV1dLFwiR0hcIjpbXCIyMzNcIixcIjAwXCIsXCIoPzpbMjM1XVxcXFxkezN9fDgwMClcXFxcZHs1fVwiLFs4LDldLFtbXCIoXFxcXGR7M30pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCI4XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjM1XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiR0lcIjpbXCIzNTBcIixcIjAwXCIsXCIoPzpbMjVdXFxcXGR8NjApXFxcXGR7Nn1cIixbOF0sW1tcIihcXFxcZHszfSkoXFxcXGR7NX0pXCIsXCIkMSAkMlwiLFtcIjJcIl1dXV0sXCJHTFwiOltcIjI5OVwiLFwiMDBcIixcIig/OjE5fFsyLTY4OV1cXFxcZHw3MClcXFxcZHs0fVwiLFs2XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkM1wiLFtcIjE5fFsyLTldXCJdXV1dLFwiR01cIjpbXCIyMjBcIixcIjAwXCIsXCJbMi05XVxcXFxkezZ9XCIsWzddLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMi05XVwiXV1dXSxcIkdOXCI6W1wiMjI0XCIsXCIwMFwiLFwiNzIyXFxcXGR7Nn18KD86M3w2XFxcXGQpXFxcXGR7N31cIixbOCw5XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCIzXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIls2N11cIl1dXV0sXCJHUFwiOltcIjU5MFwiLFwiMDBcIixcIjU5MFxcXFxkezZ9fCg/OjY5fDgwfDlcXFxcZClcXFxcZHs3fVwiLFs5XSxbW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbNTY5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjhcIl0sXCIwJDFcIl1dLFwiMFwiLDAsMCwwLDAsMCxbW1wiNTkwKD86MFsxLTY4XXxbMTRdWzAtMjQtOV18MlswLTY4XXwzWzEyODldfDVbMy01NzldfFs2OF1bMC02ODldfDdbMDhdfDlcXFxcZClcXFxcZHs0fVwiXSxbXCI2OSg/OjBcXFxcZFxcXFxkfDEoPzoyWzItOV18M1swLTVdKSlcXFxcZHs0fVwiXSxbXCI4MFswLTVdXFxcXGR7Nn1cIl0sMCwwLDAsMCwwLFtcIjkoPzooPzozOTV8NzZbMDE4XSlcXFxcZHw0NzVbMC0yXSlcXFxcZHs0fVwiXV1dLFwiR1FcIjpbXCIyNDBcIixcIjAwXCIsXCIyMjJcXFxcZHs2fXwoPzozXFxcXGR8NTV8Wzg5XTApXFxcXGR7N31cIixbOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjM1XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiWzg5XVwiXV1dXSxcIkdSXCI6W1wiMzBcIixcIjAwXCIsXCI1MDA1MDAwXFxcXGR7M318OFxcXFxkezksMTF9fCg/OlsyNjldXFxcXGR8NzApXFxcXGR7OH1cIixbMTAsMTEsMTJdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMjF8N1wiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiMig/OjJ8M1syLTU3LTldfDRbMi00NjldfDVbMi01OV18NlsyLTldfDdbMi02OV18OFsyLTQ5XSl8NVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsyNjg5XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszLDR9KShcXFxcZHs1fSlcIixcIiQxICQyICQzXCIsW1wiOFwiXV1dXSxcIkdUXCI6W1wiNTAyXCIsXCIwMFwiLFwiKD86MVxcXFxkezN9fFsyLTddKVxcXFxkezd9XCIsWzgsMTFdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMi03XVwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjFcIl1dXV0sXCJHVVwiOltcIjFcIixcIjAxMVwiLFwiKD86WzU4XVxcXFxkXFxcXGR8NjcxfDkwMClcXFxcZHs3fVwiLFsxMF0sMCxcIjFcIiwwLFwiKFszLTldXFxcXGR7Nn0pJHwxXCIsXCI2NzEkMVwiLDAsXCI2NzFcIl0sXCJHV1wiOltcIjI0NVwiLFwiMDBcIixcIls0OV1cXFxcZHs4fXw0XFxcXGR7Nn1cIixbNyw5XSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiNDBcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbNDldXCJdXV1dLFwiR1lcIjpbXCI1OTJcIixcIjAwMVwiLFwiOTAwOFxcXFxkezN9fCg/OlsyLTQ2N11cXFxcZFxcXFxkfDg2MilcXFxcZHs0fVwiLFs3XSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzItNDYtOV1cIl1dXV0sXCJIS1wiOltcIjg1MlwiLFwiMDAoPzozMHw1WzA5XXxbMTI2LTldPylcIixcIjhbMC00Ni05XVxcXFxkezYsN318OVxcXFxkezQsN318KD86WzItN118OVxcXFxkezN9KVxcXFxkezd9XCIsWzUsNiw3LDgsOSwxMV0sW1tcIihcXFxcZHszfSkoXFxcXGR7Miw1fSlcIixcIiQxICQyXCIsW1wiOTAwXCIsXCI5MDAzXCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMi03XXw4WzEtNF18OSg/OjBbMS05XXxbMS04XSlcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI4XCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjlcIl1dXSwwLDAsMCwwLDAsMCwwLFwiMDBcIl0sXCJITlwiOltcIjUwNFwiLFwiMDBcIixcIjhcXFxcZHsxMH18WzIzNy05XVxcXFxkezd9XCIsWzgsMTFdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCJbMjM3LTldXCJdXV1dLFwiSFJcIjpbXCIzODVcIixcIjAwXCIsXCIoPzpbMjQtNjldXFxcXGR8M1swLTc5XSlcXFxcZHs3fXw4MFxcXFxkezUsN318WzEtNzldXFxcXGR7N318NlxcXFxkezUsNn1cIixbNiw3LDgsOV0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezIsM30pXCIsXCIkMSAkMiAkM1wiLFtcIjZbMDFdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezIsM30pXCIsXCIkMSAkMiAkM1wiLFtcIjhcIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHs0fSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjFcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiWzY3XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCI5XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezMsNH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsyLTVdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI4XCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJIVFwiOltcIjUwOVwiLFwiMDBcIixcIig/OlsyLTQ4OV1cXFxcZHw1NSlcXFxcZHs2fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsyLTU4OV1cIl1dXV0sXCJIVVwiOltcIjM2XCIsXCIwMFwiLFwiWzIzNS03XVxcXFxkezh9fFsxLTldXFxcXGR7N31cIixbOCw5XSxbW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjFcIl0sXCIoMDYgJDEpXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjddWzItOV18M1syLTddfDRbMjQtOV18NVsyLTc5XXw2fDhbMi01Ny05XXw5WzItNjldXCJdLFwiKDA2ICQxKVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMi05XVwiXSxcIjA2ICQxXCJdXSxcIjA2XCJdLFwiSURcIjpbXCI2MlwiLFwiMDBbODldXCIsXCIoPzooPzowMFsxLTldfDhcXFxcZClcXFxcZHs0fXxbMS0zNl0pXFxcXGR7Nn18MDBcXFxcZHsxMH18WzEtOV1cXFxcZHs4LDEwfXxbMi05XVxcXFxkezd9XCIsWzcsOCw5LDEwLDExLDEyLDEzXSxbW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjE1XCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezUsOX0pXCIsXCIkMSAkMlwiLFtcIjJbMTI0XXxbMzZdMVwiXSxcIigwJDEpXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7NSw3fSlcIixcIiQxICQyXCIsW1wiODAwXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7NSw4fSlcIixcIiQxICQyXCIsW1wiWzItNzldXCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszLDR9KShcXFxcZHszfSlcIixcIiQxLSQyLSQzXCIsW1wiOFsxLTM1LTldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Niw4fSlcIixcIiQxICQyXCIsW1wiMVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiODA0XCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzICQ0XCIsW1wiODBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs0fSkoXFxcXGR7NCw1fSlcIixcIiQxLSQyLSQzXCIsW1wiOFwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiSUVcIjpbXCIzNTNcIixcIjAwXCIsXCIoPzoxXFxcXGR8WzI1NjldKVxcXFxkezYsOH18NFxcXFxkezYsOX18N1xcXFxkezh9fDhcXFxcZHs4LDl9XCIsWzcsOCw5LDEwXSxbW1wiKFxcXFxkezJ9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiMlsyNC05XXw0N3w1OHw2WzIzNy05XXw5WzM1LTldXCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiWzQ1XTBcIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGQpKFxcXFxkezMsNH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIxXCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiWzI1NjldfDRbMS02OV18N1sxNF1cIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiNzBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjgxXCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIls3OF1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjFcIl1dLFtcIihcXFxcZHsyfSkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI0XCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezJ9KShcXFxcZCkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCI4XCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJJTFwiOltcIjk3MlwiLFwiMCg/OjB8MVsyLTldKVwiLFwiMVxcXFxkezZ9KD86XFxcXGR7Myw1fSk/fFs1N11cXFxcZHs4fXxbMS00ODldXFxcXGR7N31cIixbNyw4LDksMTAsMTEsMTJdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezN9KVwiLFwiJDEtJDJcIixbXCIxMjVcIl1dLFtcIihcXFxcZHs0fSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEtJDItJDNcIixbXCIxMjFcIl1dLFtcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDItJDNcIixbXCJbMi00ODldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDItJDNcIixbXCJbNTddXCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEtJDItJDNcIixbXCIxMlwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs2fSlcIixcIiQxLSQyXCIsW1wiMTU5XCJdXSxbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMS0kMi0kMy0kNFwiLFtcIjFbNy05XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHsxLDJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMS0kMiAkMy0kNFwiLFtcIjE1XCJdXV0sXCIwXCJdLFwiSU1cIjpbXCI0NFwiLFwiMDBcIixcIjE2MjRcXFxcZHs2fXwoPzpbMzU3OF1cXFxcZHw5MClcXFxcZHs4fVwiLFsxMF0sMCxcIjBcIiwwLFwiKFsyNS04XVxcXFxkezV9KSR8MFwiLFwiMTYyNCQxXCIsMCxcIjc0NTc2fCg/OjE2fDdbNTZdKTI0XCJdLFwiSU5cIjpbXCI5MVwiLFwiMDBcIixcIig/OjAwMDgwMHxbMi05XVxcXFxkXFxcXGQpXFxcXGR7N318MVxcXFxkezcsMTJ9XCIsWzgsOSwxMCwxMSwxMiwxM10sW1tcIihcXFxcZHs4fSlcIixcIiQxXCIsW1wiNSg/OjB8MlsyM118M1swM118WzY3XTF8ODgpXCIsXCI1KD86MHwyKD86MjF8Myl8Myg/OjB8M1syM10pfDYxNnw3MTd8ODg4KVwiLFwiNSg/OjB8Mig/OjIxfDMpfDMoPzowfDNbMjNdKXw2MTZ8NzE3fDg4ODgpXCJdLDAsMV0sW1wiKFxcXFxkezR9KShcXFxcZHs0LDV9KVwiLFwiJDEgJDJcIixbXCIxODBcIixcIjE4MDBcIl0sMCwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMTQwXCJdLDAsMV0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjExfDJbMDJdfDMzfDRbMDRdfDc5WzEtN118ODBbMi00Nl1cIixcIjExfDJbMDJdfDMzfDRbMDRdfDc5KD86WzEtNl18N1sxOV0pfDgwKD86WzItNF18NlswLTU4OV0pXCIsXCIxMXwyWzAyXXwzM3w0WzA0XXw3OSg/OlsxMjQtNl18Myg/OlswMi05XXwxWzAtMjQtOV0pfDcoPzoxfDlbMS02XSkpfDgwKD86WzItNF18NlswLTU4OV0pXCJdLFwiMCQxXCIsMV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjEoPzoyWzAtMjQ5XXwzWzAtMjVdfDRbMTQ1XXxbNjhdfDdbMTI1N10pfDIoPzoxWzI1N118M1swMTNdfDRbMDFdfDVbMDEzN118NlswMTU4XXw3OHw4WzE1NjhdKXwzKD86MjZ8NFsxLTNdfDVbMzRdfDZbMDE0ODldfDdbMDItNDZdfDhbMTU5XSl8NCg/OjFbMzZdfDJbMS00N118NVsxMl18NlswLTI2LTldfDdbMC0yNC05XXw4WzAxMy01N118OVswMTQtN10pfDUoPzoxWzAyNV18MjJ8WzM2XVsyNV18NFsyOF18NVsxMl18Wzc4XTEpfDYoPzoxMnxbMi00XTF8NVsxN118NlsxM118ODApfDcoPzoxMnwzWzEzNF18NFs0N118NjF8ODgpfDgoPzoxNnwyWzAxNF18M1sxMjZdfDZbMTM2XXw3WzA3OF18OFszNF18OTEpfCg/OjQzfDU5fDc1KVsxNV18KD86MVs1OV18Mjl8Njd8NzIpWzE0XVwiLFwiMSg/OjJbMC0yNF18M1swLTI1XXw0WzE0NV18WzU5XVsxNF18NlsxLTldfDdbMTI1N118OFsxLTU3LTldKXwyKD86MVsyNTddfDNbMDEzXXw0WzAxXXw1WzAxMzddfDZbMDU4XXw3OHw4WzE1NjhdfDlbMTRdKXwzKD86MjZ8NFsxLTNdfDVbMzRdfDZbMDE0ODldfDdbMDItNDZdfDhbMTU5XSl8NCg/OjFbMzZdfDJbMS00N118M1sxNV18NVsxMl18NlswLTI2LTldfDdbMC0yNC05XXw4WzAxMy01N118OVswMTQtN10pfDUoPzoxWzAyNV18MjJ8WzM2XVsyNV18NFsyOF18WzU3OF0xfDlbMTVdKXw2NzR8Nyg/Oig/OjJbMTRdfDNbMzRdfDVbMTVdKVsyLTZdfDYxWzM0Nl18ODhbMC04XSl8OCg/OjcwWzItNl18ODRbMjM1LTddfDkxWzMtN10pfCg/OjEoPzoyOXw2MHw4WzA2XSl8MjYxfDU1Mnw2KD86MTJ8WzItNDddMXw1WzE3XXw2WzEzXXw4MCl8Nyg/OjEyfDMxfDRbNDddKXw4KD86MTZ8MlswMTRdfDNbMTI2XXw2WzEzNl18N1s3OF18ODMpKVsyLTddXCIsXCIxKD86MlswLTI0XXwzWzAtMjVdfDRbMTQ1XXxbNTldWzE0XXw2WzEtOV18N1sxMjU3XXw4WzEtNTctOV0pfDIoPzoxWzI1N118M1swMTNdfDRbMDFdfDVbMDEzN118NlswNThdfDc4fDhbMTU2OF18OVsxNF0pfDMoPzoyNnw0WzEtM118NVszNF18NlswMTQ4OV18N1swMi00Nl18OFsxNTldKXw0KD86MVszNl18MlsxLTQ3XXwzWzE1XXw1WzEyXXw2WzAtMjYtOV18N1swLTI0LTldfDhbMDEzLTU3XXw5WzAxNC03XSl8NSg/OjFbMDI1XXwyMnxbMzZdWzI1XXw0WzI4XXxbNTc4XTF8OVsxNV0pfDYoPzoxMig/OlsyLTZdfDdbMC04XSl8NzRbMi03XSl8Nyg/Oig/OjJbMTRdfDVbMTVdKVsyLTZdfDMxNzF8NjFbMzQ2XXw4OCg/OlsyLTddfDgyKSl8OCg/OjcwWzItNl18ODQoPzpbMjM1Nl18N1sxOV0pfDkxKD86WzMtNl18N1sxOV0pKXw3M1sxMzRdWzItNl18KD86NzRbNDddfDgoPzoxNnwyWzAxNF18M1sxMjZdfDZbMTM2XXw3Wzc4XXw4MykpKD86WzItNl18N1sxOV0pfCg/OjEoPzoyOXw2MHw4WzA2XSl8MjYxfDU1Mnw2KD86WzItNF0xfDVbMTddfDZbMTNdfDcoPzoxfDRbMDE4OV0pfDgwKXw3KD86MTJ8ODhbMDFdKSlbMi03XVwiXSxcIjAkMVwiLDFdLFtcIihcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIxKD86WzItNDc5XXw1WzAyMzUtOV0pfFsyLTVdfDYoPzoxWzEzNThdfDJbMjQ1Ny05XXwzWzItNV18NFsyMzUtN118NVsyLTY4OV18NlsyNDU3OF18N1syMzU2ODldfDhbMS02XSl8Nyg/OjFbMDEzLTldfDI4fDNbMTI5XXw0WzEtMzU2ODldfDVbMjldfDZbMDItNV18NzApfDgwN1wiLFwiMSg/OlsyLTQ3OV18NVswMjM1LTldKXxbMi01XXw2KD86MVsxMzU4XXwyKD86WzI0NTddfDg0fDk1KXwzKD86WzItNF18NTUpfDRbMjM1LTddfDVbMi02ODldfDZbMjQ1NzhdfDdbMjM1Njg5XXw4WzEtNl0pfDcoPzoxKD86WzAxMy04XXw5WzYtOV0pfDI4WzYtOF18Myg/OjE3fDJbMC00OV18OVsyLTU3XSl8NCg/OjFbMi00XXxbMjldWzAtN118M1swLThdfFs1Nl18OFswLTI0LTddKXw1KD86MlsxLTNdfDlbMC02XSl8Nig/OjBbNTY4OV18Mls1LTldfDNbMDItOF18NHw1WzAtMzY3XSl8NzBbMTMtN10pfDgwN1sxOV1cIixcIjEoPzpbMi00NzldfDUoPzpbMDIzNi05XXw1WzAxMy05XSkpfFsyLTVdfDYoPzoyKD86ODR8OTUpfDM1NXw4Myl8NzMxNzl8ODA3KD86MXw5WzEtM10pfCg/OjE1NTJ8Nig/OjFbMTM1OF18MlsyNDU3XXwzWzItNF18NFsyMzUtN118NVsyLTY4OV18NlsyNDU3OF18N1syMzU2ODldfDhbMTI0LTZdKVxcXFxkfDcoPzoxKD86WzAxMy04XVxcXFxkfDlbNi05XSl8MjhbNi04XXwzKD86MlswLTQ5XXw5WzItNTddKXw0KD86MVsyLTRdfFsyOV1bMC03XXwzWzAtOF18WzU2XVxcXFxkfDhbMC0yNC03XSl8NSg/OjJbMS0zXXw5WzAtNl0pfDYoPzowWzU2ODldfDJbNS05XXwzWzAyLThdfDRcXFxcZHw1WzAtMzY3XSl8NzBbMTMtN10pKVsyLTddXCJdLFwiMCQxXCIsMV0sW1wiKFxcXFxkezV9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiWzYtOV1cIl0sXCIwJDFcIiwxXSxbXCIoXFxcXGR7NH0pKFxcXFxkezIsNH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIxKD86Nnw4WzA2XSlcIixcIjEoPzo2fDhbMDZdMClcIl0sMCwxXSxbXCIoXFxcXGR7NH0pKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjE4XCJdLDAsMV1dLFwiMFwiXSxcIklPXCI6W1wiMjQ2XCIsXCIwMFwiLFwiM1xcXFxkezZ9XCIsWzddLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCIzXCJdXV1dLFwiSVFcIjpbXCI5NjRcIixcIjAwXCIsXCIoPzoxfDdcXFxcZFxcXFxkKVxcXFxkezd9fFsyLTZdXFxcXGR7Nyw4fVwiLFs4LDksMTBdLFtbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMi02XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiN1wiXSxcIjAkMVwiXV0sXCIwXCJdLFwiSVJcIjpbXCI5OFwiLFwiMDBcIixcIlsxLTldXFxcXGR7OX18KD86WzEtOF1cXFxcZFxcXFxkfDkpXFxcXGR7Myw0fVwiLFs0LDUsNiw3LDEwXSxbW1wiKFxcXFxkezQsNX0pXCIsXCIkMVwiLFtcIjk2XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7NCw1fSlcIixcIiQxICQyXCIsW1wiKD86MVsxMzddfDJbMTMtNjhdfDNbMTQ1OF18NFsxNDVdfDVbMTQ2OF18NlsxNl18N1sxNDY3XXw4WzEzNDY3XSlbMTI2ODldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezMsNH0pXCIsXCIkMSAkMiAkM1wiLFtcIjlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsxLThdXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJJU1wiOltcIjM1NFwiLFwiMDB8MSg/OjAoPzowMXxbMTJdMCl8MTAwKVwiLFwiKD86MzhcXFxcZHxbNC05XSlcXFxcZHs2fVwiLFs3LDldLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbNC05XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjNcIl1dXSwwLDAsMCwwLDAsMCwwLFwiMDBcIl0sXCJJVFwiOltcIjM5XCIsXCIwMFwiLFwiMFxcXFxkezUsMTB9fDFcXFxcZHs4LDEwfXwzKD86WzAtOF1cXFxcZHs3LDEwfXw5XFxcXGR7Nyw4fSl8KD86NTV8NzApXFxcXGR7OH18OFxcXFxkezV9KD86XFxcXGR7Miw0fSk/XCIsWzYsNyw4LDksMTAsMTFdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezQsNn0pXCIsXCIkMSAkMlwiLFtcIjBbMjZdXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezMsNn0pXCIsXCIkMSAkMlwiLFtcIjBbMTMtNTctOV1bMDE1OV18OCg/OjAzfDRbMTddfDlbMi01XSlcIixcIjBbMTMtNTctOV1bMDE1OV18OCg/OjAzfDRbMTddfDkoPzoyfDNbMDRdfFs0NV1bMC00XSkpXCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkezIsNn0pXCIsXCIkMSAkMlwiLFtcIjAoPzpbMTMtNTc5XVsyLTQ2LThdfDhbMjM2LThdKVwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiODk0XCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezMsNH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIwWzI2XXw1XCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCIxKD86NDR8WzY3OV0pfFszNzhdXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezMsNH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIwWzEzLTU3LTldWzAxNTldfDE0XCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezR9KShcXFxcZHs1fSlcIixcIiQxICQyICQzXCIsW1wiMFsyNl1cIl1dLFtcIihcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIwXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KShcXFxcZHs0LDV9KVwiLFwiJDEgJDIgJDNcIixbXCIzXCJdXV0sMCwwLDAsMCwwLDAsW1tcIjA2NjlbMC03OV1cXFxcZHsxLDZ9fDAoPzoxKD86WzAxNTldXFxcXGR8WzI3XVsxLTVdfDMxfDRbMS00XXw2WzEzNTZdfDhbMi01N10pfDJcXFxcZFxcXFxkfDMoPzpbMDE1OV1cXFxcZHwyWzEtNF18M1sxMl18WzQ4XVsxLTZdfDZbMi01OV18N1sxLTddKXw0KD86WzAxNTldXFxcXGR8WzIzXVsxLTldfDRbMjQ1XXw2WzEtNV18N1sxLTRdfDgxKXw1KD86WzAxNTldXFxcXGR8MlsxLTVdfDNbMi02XXw0WzEtNzldfDZbNC02XXw3WzEtNTc4XXw4WzMtOF0pfDYoPzpbMC01Ny05XVxcXFxkfDZbMC04XSl8Nyg/OlswMTU5XVxcXFxkfDJbMTJdfDNbMS03XXw0WzItNDZdfDZbMTM1NjldfDdbMTMtNl18OFsxLTU5XSl8OCg/OlswMTU5XVxcXFxkfDJbMy01NzhdfDNbMS0zNTZdfFs2LThdWzEtNV0pfDkoPzpbMDE1OV1cXFxcZHxbMjM4XVsxLTVdfDRbMTJdfDZbMS04XXw3WzEtNl0pKVxcXFxkezIsN31cIl0sW1wiM1sxLTldXFxcXGR7OH18M1syLTldXFxcXGR7N31cIixbOSwxMF1dLFtcIjgwKD86MFxcXFxkezN9fDMpXFxcXGR7M31cIixbNiw5XV0sW1wiKD86MDg3OFxcXFxkezN9fDg5KD86MlxcXFxkfDNbMDRdfDQoPzpbMC00XXxbNS05XVxcXFxkXFxcXGQpfDVbMC00XSkpXFxcXGRcXFxcZHwoPzoxKD86NDR8NlszNDZdKXw4OSg/OjM4fDVbNS05XXw5KSlcXFxcZHs2fVwiLFs2LDgsOSwxMF1dLFtcIjEoPzo3OFxcXFxkfDk5KVxcXFxkezZ9XCIsWzksMTBdXSwwLDAsMCxbXCI1NVxcXFxkezh9XCIsWzEwXV0sW1wiODQoPzpbMDhdXFxcXGR7M318WzE3XSlcXFxcZHszfVwiLFs2LDldXV1dLFwiSkVcIjpbXCI0NFwiLFwiMDBcIixcIjE1MzRcXFxcZHs2fXwoPzpbMzU3OF1cXFxcZHw5MClcXFxcZHs4fVwiLFsxMF0sMCxcIjBcIiwwLFwiKFswLTI0LThdXFxcXGR7NX0pJHwwXCIsXCIxNTM0JDFcIiwwLDAsW1tcIjE1MzRbMC0yNC04XVxcXFxkezV9XCJdLFtcIjcoPzooPzooPzo1MHw4Mik5fDkzNylcXFxcZHw3KD86MDBbMzc4XXw5N1s3LTldKSlcXFxcZHs1fVwiXSxbXCI4MCg/OjA3KD86MzV8ODEpfDg5MDEpXFxcXGR7NH1cIl0sW1wiKD86OCg/OjQoPzo0KD86NCg/OjA1fDQyfDY5KXw3MDMpfDUoPzowNDF8ODAwKSl8Nyg/OjAwMDJ8MTIwNikpfDkwKD86MDY2WzU5XXwxODEwfDcxKD86MDd8NTUpKSlcXFxcZHs0fVwiXSxbXCI3MDE1MTFcXFxcZHs0fVwiXSwwLFtcIig/OjMoPzowKD86MDcoPzozNXw4MSl8ODkwMSl8M1xcXFxkezR9fDQoPzo0KD86NCg/OjA1fDQyfDY5KXw3MDMpfDUoPzowNDF8ODAwKSl8Nyg/OjAwMDJ8MTIwNikpfDU1XFxcXGR7NH0pXFxcXGR7NH1cIl0sW1wiNzYoPzo0NjR8NjUyKVxcXFxkezV9fDc2KD86MFswLTI4XXwyWzM1Nl18MzR8NFswMTM0N118NVs0OV18NlswLTM2OV18Nzd8OFsxNF18OVsxMzldKVxcXFxkezZ9XCJdLFtcIjU2XFxcXGR7OH1cIl1dXSxcIkpNXCI6W1wiMVwiLFwiMDExXCIsXCIoPzpbNThdXFxcXGRcXFxcZHw2NTh8OTAwKVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsMCwwLDAsXCI2NTh8ODc2XCJdLFwiSk9cIjpbXCI5NjJcIixcIjAwXCIsXCIoPzooPzpbMjY4OV18N1xcXFxkKVxcXFxkfDMyfDUzKVxcXFxkezZ9XCIsWzgsOV0sW1tcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjM1Nl18ODdcIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezUsNn0pXCIsXCIkMSAkMlwiLFtcIls4OV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs3fSlcIixcIiQxICQyXCIsW1wiNzBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjdcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkpQXCI6W1wiODFcIixcIjAxMFwiLFwiMDBbMS05XVxcXFxkezYsMTR9fFsyNTctOV1cXFxcZHs5fXwoPzowMHxbMS05XVxcXFxkXFxcXGQpXFxcXGR7Nn1cIixbOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3XSxbW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMS0kMi0kM1wiLFtcIig/OjEyfDU3fDk5KTBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZCkoXFxcXGR7NH0pXCIsXCIkMS0kMi0kM1wiLFtcIjEoPzoyNnwzWzc5XXw0WzU2XXw1WzQtNjhdfDZbMy01XSl8NDk5fDUoPzo3Nnw5Nyl8NzQ2fDgoPzozWzg5XXw0N3w1MXw2Myl8OSg/OjgwfDlbMTZdKVwiLFwiMSg/OjI2N3wzKD86N1syNDddfDlbMjc4XSl8NDY2fDUoPzo0N3w1OHw2NCl8Nig/OjNbMjQ1XXw0OHw1WzQtNjhdKSl8NDk5WzI0NjhdfDUoPzo3Nnw5Nyk5fDc0Njh8OCg/OjMoPzo4WzctOV18OTYpfDQ3N3w1MVsyLTldfDYzNil8OSg/OjgwMnw5KD86MVsyM118NjkpKXwxKD86NDV8NTgpWzY3XVwiLFwiMSg/OjI2N3wzKD86N1syNDddfDlbMjc4XSl8NDY2fDUoPzo0N3w1OHw2NCl8Nig/OjNbMjQ1XXw0OHw1WzQtNjhdKSl8NDk5WzI0NjhdfDUoPzo3Njl8OTc5WzItNjldKXw3NDY4fDgoPzozKD86OFs3LTldfDk2WzI0NTctOV0pfDQ3N3w1MVsyLTldfDYzNls0NTctOV0pfDkoPzo4MDJ8OSg/OjFbMjNdfDY5KSl8MSg/OjQ1fDU4KVs2N11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMS0kMi0kM1wiLFtcIjYwXCJdLFwiMCQxXCJdLFtcIihcXFxcZCkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEtJDItJDNcIixbXCJbMzZdfDQoPzoyWzA5XXw3WzAxXSlcIixcIlszNl18NCg/OjIoPzowfDlbMDItNjldKXw3KD86MFswMTldfDEpKVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxLSQyLSQzXCIsW1wiMSg/OjF8NVs0NV18Nzd8ODh8OVs2OV0pfDIoPzoyWzEtMzddfDNbMC0yNjldfDRbNTldfDV8NlsyNF18N1sxLTM1OF18OFsxMzY5XXw5WzAtMzhdKXw0KD86WzI4XVsxLTldfDNbMC01N118WzQ1XXw2WzI0OF18N1syLTU3OV18OVsyOV0pfDUoPzoyfDNbMDQ1XXw0WzAtMzY5XXw1WzI5XXw4WzAyMzg5XXw5WzAtMzg5XSl8Nyg/OjJbMDItNDYtOV18MzR8WzU4XXw2WzAyNDldfDdbNTddfDlbMi02XSl8OCg/OjJbMTI0NTg5XXwzWzI3LTldfDQ5fDUxfDZ8N1swLTQ2OF18OFs2OF18OVswMTldKXw5KD86WzIzXVsxLTldfDRbMTVdfDVbMTM4XXw2WzEtM118N1sxNTZdfDhbMTg5XXw5WzEtNDg5XSlcIixcIjEoPzoxfDUoPzo0WzAxOF18NVswMTddKXw3N3w4OHw5WzY5XSl8Mig/OjIoPzpbMTI3XXwzWzAxNC05XSl8M1swLTI2OV18NFs1OV18NSg/OlsxLTNdfDVbMC02OV18OVsxOV0pfDYyfDcoPzpbMS0zNV18OFswMTg5XSl8OCg/OlsxNl18M1swMTM0XXw5WzAtNV0pfDkoPzpbMDI4XXwxNykpfDQoPzoyKD86WzEzLTc5XXw4WzAxNC02XSl8M1swLTU3XXxbNDVdfDZbMjQ4XXw3WzItNDddfDhbMS05XSl8NSg/OjJ8M1swNDVdfDRbMC0zNjldfDhbMDIzODldfDlbMC0zXSl8Nyg/OjJbMDItNDYtOV18MzR8WzU4XXw2WzAyNDldfDdbNTddfDkoPzpbMjNdfDRbMC01OV18NVswMTU2OV18NlswMTY3XSkpfDgoPzoyKD86WzEyNThdfDRbMC0zOV18OVswLTI0NjldKXw0OXw1MXw2KD86WzAtMjRdfDM2fDVbMC0zNTg5XXw3Mnw5WzAxNDU5XSl8N1swLTQ2OF18OFs2OF0pfDkoPzpbMjNdWzEtOV18NFsxNV18NVsxMzhdfDZbMS0zXXw3WzE1Nl18OFsxODldfDkoPzpbMTI4OV18M1szNF18NFswMTc4XSkpfCg/OjQ5fDU1fDgzKVsyOV18KD86MjY0fDgzNylbMDE2LTldfDIoPzo1N3w5MylbMDE1LTldfCg/OjI1WzA0NjhdfDQyMnw4MzgpWzAxXXwoPzo0N1s1OV18NTlbODldfDgoPzo2WzY4XXw5KSlbMDE5XVwiLFwiMSg/OjF8NSg/OjRbMDE4XXw1WzAxN10pfDc3fDg4fDlbNjldKXwyKD86MlsxMjddfDNbMC0yNjldfDRbNTldfDUoPzpbMS0zXXw1WzAtNjldfDkoPzoxN3w5OSkpfDYoPzoyfDRbMDE2LTldKXw3KD86WzEtMzVdfDhbMDE4OV0pfDgoPzpbMTZdfDNbMDEzNF18OVswLTVdKXw5KD86WzAyOF18MTcpKXw0KD86Mig/OlsxMy03OV18OFswMTQtNl0pfDNbMC01N118WzQ1XXw2WzI0OF18N1syLTQ3XXw5WzI5XSl8NSg/OjJ8M1swNDVdfDRbMC0zNjldfDVbMjldfDhbMDIzODldfDlbMC0zXSl8Nyg/OjJbMDItNDYtOV18MzR8WzU4XXw2WzAyNDldfDdbNTddfDkoPzpbMjNdfDRbMC01OV18NVswMTU2OV18NlswMTY3XSkpfDgoPzoyKD86WzEyNThdfDRbMC0zOV18OVswMTY5XSl8Myg/OlsyOV18Nyg/OlswMTctOV18Nls2LThdKSl8NDl8NTF8Nig/OlswLTI0XXwzNlsyM118NSg/OlswLTM4OV18NVsyM10pfDYoPzpbMDFdfDlbMTc4XSl8NzJ8OVswMTQ1XSl8N1swLTQ2OF18OFs2OF0pfDkoPzo0WzE1XXw1WzEzOF18N1sxNTZdfDhbMTg5XXw5KD86WzEyODldfDMoPzozMXw0WzM1N10pfDRbMDE3OF0pKXwoPzo4Mjk0fDk2KVsxLTNdfDIoPzo1N3w5MylbMDE1LTldfCg/OjIyM3w4Njk5KVswMTQtOV18KD86MjVbMDQ2OF18NDIyfDgzOClbMDFdfCg/OjQ4fDgyOTJ8OVsyM10pWzEtOV18KD86NDdbNTldfDU5Wzg5XXw4KD86Njh8OSkpWzAxOV1cIixcIjEoPzoxfDUoPzo0WzAxOF18NVswMTddKXw3N3w4OHw5WzY5XSl8Mig/OjJbMTI3XXwzWzAtMjY5XXw0WzU5XXw1KD86WzEtM118NVswLTY5XXw3WzAxNS05XXw5KD86MTd8OTkpKXw2KD86Mnw0WzAxNi05XSl8Nyg/OlsxLTM1XXw4WzAxODldKXw4KD86WzE2XXwzWzAxMzRdfDlbMC01XSl8OSg/OlswMjhdfDE3fDNbMDE1LTldKSl8NCg/OjIoPzpbMTMtNzldfDhbMDE0LTZdKXwzWzAtNTddfFs0NV18NlsyNDhdfDdbMi00N118OVsyOV0pfDUoPzoyfDNbMDQ1XXw0WzAtMzY5XXw1WzI5XXw4WzAyMzg5XXw5WzAtM10pfDcoPzoyWzAyLTQ2LTldfDM0fFs1OF18NlswMjQ5XXw3WzU3XXw5KD86WzIzXXw0WzAtNTldfDVbMDE1NjldfDZbMDE2N10pKXw4KD86Mig/OlsxMjU4XXw0WzAtMzldfDkoPzpbMDE5XXw0WzEtM118Nig/OlswLTQ3LTldfDVbMDEzNDYtOV0pKSl8Myg/OlsyOV18Nyg/OlswMTctOV18Nls2LThdKSl8NDl8NTF8Nig/OlswLTI0XXwzNlsyM118NSg/OlswLTM4OV18NVsyM10pfDYoPzpbMDFdfDlbMTc4XSl8NzJ8OVswMTQ1XSl8N1swLTQ2OF18OFs2OF0pfDkoPzo0WzE1XXw1WzEzOF18NlsxLTNdfDdbMTU2XXw4WzE4OV18OSg/OlsxMjg5XXwzKD86MzF8NFszNTddKXw0WzAxNzhdKSl8KD86MjIzfDg2OTkpWzAxNC05XXwoPzoyNVswNDY4XXw0MjJ8ODM4KVswMV18KD86NDh8ODI5KD86Mnw2Nil8OVsyM10pWzEtOV18KD86NDdbNTldfDU5Wzg5XXw4KD86Njh8OSkpWzAxOV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7NH0pXCIsXCIkMS0kMi0kM1wiLFtcIlsxNF18WzI4OV1bMi05XXw1WzMtOV18N1syLTQ2NzldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDItJDNcIixbXCI4MDBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMS0kMi0kM1wiLFtcIlsyNTctOV1cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIktFXCI6W1wiMjU0XCIsXCIwMDBcIixcIig/OlsxN11cXFxcZFxcXFxkfDkwMClcXFxcZHs2fXwoPzoyfDgwKTBcXFxcZHs2LDd9fFs0LTZdXFxcXGR7Niw4fVwiLFs3LDgsOSwxMF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7NSw3fSlcIixcIiQxICQyXCIsW1wiWzI0LTZdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Nn0pXCIsXCIkMSAkMlwiLFtcIlsxN11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiWzg5XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiS0dcIjpbXCI5OTZcIixcIjAwXCIsXCI4XFxcXGR7OX18KD86WzIzNS04XVxcXFxkfDk5KVxcXFxkezd9XCIsWzksMTBdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCIzKD86MVszNDZdfFsyNC03OV0pXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjM1LTc5XXw4OFwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZCkoXFxcXGR7MiwzfSlcIixcIiQxICQyICQzICQ0XCIsW1wiOFwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiS0hcIjpbXCI4NTVcIixcIjAwWzE0LTldXCIsXCIxXFxcXGR7OX18WzEtOV1cXFxcZHs3LDh9XCIsWzgsOSwxMF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezMsNH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsxLTldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIxXCJdXV0sXCIwXCJdLFwiS0lcIjpbXCI2ODZcIixcIjAwXCIsXCIoPzpbMzddXFxcXGR8NlswLTc5XSlcXFxcZHs2fXwoPzpbMi00OF1cXFxcZHw1MClcXFxcZHszfVwiLFs1LDhdLDAsXCIwXCJdLFwiS01cIjpbXCIyNjlcIixcIjAwXCIsXCJbMzQ3OF1cXFxcZHs2fVwiLFs3XSxbW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkM1wiLFtcIlszNDc4XVwiXV1dXSxcIktOXCI6W1wiMVwiLFwiMDExXCIsXCIoPzpbNThdXFxcXGRcXFxcZHw5MDApXFxcXGR7N31cIixbMTBdLDAsXCIxXCIsMCxcIihbMi03XVxcXFxkezZ9KSR8MVwiLFwiODY5JDFcIiwwLFwiODY5XCJdLFwiS1BcIjpbXCI4NTBcIixcIjAwfDk5XCIsXCI4NVxcXFxkezZ9fCg/OjE5XFxcXGR8WzItN10pXFxcXGR7N31cIixbOCwxMF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI4XCJdLFwiMCQxXCJdLFtcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMi03XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiS1JcIjpbXCI4MlwiLFwiMDAoPzpbMTI1Njg5XXwzKD86WzQ2XTV8OTEpfDcoPzowMHwyN3wzfDU1fDZbMTI2XSkpXCIsXCIwMFsxLTldXFxcXGR7OCwxMX18KD86WzEyXXw1XFxcXGR7M30pXFxcXGR7N318WzEzLTZdXFxcXGR7OX18KD86WzEtNl1cXFxcZHw4MClcXFxcZHs3fXxbMy02XVxcXFxkezQsNX18KD86MDB8NykwXFxcXGR7OH1cIixbNSw2LDgsOSwxMCwxMSwxMiwxMywxNF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Myw0fSlcIixcIiQxLSQyXCIsW1wiKD86M1sxLTNdfFs0Nl1bMS00XXw1WzEtNV0pMVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCIxXCJdXSxbXCIoXFxcXGQpKFxcXFxkezMsNH0pKFxcXFxkezR9KVwiLFwiJDEtJDItJDNcIixbXCIyXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDItJDNcIixbXCI2MHw4XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7Myw0fSkoXFxcXGR7NH0pXCIsXCIkMS0kMi0kM1wiLFtcIlsxMzQ2XXw1WzEtNV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMS0kMi0kM1wiLFtcIls1N11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs1fSkoXFxcXGR7NH0pXCIsXCIkMS0kMi0kM1wiLFtcIjVcIl0sXCIwJDFcIl1dLFwiMFwiLDAsXCIwKDgoPzpbMS00Ni04XXw1XFxcXGRcXFxcZCkpP1wiXSxcIktXXCI6W1wiOTY1XCIsXCIwMFwiLFwiMThcXFxcZHs1fXwoPzpbMjU2OV1cXFxcZHw0MSlcXFxcZHs2fVwiLFs3LDhdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezMsNH0pXCIsXCIkMSAkMlwiLFtcIlsxNjldfDIoPzpbMjM1XXw0WzEtMzUtOV0pfDUyXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCJbMjQ1XVwiXV1dXSxcIktZXCI6W1wiMVwiLFwiMDExXCIsXCIoPzozNDV8WzU4XVxcXFxkXFxcXGR8OTAwKVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsXCIoWzItOV1cXFxcZHs2fSkkfDFcIixcIjM0NSQxXCIsMCxcIjM0NVwiXSxcIktaXCI6W1wiN1wiLFwiODEwXCIsXCIoPzozMzYyMnw4XFxcXGR7OH0pXFxcXGR7NX18Wzc4XVxcXFxkezl9XCIsWzEwLDE0XSwwLFwiOFwiLDAsMCwwLDAsXCIzM3w3XCIsMCxcIjh+MTBcIl0sXCJMQVwiOltcIjg1NlwiLFwiMDBcIixcIlsyM11cXFxcZHs5fXwzXFxcXGR7OH18KD86WzIzNS04XVxcXFxkfDQxKVxcXFxkezZ9XCIsWzgsOSwxMF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIyWzEzXXwzWzE0XXxbNC04XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjMwWzAxMy05XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlsyM11cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIkxCXCI6W1wiOTYxXCIsXCIwMFwiLFwiWzI3LTldXFxcXGR7N318WzEzLTldXFxcXGR7Nn1cIixbNyw4XSxbW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlsxMy02OV18Nyg/OlsyLTU3XXw2Mnw4WzAtN118OVswNC05XSl8OFswMi05XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiWzI3LTldXCJdXV0sXCIwXCJdLFwiTENcIjpbXCIxXCIsXCIwMTFcIixcIig/Ols1OF1cXFxcZFxcXFxkfDc1OHw5MDApXFxcXGR7N31cIixbMTBdLDAsXCIxXCIsMCxcIihbMi04XVxcXFxkezZ9KSR8MVwiLFwiNzU4JDFcIiwwLFwiNzU4XCJdLFwiTElcIjpbXCI0MjNcIixcIjAwXCIsXCJbNjhdXFxcXGR7OH18KD86WzIzNzhdXFxcXGR8OTApXFxcXGR7NX1cIixbNyw5XSxbW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkM1wiLFtcIlsyMzc5XXw4KD86MFswOV18NylcIixcIlsyMzc5XXw4KD86MCg/OjAyfDkpfDcpXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiOFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjY5XCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiNlwiXV1dLFwiMFwiLDAsXCIoMTAwMSl8MFwiXSxcIkxLXCI6W1wiOTRcIixcIjAwXCIsXCJbMS05XVxcXFxkezh9XCIsWzldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiN1wiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiWzEtNjg5XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiTFJcIjpbXCIyMzFcIixcIjAwXCIsXCIoPzpbMjVdXFxcXGR8MzN8Nzd8ODgpXFxcXGR7N318KD86MlxcXFxkfFs0LTZdKVxcXFxkezZ9XCIsWzcsOCw5XSxbW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIls0LTZdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIyXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjM1NzhdXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJMU1wiOltcIjI2NlwiLFwiMDBcIixcIig/OlsyNTZdXFxcXGRcXFxcZHw4MDApXFxcXGR7NX1cIixbOF0sW1tcIihcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIlsyNTY4XVwiXV1dXSxcIkxUXCI6W1wiMzcwXCIsXCIwMFwiLFwiKD86WzM0NjldXFxcXGR8NTJ8Wzc4XTApXFxcXGR7Nn1cIixbOF0sW1tcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI1MlswLTddXCJdLFwiKDgtJDEpXCIsMV0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIls3LTldXCJdLFwiOCAkMVwiLDFdLFtcIihcXFxcZHsyfSkoXFxcXGR7Nn0pXCIsXCIkMSAkMlwiLFtcIjM3fDQoPzpbMTVdfDZbMS04XSlcIl0sXCIoOC0kMSlcIiwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCJbMy02XVwiXSxcIig4LSQxKVwiLDFdXSxcIjhcIiwwLFwiWzA4XVwiXSxcIkxVXCI6W1wiMzUyXCIsXCIwMFwiLFwiMzVbMDEzLTldXFxcXGR7NCw4fXw2XFxcXGR7OH18MzVcXFxcZHsyLDR9fCg/OlsyNDU3LTldXFxcXGR8M1swLTQ2LTldKVxcXFxkezIsOX1cIixbNCw1LDYsNyw4LDksMTAsMTFdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KVwiLFwiJDEgJDJcIixbXCIyKD86MFsyLTY4OV18WzItOV0pfFszLTU3XXw4KD86MFsyLTldfFsxMy05XSl8OSg/OjBbODldfFsyLTU3OV0pXCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzXCIsW1wiMig/OjBbMi02ODldfFsyLTldKXxbMy01N118OCg/OjBbMi05XXxbMTMtOV0pfDkoPzowWzg5XXxbMi01NzldKVwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjIwWzItNjg5XVwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezEsMn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjIoPzpbMDM2N118NFszLThdKVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjgwWzAxXXw5MFswMTVdXCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjIwXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiNlwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsxLDJ9KVwiLFwiJDEgJDIgJDMgJDQgJDVcIixbXCIyKD86WzAzNjddfDRbMy04XSlcIl1dLFtcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsxLDV9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMy01N118OFsxMy05XXw5KD86MFs4OV18WzItNTc5XSl8KD86Mnw4MClbMi05XVwiXV1dLDAsMCxcIigxNSg/OjBbMDZdfDFbMTJdfFszNV01fDRbMDRdfDZbMjZdfDc3fDg4fDk5KVxcXFxkKVwiXSxcIkxWXCI6W1wiMzcxXCIsXCIwMFwiLFwiKD86WzI2OF1cXFxcZHw5MClcXFxcZHs2fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlsyNjldfDhbMDFdXCJdXV1dLFwiTFlcIjpbXCIyMThcIixcIjAwXCIsXCJbMi05XVxcXFxkezh9XCIsWzldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezd9KVwiLFwiJDEtJDJcIixbXCJbMi05XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiTUFcIjpbXCIyMTJcIixcIjAwXCIsXCJbNS04XVxcXFxkezh9XCIsWzldLFtbXCIoXFxcXGR7NX0pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCI1KD86Mjl8MzgpXCIsXCI1KD86MjlbMTI4OV18Mzg5KVwiLFwiNTI5KD86MVsxLTQ2LTldfDJbMDEzLThdfDkwKXw1KD86Mjk4fDM4OSlbMC00Ni05XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjVbNDVdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7NX0pXCIsXCIkMS0kMlwiLFtcIjUoPzoyWzItNDg5XXwzWzUtOV18OSl8ODkyXCIsXCI1KD86Mig/OlsyLTQ5XXw4WzIzNS05XSl8M1s1LTldfDkpfDg5MlwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezd9KVwiLFwiJDEtJDJcIixbXCI4XCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Nn0pXCIsXCIkMS0kMlwiLFtcIls1LTddXCJdLFwiMCQxXCJdXSxcIjBcIiwwLDAsMCwwLDAsW1tcIjUyOTNbMDFdXFxcXGR7NH18NSg/OjIoPzpbMC0yNS03XVxcXFxkfDNbMS01NzhdfDRbMDItNDYtOF18OFswMjM1LTddfDlbMC0yODldKXwzKD86WzAtNDddXFxcXGR8NVswMi05XXw2WzAyLThdfDhbMDE4OV18OVszLTldKXwoPzo0WzA2N118NVswM10pXFxcXGQpXFxcXGR7NX1cIl0sW1wiKD86Nig/OlswLTc5XVxcXFxkfDhbMC0yNDctOV0pfDcoPzpbMDE3XVxcXFxkfDJbMC0yXXw2WzAtOF18OFswLTNdKSlcXFxcZHs2fVwiXSxbXCI4MFxcXFxkezd9XCJdLFtcIjg5XFxcXGR7N31cIl0sMCwwLDAsMCxbXCI1OTIoPzo0WzAtMl18OTMpXFxcXGR7NH1cIl1dXSxcIk1DXCI6W1wiMzc3XCIsXCIwMFwiLFwiKD86WzM0ODldfDZcXFxcZClcXFxcZHs3fVwiLFs4LDldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiNFwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlszODldXCJdXSxbXCIoXFxcXGQpKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDQgJDVcIixbXCI2XCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJNRFwiOltcIjM3M1wiLFwiMDBcIixcIig/OlsyMzUtN11cXFxcZHxbODldMClcXFxcZHs2fVwiLFs4XSxbW1wiKFxcXFxkezN9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiWzg5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiMjJ8M1wiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiWzI1LTddXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJNRVwiOltcIjM4MlwiLFwiMDBcIixcIig/OjIwfFszLTc5XVxcXFxkKVxcXFxkezZ9fDgwXFxcXGR7Niw3fVwiLFs4LDldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMi05XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiTUZcIjpbXCI1OTBcIixcIjAwXCIsXCI1OTBcXFxcZHs2fXwoPzo2OXw4MHw5XFxcXGQpXFxcXGR7N31cIixbOV0sMCxcIjBcIiwwLDAsMCwwLDAsW1tcIjU5MCg/OjBbMDc5XXxbMTRdM3xbMjddWzc5XXwzMHw1WzAtMjY4XXw4NylcXFxcZHs0fVwiXSxbXCI2OSg/OjBcXFxcZFxcXFxkfDEoPzoyWzItOV18M1swLTVdKSlcXFxcZHs0fVwiXSxbXCI4MFswLTVdXFxcXGR7Nn1cIl0sMCwwLDAsMCwwLFtcIjkoPzooPzozOTV8NzZbMDE4XSlcXFxcZHw0NzVbMC0yXSlcXFxcZHs0fVwiXV1dLFwiTUdcIjpbXCIyNjFcIixcIjAwXCIsXCJbMjNdXFxcXGR7OH1cIixbOV0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzIzXVwiXSxcIjAkMVwiXV0sXCIwXCIsMCxcIihbMjQtOV1cXFxcZHs2fSkkfDBcIixcIjIwJDFcIl0sXCJNSFwiOltcIjY5MlwiLFwiMDExXCIsXCIzMjlcXFxcZHs0fXwoPzpbMjU2XVxcXFxkfDQ1KVxcXFxkezV9XCIsWzddLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCJbMi02XVwiXV1dLFwiMVwiXSxcIk1LXCI6W1wiMzg5XCIsXCIwMFwiLFwiWzItNTc4XVxcXFxkezd9XCIsWzhdLFtbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMnwzNFs0N118NCg/OlszN103fDVbNDddfDY0KVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiWzM0N11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZCkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbNThdXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJNTFwiOltcIjIyM1wiLFwiMDBcIixcIlsyNC05XVxcXFxkezd9XCIsWzhdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlsyNC05XVwiXV1dXSxcIk1NXCI6W1wiOTVcIixcIjAwXCIsXCIxXFxcXGR7NSw3fXw5NVxcXFxkezZ9fCg/Ols0LTddfDlbMC00Ni05XSlcXFxcZHs2LDh9fCg/OjJ8OFxcXFxkKVxcXFxkezUsOH1cIixbNiw3LDgsOSwxMF0sW1tcIihcXFxcZCkoXFxcXGR7Mn0pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIxNnwyXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbNDVdfDYoPzowWzIzXXxbMS02ODldfDdbMjM1LTddKXw3KD86WzAtNF18NVsyLTddKXw4WzEtNl1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiWzEyXVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbNC03XXw4WzEtMzVdXCJdLFwiMCQxXCJdLFtcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezQsNn0pXCIsXCIkMSAkMiAkM1wiLFtcIjkoPzoyWzAtNF18WzM1LTldfDRbMTM3LTldKVwiXSxcIjAkMVwiXSxbXCIoXFxcXGQpKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMlwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiOFwiXSxcIjAkMVwiXSxbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjkyXCJdLFwiMCQxXCJdLFtcIihcXFxcZCkoXFxcXGR7NX0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI5XCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJNTlwiOltcIjk3NlwiLFwiMDAxXCIsXCJbMTJdXFxcXGR7Nyw5fXxbNS05XVxcXFxkezd9XCIsWzgsOSwxMF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMTJdMVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbNS05XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHs1LDZ9KVwiLFwiJDEgJDJcIixbXCJbMTJdMlsxLTNdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7NSw2fSlcIixcIiQxICQyXCIsW1wiWzEyXSg/OjI3fDNbMi04XXw0WzItNjhdfDVbMS00Njg5XSlcIixcIlsxMl0oPzoyN3wzWzItOF18NFsyLTY4XXw1WzEtNDY4OV0pWzAtM11cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezV9KShcXFxcZHs0LDV9KVwiLFwiJDEgJDJcIixbXCJbMTJdXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJNT1wiOltcIjg1M1wiLFwiMDBcIixcIjA4MDBcXFxcZHszfXwoPzoyOHxbNjhdXFxcXGQpXFxcXGR7Nn1cIixbNyw4XSxbW1wiKFxcXFxkezR9KShcXFxcZHszfSlcIixcIiQxICQyXCIsW1wiMFwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzI2OF1cIl1dXV0sXCJNUFwiOltcIjFcIixcIjAxMVwiLFwiWzU4XVxcXFxkezl9fCg/OjY3fDkwKTBcXFxcZHs3fVwiLFsxMF0sMCxcIjFcIiwwLFwiKFsyLTldXFxcXGR7Nn0pJHwxXCIsXCI2NzAkMVwiLDAsXCI2NzBcIl0sXCJNUVwiOltcIjU5NlwiLFwiMDBcIixcIjU5NlxcXFxkezZ9fCg/OjY5fDgwfDlcXFxcZClcXFxcZHs3fVwiLFs5XSxbW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbNTY5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjhcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIk1SXCI6W1wiMjIyXCIsXCIwMFwiLFwiKD86WzItNF1cXFxcZFxcXFxkfDgwMClcXFxcZHs1fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMi00OF1cIl1dXV0sXCJNU1wiOltcIjFcIixcIjAxMVwiLFwiKD86WzU4XVxcXFxkXFxcXGR8NjY0fDkwMClcXFxcZHs3fVwiLFsxMF0sMCxcIjFcIiwwLFwiKFszNF1cXFxcZHs2fSkkfDFcIixcIjY2NCQxXCIsMCxcIjY2NFwiXSxcIk1UXCI6W1wiMzU2XCIsXCIwMFwiLFwiMzU1MFxcXFxkezR9fCg/OlsyNTc5XVxcXFxkXFxcXGR8ODAwKVxcXFxkezV9XCIsWzhdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMjM1Ny05XVwiXV1dXSxcIk1VXCI6W1wiMjMwXCIsXCIwKD86MHxbMjQtN10wfDNbMDNdKVwiLFwiKD86WzU3XXw4XFxcXGRcXFxcZClcXFxcZHs3fXxbMi00NjhdXFxcXGR7Nn1cIixbNyw4LDEwXSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzItNDZdfDhbMDEzXVwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzU3XVwiXV0sW1wiKFxcXFxkezV9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiOFwiXV1dLDAsMCwwLDAsMCwwLDAsXCIwMjBcIl0sXCJNVlwiOltcIjk2MFwiLFwiMCg/OjB8MTkpXCIsXCIoPzo4MDB8OVswLTU3LTldXFxcXGQpXFxcXGR7N318WzM0Njc5XVxcXFxkezZ9XCIsWzcsMTBdLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCJbMzQ2NzldXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzg5XVwiXV1dLDAsMCwwLDAsMCwwLDAsXCIwMFwiXSxcIk1XXCI6W1wiMjY1XCIsXCIwMFwiLFwiKD86WzEyODldXFxcXGR8MzF8NzcpXFxcXGR7N318MVxcXFxkezZ9XCIsWzcsOV0sW1tcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIxWzItOV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjJcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMTM3LTldXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJNWFwiOltcIjUyXCIsXCIwWzA5XVwiLFwiMSg/Oig/OlsyN10yfDQ0fDk5KVsxLTldfDY1WzAtNjg5XSlcXFxcZHs3fXwoPzoxKD86WzAxXVxcXFxkfDJbMTMtOV18WzM1XVsxLTldfDRbMC0zNS05XXw2WzAtNDYtOV18N1swMTMtOV18OFsxLTc5XXw5WzEtOF0pfFsyLTldXFxcXGQpXFxcXGR7OH1cIixbMTAsMTFdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMzN8NVs1Nl18ODFcIl0sMCwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzItOV1cIl0sMCwxXSxbXCIoXFxcXGQpKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMiAkMyAkNFwiLFtcIjEoPzozM3w1WzU2XXw4MSlcIl0sMCwxXSxbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMiAkMyAkNFwiLFtcIjFcIl0sMCwxXV0sXCIwMVwiLDAsXCIwKD86WzEyXXw0WzQ1XSl8MVwiLDAsMCwwLDAsXCIwMFwiXSxcIk1ZXCI6W1wiNjBcIixcIjAwXCIsXCIxXFxcXGR7OCw5fXwoPzozXFxcXGR8WzQtOV0pXFxcXGR7N31cIixbOCw5LDEwXSxbW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMS0kMiAkM1wiLFtcIls0LTc5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEtJDIgJDNcIixbXCIxKD86WzAyNDY5XXxbMzc4XVsxLTldfDUzKXw4XCIsXCIxKD86WzAyNDY5XXxbMzddWzEtOV18NTN8OCg/OlsxLTQ2LTldfDVbNy05XSkpfDhcIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMS0kMiAkM1wiLFtcIjNcIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezR9KVwiLFwiJDEtJDItJDMtJDRcIixbXCIxKD86WzM2N118ODApXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxLSQyICQzXCIsW1wiMTVcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMS0kMiAkM1wiLFtcIjFcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIk1aXCI6W1wiMjU4XCIsXCIwMFwiLFwiKD86Mnw4XFxcXGQpXFxcXGR7N31cIixbOCw5XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiMnw4WzItNzldXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiOFwiXV1dXSxcIk5BXCI6W1wiMjY0XCIsXCIwMFwiLFwiWzY4XVxcXFxkezcsOH1cIixbOCw5XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjg4XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezMsNH0pXCIsXCIkMSAkMiAkM1wiLFtcIjZcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjg3XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI4XCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJOQ1wiOltcIjY4N1wiLFwiMDBcIixcIig/OjA1MHxbMi01Ny05XVxcXFxkXFxcXGQpXFxcXGR7M31cIixbNl0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEuJDIuJDNcIixbXCJbMDItNTctOV1cIl1dXV0sXCJORVwiOltcIjIyN1wiLFwiMDBcIixcIlswMjctOV1cXFxcZHs3fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjA4XCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlswODldfDJbMDEzXXw3WzA0XVwiXV1dXSxcIk5GXCI6W1wiNjcyXCIsXCIwMFwiLFwiWzEzXVxcXFxkezV9XCIsWzZdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCIxWzAtM11cIl1dLFtcIihcXFxcZCkoXFxcXGR7NX0pXCIsXCIkMSAkMlwiLFtcIlsxM11cIl1dXSwwLDAsXCIoWzAtMjU4XVxcXFxkezR9KSRcIixcIjMkMVwiXSxcIk5HXCI6W1wiMjM0XCIsXCIwMDlcIixcIig/OlsxMjQtN118OVxcXFxkezN9KVxcXFxkezZ9fFsxLTldXFxcXGR7N318Wzc4XVxcXFxkezksMTN9XCIsWzcsOCwxMCwxMSwxMiwxMywxNF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI3OFwiXSxcIjAkMVwiXSxbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMTJdfDkoPzowWzMtOV18WzEtOV0pXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezIsM30pXCIsXCIkMSAkMiAkM1wiLFtcIlszLTddfDhbMi05XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbNy05XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KShcXFxcZHs0LDV9KVwiLFwiJDEgJDIgJDNcIixbXCJbNzhdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7NX0pKFxcXFxkezUsNn0pXCIsXCIkMSAkMiAkM1wiLFtcIls3OF1cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIk5JXCI6W1wiNTA1XCIsXCIwMFwiLFwiKD86MTgwMHxbMjUtOF1cXFxcZHszfSlcXFxcZHs0fVwiLFs4XSxbW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzEyNS04XVwiXV1dXSxcIk5MXCI6W1wiMzFcIixcIjAwXCIsXCIoPzpbMTI0LTddXFxcXGRcXFxcZHwzKD86WzAyLTldXFxcXGR8MVswLThdKSlcXFxcZHs2fXw4XFxcXGR7Niw5fXw5XFxcXGR7NiwxMH18MVxcXFxkezQsNX1cIixbNSw2LDcsOCw5LDEwLDExXSxbW1wiKFxcXFxkezN9KShcXFxcZHs0LDd9KVwiLFwiJDEgJDJcIixbXCJbODldMFwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezd9KVwiLFwiJDEgJDJcIixbXCI2NlwiXSxcIjAkMVwiXSxbXCIoXFxcXGQpKFxcXFxkezh9KVwiLFwiJDEgJDJcIixbXCI2XCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIxWzE2LThdfDJbMjU5XXwzWzEyNF18NFsxNy05XXw1WzEyNDY3OV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsxLTU3OF18OTFcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NX0pXCIsXCIkMSAkMiAkM1wiLFtcIjlcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIk5PXCI6W1wiNDdcIixcIjAwXCIsXCIoPzowfFsyLTldXFxcXGR7M30pXFxcXGR7NH1cIixbNSw4XSxbW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjhcIl1dLFtcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzItNzldXCJdXV0sMCwwLDAsMCwwLFwiWzAyLTY4OV18N1swLThdXCJdLFwiTlBcIjpbXCI5NzdcIixcIjAwXCIsXCIoPzoxXFxcXGR8OSlcXFxcZHs5fXxbMS05XVxcXFxkezd9XCIsWzgsMTAsMTFdLFtbXCIoXFxcXGQpKFxcXFxkezd9KVwiLFwiJDEtJDJcIixbXCIxWzItNl1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs2fSlcIixcIiQxLSQyXCIsW1wiMVswMV18WzItOF18OSg/OlsxLTU5XXxbNjddWzItNl0pXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7N30pXCIsXCIkMS0kMlwiLFtcIjlcIl1dXSxcIjBcIl0sXCJOUlwiOltcIjY3NFwiLFwiMDBcIixcIig/OjQ0NHwoPzo1NXw4XFxcXGQpXFxcXGR8NjY2KVxcXFxkezR9XCIsWzddLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbNC02OF1cIl1dXV0sXCJOVVwiOltcIjY4M1wiLFwiMDBcIixcIig/Ols0N118ODg4XFxcXGQpXFxcXGR7M31cIixbNCw3XSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiOFwiXV1dXSxcIk5aXCI6W1wiNjRcIixcIjAoPzowfDE2MSlcIixcIlsyOV1cXFxcZHs3LDl9fDUwXFxcXGR7NX0oPzpcXFxcZHsyLDN9KT98NlswLTM1LTldXFxcXGR7Nn18N1xcXFxkezcsOH18OFxcXFxkezQsOX18KD86MTFcXFxcZHxbMzRdKVxcXFxkezd9XCIsWzUsNiw3LDgsOSwxMF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Myw4fSlcIixcIiQxICQyXCIsW1wiOFsxLTU3OV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7MiwzfSlcIixcIiQxICQyICQzXCIsW1wiNTBbMDM2LThdfFs4OV0wXCIsXCI1MCg/OlswMzY3XXw4OCl8Wzg5XTBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjI0fFszNDZdfDdbMi01Ny05XXw5WzItOV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiMig/OjEwfDc0KXxbNTldfDgwXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7Myw0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjF8MlswMjhdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezMsNX0pXCIsXCIkMSAkMiAkM1wiLFtcIjIoPzpbMTY5XXw3WzAtMzUtOV0pfDd8ODZcIl0sXCIwJDFcIl1dLFwiMFwiLDAsMCwwLDAsMCwwLFwiMDBcIl0sXCJPTVwiOltcIjk2OFwiLFwiMDBcIixcIig/OjE1MDV8WzI3OV1cXFxcZHszfXw1MDApXFxcXGR7NH18ODAwXFxcXGR7NSw2fVwiLFs3LDgsOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7NCw2fSlcIixcIiQxICQyXCIsW1wiWzU4XVwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiMlwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzE3OV1cIl1dXV0sXCJQQVwiOltcIjUwN1wiLFwiMDBcIixcIig/OjAwODAwfDhcXFxcZHszfSlcXFxcZHs2fXxbNjhdXFxcXGR7N318WzEtNTctOV1cXFxcZHs2fVwiLFs3LDgsMTAsMTFdLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCJbMS01Ny05XVwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxLSQyXCIsW1wiWzY4XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjhcIl1dXV0sXCJQRVwiOltcIjUxXCIsXCIwMHwxOSg/OjFbMTI0XXw3N3w5MCkwMFwiLFwiKD86WzE0LThdfDlcXFxcZClcXFxcZHs3fVwiLFs4LDldLFtbXCIoXFxcXGR7M30pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCI4MFwiXSxcIigwJDEpXCJdLFtcIihcXFxcZCkoXFxcXGR7N30pXCIsXCIkMSAkMlwiLFtcIjFcIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezZ9KVwiLFwiJDEgJDJcIixbXCJbNC04XVwiXSxcIigwJDEpXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI5XCJdXV0sXCIwXCIsMCwwLDAsMCwwLDAsXCIwMFwiLFwiIEFuZXhvIFwiXSxcIlBGXCI6W1wiNjg5XCIsXCIwMFwiLFwiNFxcXFxkezV9KD86XFxcXGR7Mn0pP3w4XFxcXGR7Nyw4fVwiLFs2LDgsOV0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDNcIixbXCI0NFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCI0fDhbNy05XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCI4XCJdXV1dLFwiUEdcIjpbXCI2NzVcIixcIjAwfDE0MFsxLTNdXCIsXCIoPzoxODB8Wzc4XVxcXFxkezN9KVxcXFxkezR9fCg/OlsyLTU4OV1cXFxcZHw2NClcXFxcZHs1fVwiLFs3LDhdLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCIxOHxbMi02OV18ODVcIl1dLFtcIihcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIls3OF1cIl1dXSwwLDAsMCwwLDAsMCwwLFwiMDBcIl0sXCJQSFwiOltcIjYzXCIsXCIwMFwiLFwiKD86WzItN118OVxcXFxkKVxcXFxkezh9fDJcXFxcZHs1fXwoPzoxODAwfDgpXFxcXGR7Nyw5fVwiLFs2LDgsOSwxMCwxMSwxMiwxM10sW1tcIihcXFxcZCkoXFxcXGR7NX0pXCIsXCIkMSAkMlwiLFtcIjJcIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezQsNn0pXCIsXCIkMSAkMlwiLFtcIjMoPzoyM3wzOXw0Nil8NCg/OjJbMy02XXxbMzVdOXw0WzI2XXw3Nil8NTQ0fDg4WzI0NV18KD86NTJ8NjR8ODYpMlwiLFwiMyg/OjIzMHwzOTd8NDYxKXw0KD86Mig/OjM1fFs0Nl00fDUxKXwzOTZ8NCg/OjIyfDYzKXw1OVszNDddfDc2WzE1XSl8NSg/OjIyMXw0NDYpfDY0MlsyM118OCg/OjYyMnw4KD86WzI0XTJ8NVsxM10pKVwiXSxcIigwJDEpXCJdLFtcIihcXFxcZHs1fSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIjM0Nnw0KD86Mjd8OVszNV0pfDg4M1wiLFwiMzQ2OXw0KD86Mjc5fDkoPzozMHw1NikpfDg4MzRcIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGQpKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMlwiXSxcIigwJDEpXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMy03XXw4WzItOF1cIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzg5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMVwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHsxLDJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjFcIl1dXSxcIjBcIl0sXCJQS1wiOltcIjkyXCIsXCIwMFwiLFwiMTIyXFxcXGR7Nn18WzI0LThdXFxcXGR7MTAsMTF9fDkoPzpbMDEzLTldXFxcXGR7OCwxMH18Mig/OlswMV1cXFxcZFxcXFxkfDIoPzpbMDYtOF1cXFxcZHwxWzAxXSkpXFxcXGR7N30pfCg/OlsyLThdXFxcXGR7M318OTIoPzpbMC03XVxcXFxkfDhbMS05XSkpXFxcXGR7Nn18WzI0LTldXFxcXGR7OH18Wzg5XVxcXFxkezd9XCIsWzgsOSwxMCwxMSwxMl0sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezIsN30pXCIsXCIkMSAkMiAkM1wiLFtcIls4OV0wXCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7NX0pXCIsXCIkMSAkMlwiLFtcIjFcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7Niw3fSlcIixcIiQxICQyXCIsW1wiMig/OjNbMjM1OF18NFsyLTRdfDlbMi04XSl8NDVbMzQ3OV18NTRbMi00NjddfDYwWzQ2OF18NzJbMjM2XXw4KD86MlsyLTY4OV18M1syMzU3OF18NFszNDc4XXw1WzIzNTZdKXw5KD86MlsyLThdfDNbMjctOV18NFsyLTZdfDZbMzU2OV18OVsyNS04XSlcIixcIjkoPzoyWzMtOF18OTgpfCg/OjIoPzozWzIzNThdfDRbMi00XXw5WzItOF0pfDQ1WzM0NzldfDU0WzItNDY3XXw2MFs0NjhdfDcyWzIzNl18OCg/OjJbMi02ODldfDNbMjM1NzhdfDRbMzQ3OF18NVsyMzU2XSl8OSg/OjIyfDNbMjctOV18NFsyLTZdfDZbMzU2OV18OVsyNS03XSkpWzItOV1cIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezcsOH0pXCIsXCIkMSAkMlwiLFtcIig/OjJbMTI1XXw0WzAtMjQ2LTldfDVbMS0zNS03XXw2WzEtOF18N1sxNF18OFsxNl18OTEpWzItOV1cIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7NX0pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCI1OFwiXSxcIigwJDEpXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7N30pXCIsXCIkMSAkMlwiLFtcIjNcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCIyWzEyNV18NFswLTI0Ni05XXw1WzEtMzUtN118NlsxLThdfDdbMTRdfDhbMTZdfDkxXCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMjQtOV1cIl0sXCIoMCQxKVwiXV0sXCIwXCJdLFwiUExcIjpbXCI0OFwiLFwiMDBcIixcIig/OjZ8OFxcXFxkXFxcXGQpXFxcXGR7N318WzEtOV1cXFxcZHs2fSg/OlxcXFxkezJ9KT98WzI2XVxcXFxkezV9XCIsWzYsNyw4LDksMTBdLFtbXCIoXFxcXGR7NX0pXCIsXCIkMVwiLFtcIjE5XCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDJcIixbXCIxMXwyMHw2NFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIig/OjFbMi04XXwyWzItNjldfDNbMi00XXw0WzEtNDY4XXw1WzI0LTY4OV18NlsxLTM1NzhdfDdbMTQtN118OFsxLTc5XXw5WzE0NV0pMVwiLFwiKD86MVsyLThdfDJbMi02OV18M1syLTRdfDRbMS00NjhdfDVbMjQtNjg5XXw2WzEtMzU3OF18N1sxNC03XXw4WzEtNzldfDlbMTQ1XSkxOVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7MiwzfSlcIixcIiQxICQyICQzXCIsW1wiNjRcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIyMXwzOXw0NXw1WzAxMzddfDZbMDQ2OV18N1swMjM4OV18OCg/OjBbMTRdfDgpXCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjFbMi04XXxbMi03XXw4WzEtNzldfDlbMTQ1XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiOFwiXV1dXSxcIlBNXCI6W1wiNTA4XCIsXCIwMFwiLFwiWzQ1XVxcXFxkezV9fCg/OjcwOHw4MFxcXFxkKVxcXFxkezZ9XCIsWzYsOV0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDNcIixbXCJbNDVdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI3XCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjhcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIlBSXCI6W1wiMVwiLFwiMDExXCIsXCIoPzpbNTg5XVxcXFxkXFxcXGR8Nzg3KVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsMCwwLDAsXCI3ODd8OTM5XCJdLFwiUFNcIjpbXCI5NzBcIixcIjAwXCIsXCJbMjQ4OV0yXFxcXGR7Nn18KD86MVxcXFxkfDUpXFxcXGR7OH1cIixbOCw5LDEwXSxbW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsyNDg5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiNVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiMVwiXV1dLFwiMFwiXSxcIlBUXCI6W1wiMzUxXCIsXCIwMFwiLFwiMTY5M1xcXFxkezV9fCg/OlsyNi05XVxcXFxkfDMwKVxcXFxkezd9XCIsWzldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMlsxMl1cIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCIxNnxbMjM2LTldXCJdXV1dLFwiUFdcIjpbXCI2ODBcIixcIjAxWzEyXVwiLFwiKD86WzI0LThdXFxcXGRcXFxcZHwzNDV8OTAwKVxcXFxkezR9XCIsWzddLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMi05XVwiXV1dXSxcIlBZXCI6W1wiNTk1XCIsXCIwMFwiLFwiNTlcXFxcZHs0LDZ9fDlcXFxcZHs1LDEwfXwoPzpbMi00Ni04XVxcXFxkfDVbMC04XSlcXFxcZHs0LDd9XCIsWzYsNyw4LDksMTAsMTFdLFtbXCIoXFxcXGR7M30pKFxcXFxkezMsNn0pXCIsXCIkMSAkMlwiLFtcIlsyLTldMFwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCJbMjZdMXwzWzI4OV18NFsxMjQ2LThdfDdbMS0zXXw4WzEtMzZdXCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs0LDV9KVwiLFwiJDEgJDJcIixbXCIyWzI3OV18M1sxMy01XXw0WzM1OV18NXw2KD86WzM0XXw3WzEtNDYtOF0pfDdbNDYtOF18ODVcIl0sXCIoMCQxKVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCIyWzE0LTY4XXwzWzI2LTldfDRbMTI0Ni04XXw2KD86MXw3NSl8N1sxLTM1XXw4WzEtMzZdXCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjg3XCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezZ9KVwiLFwiJDEgJDJcIixbXCI5KD86WzUtNzldfDhbMS02XSlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlsyLThdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI5XCJdXV0sXCIwXCJdLFwiUUFcIjpbXCI5NzRcIixcIjAwXCIsXCI4MDBcXFxcZHs0fXwoPzoyfDgwMClcXFxcZHs2fXwoPzowMDgwfFszLTddKVxcXFxkezd9XCIsWzcsOCw5LDExXSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiMlsxNl18OFwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzMtN11cIl1dXV0sXCJSRVwiOltcIjI2MlwiLFwiMDBcIixcIig/OjI2fFs2ODldXFxcXGQpXFxcXGR7N31cIixbOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzI2ODldXCJdLFwiMCQxXCJdXSxcIjBcIiwwLDAsMCwwLDAsW1tcIjI2KD86MlxcXFxkXFxcXGR8Myg/OjBcXFxcZHwxWzAtM10pKVxcXFxkezR9XCJdLFtcIig/OjY5KD86MlxcXFxkXFxcXGR8Myg/OjBbMC00Nl18MVswMTNdfDJbMC0yXXwzWzAtMzldfDRcXFxcZHw1WzAtNV18NlswLTZdfDdbMC0yN118OFswLThdfDlbMC00NzldKSl8OSg/OjM5OVswLTNdfDQ3OVswLTJdfDc2KD86MlsyN118M1swLTM3XXw5XFxcXGQpKSlcXFxcZHs0fVwiXSxbXCI4MFxcXFxkezd9XCJdLFtcIjg5WzEtMzctOV1cXFxcZHs2fVwiXSwwLDAsMCwwLDAsW1wiOCg/OjFbMDE5XXwyWzAxNTZdfDg0fDkwKVxcXFxkezZ9XCJdXV0sXCJST1wiOltcIjQwXCIsXCIwMFwiLFwiKD86WzIzNzhdXFxcXGR8OTApXFxcXGR7N318WzIzXVxcXFxkezV9XCIsWzYsOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMlwiLFtcIjJbMy02XVwiLFwiMlszLTZdXFxcXGQ5XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIjIxOXwzMVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzIzXTFcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlsyMzctOV1cIl0sXCIwJDFcIl1dLFwiMFwiLDAsMCwwLDAsMCwwLDAsXCIgaW50IFwiXSxcIlJTXCI6W1wiMzgxXCIsXCIwMFwiLFwiMzhbMDItOV1cXFxcZHs2LDl9fDZcXFxcZHs3LDl9fDkwXFxcXGR7NCw4fXwzOFxcXFxkezUsNn18KD86N1xcXFxkXFxcXGR8ODAwKVxcXFxkezMsOX18KD86WzEyXVxcXFxkfDNbMC03OV0pXFxcXGR7NSwxMH1cIixbNiw3LDgsOSwxMCwxMSwxMl0sW1tcIihcXFxcZHszfSkoXFxcXGR7Myw5fSlcIixcIiQxICQyXCIsW1wiKD86MlszODldfDM5KTB8WzctOV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs1LDEwfSlcIixcIiQxICQyXCIsW1wiWzEtMzZdXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJSVVwiOltcIjdcIixcIjgxMFwiLFwiOFxcXFxkezEzfXxbMzQ3LTldXFxcXGR7OX1cIixbMTAsMTRdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjcoPzoxWzAtOF18MlsxLTldKVwiLFwiNyg/OjEoPzpbMC0zNTZdMnw0WzI5XXw3fDhbMjddKXwyKD86MVsyM118WzItOV0yKSlcIixcIjcoPzoxKD86WzAtMzU2XTJ8NFsyOV18N3w4WzI3XSl8Mig/OjEzWzAzLTY5XXw2MlswMTMtOV0pKXw3MlsxLTU3LTldMlwiXSxcIjggKCQxKVwiLDFdLFtcIihcXFxcZHs1fSkoXFxcXGQpKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiNyg/OjFbMC02OF18MlsxLTldKVwiLFwiNyg/OjEoPzpbMDZdWzMtNl18WzE4XXwyWzM1XXxbMy01XVszLTVdKXwyKD86WzEzXVszLTVdfFsyNC02ODldfDdbNDU3XSkpXCIsXCI3KD86MSg/OjAoPzpbMzU2XXw0WzAyM10pfFsxOF18Mig/OjNbMDEzLTldfDUpfDNbNDVdfDQzWzAxMy03OV18NSg/OjNbMS04XXw0WzEtN118NSl8Nig/OjNbMC0zNS05XXxbNC02XSkpfDIoPzoxKD86M1sxNzhdfFs0NV0pfFsyNC02ODldfDNbMzVdfDdbNDU3XSkpfDcoPzoxNHwyMyk0WzAtOF18NzEoPzozM3w0NSlbMS03OV1cIl0sXCI4ICgkMSlcIiwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiN1wiXSxcIjggKCQxKVwiLDFdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyLSQzLSQ0XCIsW1wiWzM0OV18OCg/OlswMi03XXwxWzEtOF0pXCJdLFwiOCAoJDEpXCIsMV0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCI4XCJdLFwiOCAoJDEpXCJdXSxcIjhcIiwwLDAsMCwwLFwiM1swNC02ODldfFs0ODldXCIsMCxcIjh+MTBcIl0sXCJSV1wiOltcIjI1MFwiLFwiMDBcIixcIig/OjA2fFsyN11cXFxcZFxcXFxkfFs4OV0wMClcXFxcZHs2fVwiLFs4LDldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjBcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbNy05XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiMlwiXV1dLFwiMFwiXSxcIlNBXCI6W1wiOTY2XCIsXCIwMFwiLFwiOTJcXFxcZHs3fXwoPzpbMTVdfDhcXFxcZClcXFxcZHs4fVwiLFs5LDEwXSxbW1wiKFxcXFxkezR9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiOVwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjFcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjVcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiODFcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjhcIl1dXSxcIjBcIl0sXCJTQlwiOltcIjY3N1wiLFwiMFswMV1cIixcIig/OlsxLTZdfFs3LTldXFxcXGRcXFxcZClcXFxcZHs0fVwiLFs1LDddLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCI3fDhbNC05XXw5KD86WzEtOF18OVswLThdKVwiXV1dXSxcIlNDXCI6W1wiMjQ4XCIsXCIwMTB8MFswLTJdXCIsXCI4MDBcXFxcZHs0fXwoPzpbMjQ5XVxcXFxkfDY0KVxcXFxkezV9XCIsWzddLFtbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiWzI0Nl18OVs1N11cIl1dXSwwLDAsMCwwLDAsMCwwLFwiMDBcIl0sXCJTRFwiOltcIjI0OVwiLFwiMDBcIixcIlsxOV1cXFxcZHs4fVwiLFs5XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsxOV1cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIlNFXCI6W1wiNDZcIixcIjAwXCIsXCIoPzpbMjZdXFxcXGRcXFxcZHw5KVxcXFxkezl9fFsxLTldXFxcXGR7OH18WzEtNjg5XVxcXFxkezd9fFsxLTQ2ODldXFxcXGR7Nn18MlxcXFxkezV9XCIsWzYsNyw4LDksMTBdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezIsM30pKFxcXFxkezJ9KVwiLFwiJDEtJDIgJDNcIixbXCIyMFwiXSxcIjAkMVwiLDAsXCIkMSAkMiAkM1wiXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEtJDJcIixbXCI5KD86MDB8Mzl8NDR8OSlcIl0sXCIwJDFcIiwwLFwiJDEgJDJcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Mn0pXCIsXCIkMS0kMiAkM1wiLFtcIlsxMl1bMTM2XXwzWzM1Nl18NFswMjQ2XXw2WzAzXXw5MFsxLTldXCJdLFwiMCQxXCIsMCxcIiQxICQyICQzXCJdLFtcIihcXFxcZCkoXFxcXGR7MiwzfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEtJDIgJDMgJDRcIixbXCI4XCJdLFwiMCQxXCIsMCxcIiQxICQyICQzICQ0XCJdLFtcIihcXFxcZHszfSkoXFxcXGR7MiwzfSkoXFxcXGR7Mn0pXCIsXCIkMS0kMiAkM1wiLFtcIjFbMjQ1N118Mig/OlsyNDctOV18NVswMTM4XSl8M1swMjQ3LTldfDRbMTM1Ny05XXw1WzAtMzUtOV18Nig/OlsxMjU2ODldfDRbMDItNTddfDdbMC0yXSl8OSg/OlsxMjUtOF18M1swMi01XXw0WzAtM10pXCJdLFwiMCQxXCIsMCxcIiQxICQyICQzXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7MiwzfSkoXFxcXGR7M30pXCIsXCIkMS0kMiAkM1wiLFtcIjkoPzowMHwzOXw0NClcIl0sXCIwJDFcIiwwLFwiJDEgJDIgJDNcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHsyLDN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMS0kMiAkMyAkNFwiLFtcIjFbMTM2ODldfDJbMDEzNl18M1sxMzU2XXw0WzAyNDZdfDU0fDZbMDNdfDkwWzEtOV1cIl0sXCIwJDFcIiwwLFwiJDEgJDIgJDMgJDRcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEtJDIgJDMgJDRcIixbXCIxMHw3XCJdLFwiMCQxXCIsMCxcIiQxICQyICQzICQ0XCJdLFtcIihcXFxcZCkoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHsyfSlcIixcIiQxLSQyICQzICQ0XCIsW1wiOFwiXSxcIjAkMVwiLDAsXCIkMSAkMiAkMyAkNFwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMS0kMiAkMyAkNFwiLFtcIlsxMy01XXwyKD86WzI0Ny05XXw1WzAxMzhdKXw2KD86WzEyNC02ODldfDdbMC0yXSl8OSg/OlsxMjUtOF18M1swMi01XXw0WzAtM10pXCJdLFwiMCQxXCIsMCxcIiQxICQyICQzICQ0XCJdLFtcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHszfSlcIixcIiQxLSQyICQzICQ0XCIsW1wiOVwiXSxcIjAkMVwiLDAsXCIkMSAkMiAkMyAkNFwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEtJDIgJDMgJDQgJDVcIixbXCJbMjZdXCJdLFwiMCQxXCIsMCxcIiQxICQyICQzICQ0ICQ1XCJdXSxcIjBcIl0sXCJTR1wiOltcIjY1XCIsXCIwWzAtM11cXFxcZFwiLFwiKD86KD86MVxcXFxkfDgpXFxcXGRcXFxcZHw3MDAwKVxcXFxkezd9fFszNjg5XVxcXFxkezd9XCIsWzgsMTAsMTFdLFtbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMzY5XXw4KD86MFsxLTZdfFsxLTldKVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjhcIl1dLFtcIihcXFxcZHs0fSkoXFxcXGR7NH0pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI3XCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMVwiXV1dXSxcIlNIXCI6W1wiMjkwXCIsXCIwMFwiLFwiKD86WzI1Nl1cXFxcZHw4KVxcXFxkezN9XCIsWzQsNV0sMCwwLDAsMCwwLDAsXCJbMjU2XVwiXSxcIlNJXCI6W1wiMzg2XCIsXCIwMHwxMCg/OjIyfDY2fDg4fDk5KVwiLFwiWzEtN11cXFxcZHs3fXw4XFxcXGR7NCw3fXw5MFxcXFxkezQsNn1cIixbNSw2LDcsOF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Myw2fSlcIixcIiQxICQyXCIsW1wiOFswOV18OVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCI1OXw4XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMzddWzAxXXw0WzAxMzldfDUxfDZcIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMS01N11cIl0sXCIoMCQxKVwiXV0sXCIwXCIsMCwwLDAsMCwwLDAsXCIwMFwiXSxcIlNKXCI6W1wiNDdcIixcIjAwXCIsXCIwXFxcXGR7NH18KD86WzQ4OV1cXFxcZHxbNTddOSlcXFxcZHs2fVwiLFs1LDhdLDAsMCwwLDAsMCwwLFwiNzlcIl0sXCJTS1wiOltcIjQyMVwiLFwiMDBcIixcIlsyLTY4OV1cXFxcZHs4fXxbMi01OV1cXFxcZHs2fXxbMi01XVxcXFxkezV9XCIsWzYsNyw5XSxbW1wiKFxcXFxkKShcXFxcZHsyfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiMjFcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7MiwzfSlcIixcIiQxICQyICQzXCIsW1wiWzMtNV1bMS04XTFcIixcIlszLTVdWzEtOF0xWzY3XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Mn0pXCIsXCIkMS8kMiAkMyAkNFwiLFtcIjJcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIls2ODldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxLyQyICQzICQ0XCIsW1wiWzMtNV1cIl0sXCIwJDFcIl1dLFwiMFwiXSxcIlNMXCI6W1wiMjMyXCIsXCIwMFwiLFwiKD86WzIzNy05XVxcXFxkfDY2KVxcXFxkezZ9XCIsWzhdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezZ9KVwiLFwiJDEgJDJcIixbXCJbMjM2LTldXCJdLFwiKDAkMSlcIl1dLFwiMFwiXSxcIlNNXCI6W1wiMzc4XCIsXCIwMFwiLFwiKD86MDU0OXxbNS03XVxcXFxkKVxcXFxkezZ9XCIsWzgsMTBdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIls1LTddXCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkezZ9KVwiLFwiJDEgJDJcIixbXCIwXCJdXV0sMCwwLFwiKFs4OV1cXFxcZHs1fSkkXCIsXCIwNTQ5JDFcIl0sXCJTTlwiOltcIjIyMVwiLFwiMDBcIixcIig/OlszNzhdXFxcXGR8OTMpXFxcXGR7N31cIixbOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiOFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMzc5XVwiXV1dXSxcIlNPXCI6W1wiMjUyXCIsXCIwMFwiLFwiWzM0Ni05XVxcXFxkezh9fFsxMjY3OV1cXFxcZHs3fXxbMS01XVxcXFxkezZ9fFsxMzQ4XVxcXFxkezV9XCIsWzYsNyw4LDldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCI4WzEyNV1cIl1dLFtcIihcXFxcZHs2fSlcIixcIiQxXCIsW1wiWzEzNF1cIl1dLFtcIihcXFxcZCkoXFxcXGR7Nn0pXCIsXCIkMSAkMlwiLFtcIlsxNV18MlswLTc5XXwzWzAtNDYtOF18NFswLTddXCJdXSxbXCIoXFxcXGQpKFxcXFxkezd9KVwiLFwiJDEgJDJcIixbXCIoPzoyfDkwKTR8WzY3XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlszNDc4XXw2NHw5MFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHs1LDd9KVwiLFwiJDEgJDJcIixbXCIxfDI4fDYoPzowWzUtN118WzEtMzUtOV0pfDlbMi05XVwiXV1dLFwiMFwiXSxcIlNSXCI6W1wiNTk3XCIsXCIwMFwiLFwiKD86WzItNV18Njh8Wzc4XVxcXFxkKVxcXFxkezV9XCIsWzYsN10sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEtJDItJDNcIixbXCI1NlwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxLSQyXCIsW1wiWzItNV1cIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMS0kMlwiLFtcIls2LThdXCJdXV1dLFwiU1NcIjpbXCIyMTFcIixcIjAwXCIsXCJbMTldXFxcXGR7OH1cIixbOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMTldXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJTVFwiOltcIjIzOVwiLFwiMDBcIixcIig/OjIyfDlcXFxcZClcXFxcZHs1fVwiLFs3XSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzI5XVwiXV1dXSxcIlNWXCI6W1wiNTAzXCIsXCIwMFwiLFwiWzI2N11cXFxcZHs3fXxbODldMDBcXFxcZHs0fSg/OlxcXFxkezR9KT9cIixbNyw4LDExXSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzg5XVwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzI2N11cIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCJbODldXCJdXV1dLFwiU1hcIjpbXCIxXCIsXCIwMTFcIixcIjcyMTVcXFxcZHs2fXwoPzpbNThdXFxcXGRcXFxcZHw5MDApXFxcXGR7N31cIixbMTBdLDAsXCIxXCIsMCxcIig1XFxcXGR7Nn0pJHwxXCIsXCI3MjEkMVwiLDAsXCI3MjFcIl0sXCJTWVwiOltcIjk2M1wiLFwiMDBcIixcIlsxLTM5XVxcXFxkezh9fFsxLTVdXFxcXGR7N31cIixbOCw5XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiWzEtNV1cIl0sXCIwJDFcIiwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiOVwiXSxcIjAkMVwiLDFdXSxcIjBcIl0sXCJTWlwiOltcIjI2OFwiLFwiMDBcIixcIjA4MDBcXFxcZHs0fXwoPzpbMjM3XVxcXFxkfDkwMClcXFxcZHs2fVwiLFs4LDldLFtbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMDIzN11cIl1dLFtcIihcXFxcZHs1fSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIjlcIl1dXV0sXCJUQVwiOltcIjI5MFwiLFwiMDBcIixcIjhcXFxcZHszfVwiLFs0XSwwLDAsMCwwLDAsMCxcIjhcIl0sXCJUQ1wiOltcIjFcIixcIjAxMVwiLFwiKD86WzU4XVxcXFxkXFxcXGR8NjQ5fDkwMClcXFxcZHs3fVwiLFsxMF0sMCxcIjFcIiwwLFwiKFsyLTQ3OV1cXFxcZHs2fSkkfDFcIixcIjY0OSQxXCIsMCxcIjY0OVwiXSxcIlREXCI6W1wiMjM1XCIsXCIwMHwxNlwiLFwiKD86MjJ8WzY5XVxcXFxkfDc3KVxcXFxkezZ9XCIsWzhdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlsyNjc5XVwiXV1dLDAsMCwwLDAsMCwwLDAsXCIwMFwiXSxcIlRHXCI6W1wiMjI4XCIsXCIwMFwiLFwiWzI3OV1cXFxcZHs3fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCJbMjc5XVwiXV1dXSxcIlRIXCI6W1wiNjZcIixcIjAwWzEtOV1cIixcIig/OjAwMTgwMHxbMi01N118WzY4OV1cXFxcZClcXFxcZHs3fXwxXFxcXGR7Nyw5fVwiLFs4LDksMTAsMTNdLFtbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMlwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMTMtOV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjFcIl1dXSxcIjBcIl0sXCJUSlwiOltcIjk5MlwiLFwiODEwXCIsXCJbMC01Ny05XVxcXFxkezh9XCIsWzldLFtbXCIoXFxcXGR7Nn0pKFxcXFxkKShcXFxcZHsyfSlcIixcIiQxICQyICQzXCIsW1wiMzMxXCIsXCIzMzE3XCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzM0XTd8OTFbNzhdXCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkKShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiM1sxLTVdXCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzAtNTctOV1cIl1dXSwwLDAsMCwwLDAsMCwwLFwiOH4xMFwiXSxcIlRLXCI6W1wiNjkwXCIsXCIwMFwiLFwiWzItNDddXFxcXGR7Myw2fVwiLFs0LDUsNiw3XV0sXCJUTFwiOltcIjY3MFwiLFwiMDBcIixcIjdcXFxcZHs3fXwoPzpbMi00N11cXFxcZHxbODldMClcXFxcZHs1fVwiLFs3LDhdLFtbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCJbMi00ODldfDcwXCJdXSxbXCIoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCI3XCJdXV1dLFwiVE1cIjpbXCI5OTNcIixcIjgxMFwiLFwiWzEtNl1cXFxcZHs3fVwiLFs4XSxbW1wiKFxcXFxkezJ9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDItJDMtJDRcIixbXCIxMlwiXSxcIig4ICQxKVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkKShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMi0kMy0kNFwiLFtcIlsxLTVdXCJdLFwiKDggJDEpXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7Nn0pXCIsXCIkMSAkMlwiLFtcIjZcIl0sXCI4ICQxXCJdXSxcIjhcIiwwLDAsMCwwLDAsMCxcIjh+MTBcIl0sXCJUTlwiOltcIjIxNlwiLFwiMDBcIixcIlsyLTU3LTldXFxcXGR7N31cIixbOF0sW1tcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMi01Ny05XVwiXV1dXSxcIlRPXCI6W1wiNjc2XCIsXCIwMFwiLFwiKD86MDgwMHwoPzpbNS04XVxcXFxkXFxcXGR8OTk5KVxcXFxkKVxcXFxkezN9fFsyLThdXFxcXGR7NH1cIixbNSw3XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSlcIixcIiQxLSQyXCIsW1wiWzItNF18NTB8NlswOV18N1swLTI0LTY5XXw4WzA1XVwiXV0sW1wiKFxcXFxkezR9KShcXFxcZHszfSlcIixcIiQxICQyXCIsW1wiMFwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzUtOV1cIl1dXV0sXCJUUlwiOltcIjkwXCIsXCIwMFwiLFwiNFxcXFxkezZ9fDhcXFxcZHsxMSwxMn18KD86WzItNThdXFxcXGRcXFxcZHw5MDApXFxcXGR7N31cIixbNywxMCwxMiwxM10sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI1MTJ8OFswMTU4OV18OTBcIl0sXCIwJDFcIiwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIjUoPzpbMC01OV18NjEpXCIsXCI1KD86WzAtNTldfDYxNilcIixcIjUoPzpbMC01OV18NjE2MSlcIl0sXCIwJDFcIiwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlsyNF1bMS04XXwzWzEtOV1cIl0sXCIoMCQxKVwiLDFdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezYsN30pXCIsXCIkMSAkMiAkM1wiLFtcIjgwXCJdLFwiMCQxXCIsMV1dLFwiMFwiXSxcIlRUXCI6W1wiMVwiLFwiMDExXCIsXCIoPzpbNThdXFxcXGRcXFxcZHw5MDApXFxcXGR7N31cIixbMTBdLDAsXCIxXCIsMCxcIihbMi00Ni04XVxcXFxkezZ9KSR8MVwiLFwiODY4JDFcIiwwLFwiODY4XCJdLFwiVFZcIjpbXCI2ODhcIixcIjAwXCIsXCIoPzoyfDdcXFxcZFxcXFxkfDkwKVxcXFxkezR9XCIsWzUsNiw3XSxbW1wiKFxcXFxkezJ9KShcXFxcZHszfSlcIixcIiQxICQyXCIsW1wiMlwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiOTBcIl1dLFtcIihcXFxcZHsyfSkoXFxcXGR7NX0pXCIsXCIkMSAkMlwiLFtcIjdcIl1dXV0sXCJUV1wiOltcIjg4NlwiLFwiMCg/OjBbMjUtNzldfDE5KVwiLFwiWzItNjg5XVxcXFxkezh9fDdcXFxcZHs5LDEwfXxbMi04XVxcXFxkezd9fDJcXFxcZHs2fVwiLFs3LDgsOSwxMCwxMV0sW1tcIihcXFxcZHsyfSkoXFxcXGQpKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIyMDJcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiWzI1OF0wXCJdLFwiMCQxXCJdLFtcIihcXFxcZCkoXFxcXGR7Myw0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsyMzU2OF18NCg/OjBbMDItNDhdfFsxLTQ3LTldKXw3WzEtOV1cIixcIlsyMzU2OF18NCg/OjBbMi00OF18WzEtNDctOV0pfCg/OjQwMHw3KVsxLTldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbNDldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7NH0pKFxcXFxkezQsNX0pXCIsXCIkMSAkMiAkM1wiLFtcIjdcIl0sXCIwJDFcIl1dLFwiMFwiLDAsMCwwLDAsMCwwLDAsXCIjXCJdLFwiVFpcIjpbXCIyNTVcIixcIjAwWzA1Nl1cIixcIig/OlsyNS04XVxcXFxkfDQxfDkwKVxcXFxkezd9XCIsWzldLFtbXCIoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzg5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzI0XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezd9KVwiLFwiJDEgJDJcIixbXCI1XCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiWzY3XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiVUFcIjpbXCIzODBcIixcIjAwXCIsXCJbODldXFxcXGR7OX18WzMtOV1cXFxcZHs4fVwiLFs5LDEwXSxbW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjZbMTJdWzI5XXwoPzozWzEtOF18NFsxMzYtOF18NVsxMjQ1N118Nls0OV0pMnwoPzo1Nnw2NSlbMjRdXCIsXCI2WzEyXVsyOV18KD86MzV8NFsxMzc4XXw1WzEyNDU3XXw2WzQ5XSkyfCg/OjU2fDY1KVsyNF18KD86M1sxLTQ2LThdfDQ2KTJbMDEzLTldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7NX0pXCIsXCIkMSAkMlwiLFtcIjNbMS04XXw0KD86WzEzNjddfFs0NV1bNi05XXw4WzQtNl0pfDUoPzpbMS01XXw2WzAxMzU2ODldfDdbNC02XSl8Nig/OlsxMl1bMy03XXxbNDU5XSlcIixcIjNbMS04XXw0KD86WzEzNjddfFs0NV1bNi05XXw4WzQtNl0pfDUoPzpbMS01XXw2KD86WzAxNTY4OV18M1swMjM4OV0pfDdbNC02XSl8Nig/OlsxMl1bMy03XXxbNDU5XSlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlszLTddfDg5fDlbMS05XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbODldXCJdLFwiMCQxXCJdXSxcIjBcIiwwLDAsMCwwLDAsMCxcIjB+MFwiXSxcIlVHXCI6W1wiMjU2XCIsXCIwMFswNTddXCIsXCI4MDBcXFxcZHs2fXwoPzpbMjldMHxbMzQ3XVxcXFxkKVxcXFxkezd9XCIsWzldLFtbXCIoXFxcXGR7NH0pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCIyMDJcIixcIjIwMjRcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiWzI3LTldfDQoPzo2WzQ1XXxbNy05XSlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs3fSlcIixcIiQxICQyXCIsW1wiWzM0XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiVVNcIjpbXCIxXCIsXCIwMTFcIixcIlsyLTldXFxcXGR7OX18M1xcXFxkezZ9XCIsWzEwXSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxLSQyXCIsW1wiMzEwXCJdLDAsMV0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIoJDEpICQyLSQzXCIsW1wiWzItOV1cIl0sMCwxLFwiJDEtJDItJDNcIl1dLFwiMVwiLDAsMCwwLDAsMCxbW1wiNTA1Nig/OlswLTM1LTldXFxcXGR8NFs0Nl0pXFxcXGR7NH18KD86NDcyMnw1MDVbMi01Ny05XSlcXFxcZHs2fXwoPzoyKD86MFsxLTM1LTldfDFbMDItOV18MlswMy01ODldfDNbMTQ5XXw0WzA4XXw1WzEtNDZdfDZbMDI3OV18N1swMjY5XXw4WzEzXSl8Myg/OjBbMS01Ny05XXwxWzAyLTldfDJbMDEzNTZdfDNbMC0yNDY3OV18NFsxNjddfDVbMC0yXXw2WzAxNF18OFswNTZdKXw0KD86MFsxMjQtOV18MVswMi01NzldfDJbMy01XXwzWzAyNDVdfDRbMDIzNTc4XXw1OHw2WzM0OV18N1swNTg5XXw4WzA0XSl8NSg/OjBbMS00Ny05XXwxWzAyMzUtOF18MjB8M1swMTQ5XXw0WzAxXXw1WzE3OV18NlsxLTQ3XXw3WzAtNV18OFswMjU2XSl8Nig/OjBbMS0zNS05XXwxWzAyNC05XXwyWzAzNjg5XXxbMzRdWzAxNl18NVswMTY3OV18NlswLTI3OV18Nzh8OFswLTI5XSl8Nyg/OjBbMS00Ni04XXwxWzItOV18MlswNC03XXwzWzEyNDddfDRbMDM3XXw1WzQ3XXw2WzAyMzU5XXw3WzAtNTldfDhbMTU2XSl8OCg/OjBbMS02OF18MVswMi04XXwyWzA2OF18M1swLTI1ODldfDRbMDM1NzhdfDVbMDQ2LTldfDZbMDItNV18N1swMjhdKXw5KD86MFsxMzQ2LTldfDFbMDItOV18MlswNTg5XXwzWzAxNDYtOF18NFswMTM1Ny05XXw1WzEyNDY5XXw3WzAtMzg5XXw4WzA0LTY5XSkpWzItOV1cXFxcZHs2fVwiXSxbXCJcIl0sW1wiOCg/OjAwfDMzfDQ0fDU1fDY2fDc3fDg4KVsyLTldXFxcXGR7Nn1cIl0sW1wiOTAwWzItOV1cXFxcZHs2fVwiXSxbXCI1Mig/OjMoPzpbMi00Ni05XVswMi05XVxcXFxkfDUoPzpbMDItNDYtOV1cXFxcZHw1WzAtNDYtOV0pKXw0KD86WzItNDc4XVswMi05XVxcXFxkfDUoPzpbMDM0XVxcXFxkfDJbMDI0LTldfDVbMC00Ni05XSl8Nig/OjBbMS05XXxbMi05XVxcXFxkKXw5KD86WzA1LTldXFxcXGR8MlswLTVdfDQ5KSkpXFxcXGR7NH18NTJbMzRdWzItOV0xWzAyLTldXFxcXGR7NH18NSg/OjAwfDJbMTI1LTldfDMzfDQ0fDY2fDc3fDg4KVsyLTldXFxcXGR7Nn1cIl1dXSxcIlVZXCI6W1wiNTk4XCIsXCIwKD86MHwxWzMtOV1cXFxcZClcIixcIig/OjAwMDR8NClcXFxcZHs5fXxbMTI0OV1cXFxcZHs3fXwoPzpbNDldXFxcXGR8ODApXFxcXGR7NX1cIixbNyw4LDEwLDEzXSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiNDA1fDh8OTBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzEyNF1cIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI0XCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzICQ0XCIsW1wiMFwiXV1dLFwiMFwiLDAsMCwwLDAsMCwwLFwiMDBcIixcIiBpbnQuIFwiXSxcIlVaXCI6W1wiOTk4XCIsXCI4MTBcIixcIig/OjMzfFs1LTc5XVxcXFxkfDg4KVxcXFxkezd9XCIsWzldLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pXCIsXCIkMSAkMiAkMyAkNFwiLFtcIlszNS05XVwiXSxcIjggJDFcIl1dLFwiOFwiLDAsMCwwLDAsMCwwLFwiOH4xMFwiXSxcIlZBXCI6W1wiMzlcIixcIjAwXCIsXCIwXFxcXGR7NSwxMH18M1swLThdXFxcXGR7NywxMH18NTVcXFxcZHs4fXw4XFxcXGR7NX0oPzpcXFxcZHsyLDR9KT98KD86MVxcXFxkfDM5KVxcXFxkezcsOH1cIixbNiw3LDgsOSwxMCwxMV0sMCwwLDAsMCwwLDAsXCIwNjY5OFwiXSxcIlZDXCI6W1wiMVwiLFwiMDExXCIsXCIoPzpbNThdXFxcXGRcXFxcZHw3ODR8OTAwKVxcXFxkezd9XCIsWzEwXSwwLFwiMVwiLDAsXCIoWzItN11cXFxcZHs2fSkkfDFcIixcIjc4NCQxXCIsMCxcIjc4NFwiXSxcIlZFXCI6W1wiNThcIixcIjAwXCIsXCJbNjhdMDBcXFxcZHs3fXwoPzpbMjRdXFxcXGR8WzU5XTApXFxcXGR7OH1cIixbMTBdLFtbXCIoXFxcXGR7M30pKFxcXFxkezd9KVwiLFwiJDEtJDJcIixbXCJbMjQtNjg5XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiVkdcIjpbXCIxXCIsXCIwMTFcIixcIig/OjI4NHxbNThdXFxcXGRcXFxcZHw5MDApXFxcXGR7N31cIixbMTBdLDAsXCIxXCIsMCxcIihbMi01NzhdXFxcXGR7Nn0pJHwxXCIsXCIyODQkMVwiLDAsXCIyODRcIl0sXCJWSVwiOltcIjFcIixcIjAxMVwiLFwiWzU4XVxcXFxkezl9fCg/OjM0fDkwKTBcXFxcZHs3fVwiLFsxMF0sMCxcIjFcIiwwLFwiKFsyLTldXFxcXGR7Nn0pJHwxXCIsXCIzNDAkMVwiLDAsXCIzNDBcIl0sXCJWTlwiOltcIjg0XCIsXCIwMFwiLFwiWzEyXVxcXFxkezl9fFsxMzUtOV1cXFxcZHs4fXxbMTZdXFxcXGR7N318WzE2LThdXFxcXGR7Nn1cIixbNyw4LDksMTBdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezV9KVwiLFwiJDEgJDJcIixbXCI4MFwiXSxcIjAkMVwiLDFdLFtcIihcXFxcZHs0fSkoXFxcXGR7NCw2fSlcIixcIiQxICQyXCIsW1wiMVwiXSwwLDFdLFtcIihcXFxcZHsyfSkoXFxcXGR7M30pKFxcXFxkezJ9KShcXFxcZHsyfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzY5XVwiXSxcIjAkMVwiLDFdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMzU3OF1cIl0sXCIwJDFcIiwxXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMls0OF1cIl0sXCIwJDFcIiwxXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiMlwiXSxcIjAkMVwiLDFdXSxcIjBcIl0sXCJWVVwiOltcIjY3OFwiLFwiMDBcIixcIls1Ny05XVxcXFxkezZ9fCg/OlsyMzhdXFxcXGR8NDgpXFxcXGR7M31cIixbNSw3XSxbW1wiKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzU3LTldXCJdXV1dLFwiV0ZcIjpbXCI2ODFcIixcIjAwXCIsXCIoPzo0MHw3MilcXFxcZHs0fXw4XFxcXGR7NX0oPzpcXFxcZHszfSk/XCIsWzYsOV0sW1tcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDNcIixbXCJbNDc4XVwiXV0sW1wiKFxcXFxkezN9KShcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezJ9KVwiLFwiJDEgJDIgJDMgJDRcIixbXCI4XCJdXV1dLFwiV1NcIjpbXCI2ODVcIixcIjBcIixcIig/OlsyLTZdfDhcXFxcZHs1fSlcXFxcZHs0fXxbNzhdXFxcXGR7Nn18WzY4XVxcXFxkezV9XCIsWzUsNiw3LDEwXSxbW1wiKFxcXFxkezV9KVwiLFwiJDFcIixbXCJbMi01XXw2WzEtOV1cIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7Myw3fSlcIixcIiQxICQyXCIsW1wiWzY4XVwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHs1fSlcIixcIiQxICQyXCIsW1wiN1wiXV1dXSxcIlhLXCI6W1wiMzgzXCIsXCIwMFwiLFwiWzIzXVxcXFxkezcsOH18KD86NFxcXFxkXFxcXGR8Wzg5XTAwKVxcXFxkezV9XCIsWzgsOV0sW1tcIihcXFxcZHszfSkoXFxcXGR7NX0pXCIsXCIkMSAkMlwiLFtcIls4OV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlsyLTRdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMjNdXCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJZRVwiOltcIjk2N1wiLFwiMDBcIixcIig/OjF8N1xcXFxkKVxcXFxkezd9fFsxLTddXFxcXGR7Nn1cIixbNyw4LDldLFtbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHszLDR9KVwiLFwiJDEgJDIgJDNcIixbXCJbMS02XXw3KD86WzI0LTZdfDhbMC03XSlcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIjdcIl0sXCIwJDFcIl1dLFwiMFwiXSxcIllUXCI6W1wiMjYyXCIsXCIwMFwiLFwiKD86KD86KD86MjZ8NjMpOXw4MFxcXFxkKVxcXFxkfDkzOTgpXFxcXGR7NX1cIixbOV0sMCxcIjBcIiwwLDAsMCwwLFwiMjY5fDYzfDkzOThcIl0sXCJaQVwiOltcIjI3XCIsXCIwMFwiLFwiWzEtNzldXFxcXGR7OH18OFxcXFxkezQsOX1cIixbNSw2LDcsOCw5LDEwXSxbW1wiKFxcXFxkezJ9KShcXFxcZHszLDR9KVwiLFwiJDEgJDJcIixbXCI4WzEtNF1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7MiwzfSlcIixcIiQxICQyICQzXCIsW1wiOFsxLTRdXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCI4NjBcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIlsxLTldXCJdLFwiMCQxXCJdLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI4XCJdLFwiMCQxXCJdXSxcIjBcIl0sXCJaTVwiOltcIjI2MFwiLFwiMDBcIixcIjgwMFxcXFxkezZ9fCg/OjIxfDYzfFs3OV1cXFxcZClcXFxcZHs3fVwiLFs5XSxbW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7M30pXCIsXCIkMSAkMiAkM1wiLFtcIlsyOF1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHs3fSlcIixcIiQxICQyXCIsW1wiWzc5XVwiXSxcIjAkMVwiXV0sXCIwXCJdLFwiWldcIjpbXCIyNjNcIixcIjAwXCIsXCIyKD86WzAtNTctOV1cXFxcZHs2LDh9fDZbMC0yNC05XVxcXFxkezYsN30pfFszOF1cXFxcZHs5fXxbMzUtOF1cXFxcZHs4fXxbMy02XVxcXFxkezd9fFsxLTY4OV1cXFxcZHs2fXxbMS0zNTY5XVxcXFxkezV9fFsxMzU2XVxcXFxkezR9XCIsWzUsNiw3LDgsOSwxMF0sW1tcIihcXFxcZHszfSkoXFxcXGR7Myw1fSlcIixcIiQxICQyXCIsW1wiMig/OjBbNDVdfDJbMjc4XXxbNDldOCl8Myg/OlswOV04fDE3KXw2KD86WzI5XTh8Mzd8NzUpfFsyM11bNzhdfCg/OjMzfDVbMTVdfDZbNjhdKVs3OF1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkKShcXFxcZHszfSkoXFxcXGR7Miw0fSlcIixcIiQxICQyICQzXCIsW1wiWzQ5XVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7M30pKFxcXFxkezR9KVwiLFwiJDEgJDJcIixbXCI4MFwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezd9KVwiLFwiJDEgJDJcIixbXCIyNHw4WzEzLTU5XXwoPzoyWzA1LTc5XXwzOXw1WzQ1XXw2WzE1LThdKTJcIixcIjIoPzowMlswMTRdfDR8WzU2XTIwfFs3OV0yKXwzOTJ8NSg/OjQyfDUyNSl8Nig/OlsxNi04XTIxfDUyWzAxM10pfDhbMTMtNTldXCJdLFwiKDAkMSlcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjdcIl0sXCIwJDFcIl0sW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiMig/OjFbMzldfDJbMDE1N118WzM3OF18WzU2XVsxNF0pfDMoPzoxMnwyOSlcIixcIjIoPzoxWzM5XXwyWzAxNTddfFszNzhdfFs1Nl1bMTRdKXwzKD86MTIzfDI5KVwiXSxcIjAkMVwiXSxbXCIoXFxcXGR7NH0pKFxcXFxkezZ9KVwiLFwiJDEgJDJcIixbXCI4XCJdLFwiMCQxXCJdLFtcIihcXFxcZHsyfSkoXFxcXGR7Myw1fSlcIixcIiQxICQyXCIsW1wiMXwyKD86MFswLTM2LTldfDEyfDI5fFs1Nl0pfDMoPzoxWzAtNjg5XXxbMjQtNl0pfDUoPzpbMDIzNi05XXwxWzItNF0pfDYoPzpbMDEzLTU5XXw3WzAtNDYtOV0pfCg/OjMzfDU1fDZbNjhdKVswLTY5XXwoPzoyOXwzWzA5XXw2MilbMC03OV1cIl0sXCIwJDFcIl0sW1wiKFxcXFxkezJ9KShcXFxcZHszfSkoXFxcXGR7Myw0fSlcIixcIiQxICQyICQzXCIsW1wiMjlbMDEzLTldfDM5fDU0XCJdLFwiMCQxXCJdLFtcIihcXFxcZHs0fSkoXFxcXGR7Myw1fSlcIixcIiQxICQyXCIsW1wiKD86MjV8NTQpOFwiLFwiMjU4fDU0ODNcIl0sXCIwJDFcIl1dLFwiMFwiXX0sXCJub25HZW9ncmFwaGljXCI6e1wiODAwXCI6W1wiODAwXCIsMCxcIig/OjAwfFsxLTldXFxcXGQpXFxcXGR7Nn1cIixbOF0sW1tcIihcXFxcZHs0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMlwiLFtcIlxcXFxkXCJdXV0sMCwwLDAsMCwwLDAsWzAsMCxbXCIoPzowMHxbMS05XVxcXFxkKVxcXFxkezZ9XCJdXV0sXCI4MDhcIjpbXCI4MDhcIiwwLFwiWzEtOV1cXFxcZHs3fVwiLFs4XSxbW1wiKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyXCIsW1wiWzEtOV1cIl1dXSwwLDAsMCwwLDAsMCxbMCwwLDAsMCwwLDAsMCwwLDAsW1wiWzEtOV1cXFxcZHs3fVwiXV1dLFwiODcwXCI6W1wiODcwXCIsMCxcIjdcXFxcZHsxMX18WzM1LTddXFxcXGR7OH1cIixbOSwxMl0sW1tcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KVwiLFwiJDEgJDIgJDNcIixbXCJbMzUtN11cIl1dXSwwLDAsMCwwLDAsMCxbMCxbXCIoPzpbMzU2XXw3NzRbNDVdKVxcXFxkezh9fDdbNi04XVxcXFxkezd9XCJdXV0sXCI4NzhcIjpbXCI4NzhcIiwwLFwiMTBcXFxcZHsxMH1cIixbMTJdLFtbXCIoXFxcXGR7Mn0pKFxcXFxkezV9KShcXFxcZHs1fSlcIixcIiQxICQyICQzXCIsW1wiMVwiXV1dLDAsMCwwLDAsMCwwLFswLDAsMCwwLDAsMCwwLDAsW1wiMTBcXFxcZHsxMH1cIl1dXSxcIjg4MVwiOltcIjg4MVwiLDAsXCJbMC0zNi05XVxcXFxkezh9XCIsWzldLFtbXCIoXFxcXGQpKFxcXFxkezN9KShcXFxcZHs1fSlcIixcIiQxICQyICQzXCIsW1wiWzAtMzYtOV1cIl1dXSwwLDAsMCwwLDAsMCxbMCxbXCJbMC0zNi05XVxcXFxkezh9XCJdXV0sXCI4ODJcIjpbXCI4ODJcIiwwLFwiWzEzXVxcXFxkezZ9KD86XFxcXGR7Miw1fSk/fFsxOV1cXFxcZHs3fXwoPzpbMjVdXFxcXGRcXFxcZHw0KVxcXFxkezd9KD86XFxcXGR7Mn0pP1wiLFs3LDgsOSwxMCwxMSwxMl0sW1tcIihcXFxcZHsyfSkoXFxcXGR7NX0pXCIsXCIkMSAkMlwiLFtcIjE2fDM0MlwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHs2fSlcIixcIiQxICQyXCIsW1wiNDlcIl1dLFtcIihcXFxcZHsyfSkoXFxcXGR7Mn0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIxWzM2XXw5XCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezR9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiM1syM11cIl1dLFtcIihcXFxcZHsyfSkoXFxcXGR7Myw0fSkoXFxcXGR7NH0pXCIsXCIkMSAkMiAkM1wiLFtcIjE2XCJdXSxbXCIoXFxcXGR7Mn0pKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMTB8MjN8Myg/OlsxNV18NFs1N10pfDR8NTFcIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCIzNFwiXV0sW1wiKFxcXFxkezJ9KShcXFxcZHs0LDV9KShcXFxcZHs1fSlcIixcIiQxICQyICQzXCIsW1wiWzEtMzVdXCJdXV0sMCwwLDAsMCwwLDAsWzAsW1wiMzQyXFxcXGR7NH18KD86MzM3fDQ5KVxcXFxkezZ9fCg/OjMoPzoyfDQ3fDdcXFxcZHszfSl8NTBcXFxcZHszfSlcXFxcZHs3fVwiLFs3LDgsOSwxMCwxMl1dLDAsMCwwLDAsMCwwLFtcIjEoPzozKD86MFswMzQ3XXxbMTNdWzAxMzldfDJbMDM1XXw0WzAxMzU2OF18NlswNDU5XXw3WzA2XXw4WzE1LThdfDlbMDY4OV0pXFxcXGR7NH18NlxcXFxkezUsMTB9KXwoPzozNDVcXFxcZHw5Wzg5XSlcXFxcZHs2fXwoPzoxMHwyKD86M3w4NVxcXFxkKXwzKD86WzE1XXxbNjldXFxcXGRcXFxcZCl8NFsxNS04XXw1MSlcXFxcZHs4fVwiXV1dLFwiODgzXCI6W1wiODgzXCIsMCxcIig/OlsxLTRdXFxcXGR8NTEpXFxcXGR7NiwxMH1cIixbOCw5LDEwLDExLDEyXSxbW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7Miw4fSlcIixcIiQxICQyICQzXCIsW1wiWzE0XXwyWzI0LTY4OV18M1swMi02ODldfDUxWzI0LTldXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzXCIsW1wiNTEwXCJdXSxbXCIoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiMjFcIl1dLFtcIihcXFxcZHs0fSkoXFxcXGR7NH0pKFxcXFxkezR9KVwiLFwiJDEgJDIgJDNcIixbXCI1MVsxM11cIl1dLFtcIihcXFxcZHszfSkoXFxcXGR7M30pKFxcXFxkezN9KShcXFxcZHszfSlcIixcIiQxICQyICQzICQ0XCIsW1wiWzIzNV1cIl1dXSwwLDAsMCwwLDAsMCxbMCwwLDAsMCwwLDAsMCwwLFtcIig/OjIoPzowMFxcXFxkXFxcXGR8MTApfCg/OjM3MFsxLTldfDUxXFxcXGQwKVxcXFxkKVxcXFxkezd9fDUxKD86MDBcXFxcZHs1fXxbMjQtOV0wXFxcXGR7NCw3fSl8KD86MVswMTMtNzldfDJbMjQtNjg5XXwzWzAyLTY4OV18NFswLTRdKTBcXFxcZHs1LDl9XCJdXV0sXCI4ODhcIjpbXCI4ODhcIiwwLFwiXFxcXGR7MTF9XCIsWzExXSxbW1wiKFxcXFxkezN9KShcXFxcZHszfSkoXFxcXGR7NX0pXCIsXCIkMSAkMiAkM1wiXV0sMCwwLDAsMCwwLDAsWzAsMCwwLDAsMCwwLFtcIlxcXFxkezExfVwiXV1dLFwiOTc5XCI6W1wiOTc5XCIsMCxcIlsxMzU5XVxcXFxkezh9XCIsWzldLFtbXCIoXFxcXGQpKFxcXFxkezR9KShcXFxcZHs0fSlcIixcIiQxICQyICQzXCIsW1wiWzEzNTldXCJdXV0sMCwwLDAsMCwwLDAsWzAsMCwwLFtcIlsxMzU5XVxcXFxkezh9XCJdXV19fSIsIi8vIEltcG9ydGluZyBmcm9tIGEgXCIuanNcIiBmaWxlIGlzIGEgd29ya2Fyb3VuZCBmb3IgTm9kZS5qcyBcIkVTIE1vZHVsZXNcIlxyXG4vLyBpbXBvcnRpbmcgc3lzdGVtIHdoaWNoIGlzIGV2ZW4gdW5jYXBhYmxlIG9mIGltcG9ydGluZyBcIiouanNvblwiIGZpbGVzLlxyXG5pbXBvcnQgbWV0YWRhdGEgZnJvbSAnLi4vLi4vbWV0YWRhdGEubWluLmpzb24uanMnXHJcblxyXG5pbXBvcnQgeyBBc1lvdVR5cGUgYXMgX0FzWW91VHlwZSB9IGZyb20gJy4uLy4uL2NvcmUvaW5kZXguanMnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQXNZb3VUeXBlKGNvdW50cnkpIHtcclxuXHRyZXR1cm4gX0FzWW91VHlwZS5jYWxsKHRoaXMsIGNvdW50cnksIG1ldGFkYXRhKVxyXG59XHJcblxyXG5Bc1lvdVR5cGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShfQXNZb3VUeXBlLnByb3RvdHlwZSwge30pXHJcbkFzWW91VHlwZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBc1lvdVR5cGUiLCJpbXBvcnQgd2l0aE1ldGFkYXRhQXJndW1lbnQgZnJvbSAnLi93aXRoTWV0YWRhdGFBcmd1bWVudC5qcydcclxuaW1wb3J0IHsgaXNWYWxpZFBob25lTnVtYmVyIGFzIF9pc1ZhbGlkUGhvbmVOdW1iZXIgfSBmcm9tICcuLi8uLi9jb3JlL2luZGV4LmpzJ1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRQaG9uZU51bWJlcigpIHtcclxuXHRyZXR1cm4gd2l0aE1ldGFkYXRhQXJndW1lbnQoX2lzVmFsaWRQaG9uZU51bWJlciwgYXJndW1lbnRzKVxyXG59IiwiLy8gSW1wb3J0aW5nIGZyb20gYSBcIi5qc1wiIGZpbGUgaXMgYSB3b3JrYXJvdW5kIGZvciBOb2RlLmpzIFwiRVMgTW9kdWxlc1wiXHJcbi8vIGltcG9ydGluZyBzeXN0ZW0gd2hpY2ggaXMgZXZlbiB1bmNhcGFibGUgb2YgaW1wb3J0aW5nIFwiKi5qc29uXCIgZmlsZXMuXHJcbmltcG9ydCBtZXRhZGF0YSBmcm9tICcuLi8uLi9tZXRhZGF0YS5taW4uanNvbi5qcydcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdpdGhNZXRhZGF0YUFyZ3VtZW50KGZ1bmMsIF9hcmd1bWVudHMpIHtcclxuXHR2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKF9hcmd1bWVudHMpXHJcblx0YXJncy5wdXNoKG1ldGFkYXRhKVxyXG5cdHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpXHJcbn0iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCB7IEFzWW91VHlwZSwgaXNWYWxpZFBob25lTnVtYmVyIH0gZnJvbSBcImxpYnBob25lbnVtYmVyLWpzXCI7XHJcblxyXG5mdW5jdGlvbiBudW1iZXJXaXRoU3BhY2VzKHg6IG51bWJlcikge1xyXG4gIHJldHVybiB4LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxCKD89KFxcZHszfSkrKD8hXFxkKSkvZywgXCIgXCIpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzZXRJbnB1dEZpbHRlcih0ZXh0Ym94OiBFbGVtZW50LCBpbnB1dEZpbHRlcjogKHZhbHVlOiBzdHJpbmcpID0+IGJvb2xlYW4sIGVyck1zZzogc3RyaW5nKSB7XHJcbiAgW1wiaW5wdXRcIiwgXCJrZXlkb3duXCIsIFwia2V5dXBcIiwgXCJtb3VzZWRvd25cIiwgXCJtb3VzZXVwXCIsIFwic2VsZWN0XCIsIFwiY29udGV4dG1lbnVcIiwgXCJkcm9wXCIsIFwiZm9jdXNvdXRcIl0uZm9yRWFjaChmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgIHRleHRib3guYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgaWYgKGlucHV0RmlsdGVyKHRoaXMudmFsdWUpKSB7XHJcbiAgICAgICAgLy8gQWNjZXB0ZWQgdmFsdWUuXHJcbiAgICAgICAgaWYgKFtcImtleWRvd25cIiwgXCJtb3VzZWRvd25cIiwgXCJmb2N1c291dFwiXS5pbmRleE9mKGUudHlwZSkgPj0gMCkge1xyXG4gICAgICAgICAgdGhpcy5jbGFzc0xpc3QucmVtb3ZlKFwiaW5wdXQtZXJyb3JcIik7XHJcbiAgICAgICAgICB0aGlzLnNldEN1c3RvbVZhbGlkaXR5KFwiXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vbGRWYWx1ZSA9IHRoaXMudmFsdWU7XHJcbiAgICAgICAgdGhpcy5vbGRTZWxlY3Rpb25TdGFydCA9IHRoaXMuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgICAgICAgdGhpcy5vbGRTZWxlY3Rpb25FbmQgPSB0aGlzLnNlbGVjdGlvbkVuZDtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLmhhc093blByb3BlcnR5KFwib2xkVmFsdWVcIikpIHtcclxuICAgICAgICAvLyBSZWplY3RlZCB2YWx1ZTogcmVzdG9yZSB0aGUgcHJldmlvdXMgb25lLlxyXG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZChcImlucHV0LWVycm9yXCIpO1xyXG4gICAgICAgIHRoaXMuc2V0Q3VzdG9tVmFsaWRpdHkoZXJyTXNnKTtcclxuICAgICAgICB0aGlzLnJlcG9ydFZhbGlkaXR5KCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMub2xkVmFsdWU7XHJcbiAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25SYW5nZSh0aGlzLm9sZFNlbGVjdGlvblN0YXJ0LCB0aGlzLm9sZFNlbGVjdGlvbkVuZCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gUmVqZWN0ZWQgdmFsdWU6IG5vdGhpbmcgdG8gcmVzdG9yZS5cclxuICAgICAgICB0aGlzLnZhbHVlID0gXCJcIjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldElucHV0RmlsdGVyV2l0aFdoaXRlc3BhY2VzKHRleHRib3g6IEVsZW1lbnQsIGlucHV0RmlsdGVyOiAodmFsdWU6IHN0cmluZykgPT4gYm9vbGVhbiwgZXJyTXNnOiBzdHJpbmcpIHtcclxuICBbXCJpbnB1dFwiLCBcImtleWRvd25cIiwgXCJrZXl1cFwiLCBcIm1vdXNlZG93blwiLCBcIm1vdXNldXBcIiwgXCJzZWxlY3RcIiwgXCJjb250ZXh0bWVudVwiLCBcImRyb3BcIiwgXCJmb2N1c291dFwiXS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgdGV4dGJveC5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICBpZiAoaW5wdXRGaWx0ZXIodGhpcy52YWx1ZSkpIHtcclxuICAgICAgICAvLyBBY2NlcHRlZCB2YWx1ZS5cclxuICAgICAgICBpZiAoW1wia2V5ZG93blwiLCBcIm1vdXNlZG93blwiLCBcImZvY3Vzb3V0XCJdLmluZGV4T2YoZS50eXBlKSA+PSAwKSB7XHJcbiAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoXCJpbnB1dC1lcnJvclwiKTtcclxuICAgICAgICAgIHRoaXMuc2V0Q3VzdG9tVmFsaWRpdHkoXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnZhbHVlID0gbnVtYmVyV2l0aFNwYWNlcyh0aGlzLnZhbHVlLnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpKTtcclxuICAgICAgICB0aGlzLm9sZFZhbHVlID0gbnVtYmVyV2l0aFNwYWNlcyh0aGlzLnZhbHVlLnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpKTtcclxuICAgICAgICB0aGlzLm9sZFNlbGVjdGlvblN0YXJ0ID0gdGhpcy5zZWxlY3Rpb25TdGFydDtcclxuICAgICAgICB0aGlzLm9sZFNlbGVjdGlvbkVuZCA9IHRoaXMuc2VsZWN0aW9uRW5kO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoXCJvbGRWYWx1ZVwiKSkge1xyXG4gICAgICAgIC8vIFJlamVjdGVkIHZhbHVlOiByZXN0b3JlIHRoZSBwcmV2aW91cyBvbmUuXHJcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKFwiaW5wdXQtZXJyb3JcIik7XHJcbiAgICAgICAgdGhpcy5zZXRDdXN0b21WYWxpZGl0eShlcnJNc2cpO1xyXG4gICAgICAgIHRoaXMucmVwb3J0VmFsaWRpdHkoKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5vbGRWYWx1ZTtcclxuICAgICAgICB0aGlzLnNldFNlbGVjdGlvblJhbmdlKHRoaXMub2xkU2VsZWN0aW9uU3RhcnQsIHRoaXMub2xkU2VsZWN0aW9uRW5kKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICAvLyBSZWplY3RlZCB2YWx1ZTogbm90aGluZyB0byByZXN0b3JlLlxyXG4gICAgICAgIHRoaXMudmFsdWUgPSBcIlwiO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG5cclxuaW50ZXJmYWNlIElXaWRnZXRQYXJhbXMge1xyXG4gIGNvbnRhaW5lcj86IHN0cmluZztcclxuICBpbm4/OiBzdHJpbmc7XHJcbiAgcGFydG5lckNvbXBhbnlJZDogc3RyaW5nO1xyXG4gIHBhcnRuZXJVc2VySWQ6IHN0cmluZztcclxuICBmb250RmFtaWx5Pzogc3RyaW5nO1xyXG4gIHN0eWxlPzogc3RyaW5nO1xyXG4gIG1hcmtlclN0eWxlPzogc3RyaW5nO1xyXG4gIGFwaVVybD86IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlTVlGSVdpZGdldChwYXJhbXM/OiBJV2lkZ2V0UGFyYW1zKSB7XHJcbiAgY29uc3QgY29udGFpbmVyID0gcGFyYW1zLmNvbnRhaW5lciB8fCBcIi53LXdyYXBcIjtcclxuICBjb25zdCBpbm4gPSBwYXJhbXMuaW5uIHx8IFwiXCI7XHJcbiAgY29uc3QgcGFydG5lckNvbXBhbnlJZCA9IHBhcmFtcy5wYXJ0bmVyQ29tcGFueUlkO1xyXG4gIGNvbnN0IHBhcnRuZXJVc2VySWQgPSBwYXJhbXMucGFydG5lclVzZXJJZDtcclxuICBjb25zdCBmb250RmFtaWx5ID0gcGFyYW1zLmZvbnRGYW1pbHkgfHwgXCJSb2JvdG9cIjtcclxuICBjb25zdCBzdHlsZSA9IHBhcmFtcy5zdHlsZSB8fCBcIlwiO1xyXG4gIGNvbnN0IG1hcmtlclN0eWxlID0gcGFyYW1zLm1hcmtlclN0eWxlIHx8IFwiXCI7XHJcbiAgY29uc3QgYXBpVXJsID0gcGFyYW1zLmFwaVVybCB8fCBcImh0dHBzOi8vYXBpLm1pcm15ZmkucnUvdjNcIjtcclxuXHJcbiAgY29uc3QgY3NzID0gYFxyXG4gIDpyb290IHtcclxuICAgIC0tYmctZ3JheTogI2VjZjFmNztcclxuICAgIC0tYmctYWN0aXZlOiAjZmZmZmZmO1xyXG4gICAgLS1ib3JkZXI6ICMwMDA7XHJcbiAgICAtLW1haW4tZ3JheTogIzgyODI4MjtcclxuICAgIC0tdGV4dDogIzMzMzMzMztcclxuICAgIC0tZXJyb3ItYmc6ICNmZmQ5ZDk7XHJcbiAgICAtLWVycm9yLW1haW46ICNlYjU3NTc7XHJcbiAgICAtLW1haW4teWVsbG93OiAjZjJjOTRjO1xyXG4gICAgLS1zZWNvbmRhcnkteWVsbG93OiAjY2FhNTM2O1xyXG4gICAgLS1jaGVja2JveDogIzI3YWU2MDtcclxuICB9XHJcbiAgXHJcbiAgLnctY29udGFpbmVyICoge1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICB9XHJcbiAgXHJcbiAgLnRlc3Qge1xyXG4gICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgY29sb3I6IHNhbG1vbjtcclxuICB9XHJcbiAgXHJcbiAgLnctY29udGFpbmVyIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gIFxyXG4gICAgYm9yZGVyLXJhZGl1czogMTVweDtcclxuICB9XHJcbiAgXHJcbiAgLnctZ3JpZCB7XHJcbiAgICBkaXNwbGF5OiBncmlkO1xyXG4gICAgZ2FwOiAxMHB4O1xyXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xyXG4gIH1cclxuICBcclxuICAudy1maWVsZC13cmFwIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgaGVpZ2h0OiA4MHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmctZ3JheSk7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgcGFkZGluZzogMTJweCAyNnB4O1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcclxuICB9XHJcbiAgXHJcbiAgLnctZmllbGQtd3JhcC53LWZvY3VzZWQge1xyXG4gICAgLyogYm9yZGVyOiAxcHggc29saWQgYmxhY2s7ICovXHJcbiAgfVxyXG4gIFxyXG4gIC53LWZpZWxkLW5hbWUge1xyXG4gICAgZm9udC1zaXplOiAxOHB4O1xyXG4gICAgY29sb3I6IHZhcigtLW1haW4tZ3JheSk7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHRvcDogMTVweDtcclxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gICAgei1pbmRleDogMTA7XHJcbiAgfVxyXG4gIFxyXG4gIC53LWZpZWxkLW5hbWUudy1hY3RpdmUge1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XHJcbiAgICB0b3A6IDA7XHJcbiAgfVxyXG4gIFxyXG4gIC53LWlucHV0IHtcclxuICAgIGJvcmRlci13aWR0aDogMDtcclxuICAgIC8qIGhlaWdodDogMzBweDsgKi9cclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnLWdyYXkpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gICAgdHJhbnNpdGlvbjogYWxsIDAuMnM7XHJcbiAgICBtYXJnaW4tdG9wOiA5cHg7XHJcbiAgICBmb250LXNpemU6IDI0cHg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBoZWlnaHQ6IDU4cHg7XHJcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gMzBweCk7XHJcbiAgfVxyXG4gIFxyXG4gIGlucHV0OmZvY3VzIHtcclxuICAgIG91dGxpbmU6IG5vbmU7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcclxuICB9XHJcbiAgXHJcbiAgLnctaW5wdXQudy10ZXJtIHtcclxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gIH1cclxuICBcclxuICAudy1zbGlkZXIge1xyXG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xyXG4gICAgYXBwZWFyYW5jZTogbm9uZTtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxcHg7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tYmctZ3JheSk7XHJcbiAgICBvdXRsaW5lOiBub25lO1xyXG4gICAgb3BhY2l0eTogMC44O1xyXG4gICAgLXdlYmtpdC10cmFuc2l0aW9uOiAwLjJzO1xyXG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAwLjJzO1xyXG4gIFxyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgYm90dG9tOiAtMXB4O1xyXG4gICAgbGVmdDogNXB4O1xyXG4gICAgd2lkdGg6IGNhbGMoMTAwJSAtIDE0cHgpO1xyXG4gICAgbWFyZ2luOiAycHg7XHJcbiAgfVxyXG5cclxuXHJcbiAgLnctc2xpZGVyLWFjdGl2ZS1wb3J0aW9uIHtcclxuICAgIGJvcmRlci1ib3R0b206IDJweCB2YXIoLS1tYWluLXllbGxvdykgc29saWQ7XHJcbiAgICBoZWlnaHQ6IDJweDtcclxuICAgIC8qIGJhY2tncm91bmQtY29sb3I6ICMwMDA7ICovXHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IDBweDtcclxuICAgIGxlZnQ6IDdweDtcclxuICAgIHotaW5kZXg6IDExMTE7XHJcbiAgICB3aWR0aDogMDtcclxuICAgIG1heC13aWR0aDogY2FsYygxMDAlIC0gMTRweCk7XHJcbiAgfVxyXG4gIFxyXG4gIC53LXNsaWRlcjpob3ZlciB7XHJcbiAgICBvcGFjaXR5OiAxO1xyXG4gIH1cclxuICBcclxuICAudy1zbGlkZXI6Oi13ZWJraXQtc2xpZGVyLXRodW1iIHtcclxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcclxuICAgIGFwcGVhcmFuY2U6IG5vbmU7XHJcbiAgICB3aWR0aDogMTRweDtcclxuICAgIGhlaWdodDogMTRweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIGJhY2tncm91bmQ6IHZhcigtLW1haW4teWVsbG93KTtcclxuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbWFpbi15ZWxsb3cpO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG5cclxuICB9XHJcblxyXG4gIFxyXG4gIC53LXNsaWRlcjo6LW1vei1yYW5nZS10aHVtYiB7XHJcbiAgICB3aWR0aDogMTRweDtcclxuICAgIGhlaWdodDogMTRweDtcclxuICAgIGJhY2tncm91bmQ6IHZhcigtLW1haW4teWVsbG93KTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIGJvcmRlci1jb2xvcjogdmFyKC0tbWFpbi15ZWxsb3cpO1xyXG4gIH1cclxuICBcclxuICAudy1zdWJtaXQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWFpbi15ZWxsb3cpO1xyXG4gICAgYm9yZGVyLXdpZHRoOiAwO1xyXG4gICAgaGVpZ2h0OiA2MHB4O1xyXG4gICAgd2lkdGg6IDI0MHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTBweDtcclxuICAgIGZvbnQtc2l6ZTogMjRweDtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIHRyYW5zaXRpb246IGFsbCAwLjJzO1xyXG4gICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICB9XHJcbiAgXHJcbiAgLnctc3VibWl0LmRpc2FibGVkIHtcclxuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gICAgb3BhY2l0eTogMC41O1xyXG4gIH1cclxuICBcclxuICAudy1hZ3JlZW1lbnQtd3JhcCB7XHJcbiAgICBncmlkLWNvbHVtbjogc3BhbiAyO1xyXG4gICAgLy8gd2lkdGg6IDgwJTtcclxuICAgIG1hcmdpbjogMzBweCBhdXRvO1xyXG4gIH1cclxuICBcclxuICAudy1jaGVja2JveCB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB6LWluZGV4OiAtMTtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgfVxyXG4gIFxyXG4gIC53LWNoZWNrYm94ICsgbGFiZWwge1xyXG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgfVxyXG4gIC53LWNoZWNrYm94ICsgbGFiZWw6OmJlZm9yZSB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgd2lkdGg6IDFlbTtcclxuICAgIGhlaWdodDogMWVtO1xyXG4gICAgZmxleC1zaHJpbms6IDA7XHJcbiAgICBmbGV4LWdyb3c6IDA7XHJcbiAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1zZWNvbmRhcnkteWVsbG93KTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDAuMjVlbTtcclxuICAgIG1hcmdpbi1yaWdodDogMC41ZW07XHJcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gICAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyIGNlbnRlcjtcclxuICAgIGJhY2tncm91bmQtc2l6ZTogNTAlIDUwJTtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICB9XHJcbiAgXHJcbiAgLnctY2hlY2tib3g6Y2hlY2tlZCArIGxhYmVsOjpiZWZvcmUge1xyXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1tYWluLXllbGxvdyk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1tYWluLXllbGxvdyk7XHJcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCJkYXRhOmltYWdlL3N2Zyt4bWwsJTNjc3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgdmlld0JveD0nMCAwIDggOCclM2UlM2NwYXRoIGZpbGw9JyUyM2ZmZicgZD0nTTYuNTY0Ljc1bC0zLjU5IDMuNjEyLTEuNTM4LTEuNTVMMCA0LjI2IDIuOTc0IDcuMjUgOCAyLjE5M3onLyUzZSUzYy9zdmclM2VcIik7XHJcbiAgfVxyXG4gIFxyXG4gIC8qINGB0YLQuNC70Lgg0L/RgNC4INC90LDQstC10LTQtdC90LjQuCDQutGD0YDRgdC+0YDQsCDQvdCwIGNoZWNrYm94ICovXHJcbiAgLnctY2hlY2tib3g6bm90KDpkaXNhYmxlZCk6bm90KDpjaGVja2VkKSArIGxhYmVsOmhvdmVyOjpiZWZvcmUge1xyXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnkteWVsbG93KTtcclxuICB9XHJcbiAgLyog0YHRgtC40LvQuCDQtNC70Y8g0LDQutGC0LjQstC90L7Qs9C+INGB0L7RgdGC0L7Rj9C90LjRjyDRh9C10LrQsdC+0LrRgdCwICjQv9GA0Lgg0L3QsNC20LDRgtC40Lgg0L3QsCDQvdC10LPQvikgKi9cclxuICAudy1jaGVja2JveDpub3QoOmRpc2FibGVkKTphY3RpdmUgKyBsYWJlbDo6YmVmb3JlIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXNlY29uZGFyeS15ZWxsb3cpO1xyXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnkteWVsbG93KTtcclxuICB9XHJcbiAgLyog0YHRgtC40LvQuCDQtNC70Y8g0YfQtdC60LHQvtC60YHQsCwg0L3QsNGF0L7QtNGP0YnQtdCz0L7RgdGPINCyINGE0L7QutGD0YHQtSAqL1xyXG4gIC53LWNoZWNrYm94OmZvY3VzICsgbGFiZWw6OmJlZm9yZSB7XHJcbiAgICBib3gtc2hhZG93OiAwIDAgMCAwLjJyZW0gI2NhYTUzNjMwO1xyXG4gIH1cclxuICAvKiDRgdGC0LjQu9C4INC00LvRjyDRh9C10LrQsdC+0LrRgdCwLCDQvdCw0YXQvtC00Y/RidC10LPQvtGB0Y8g0LIg0YTQvtC60YPRgdC1INC4INC90LUg0L3QsNGF0L7QtNGP0YnQtdCz0L7RgdGPINCyINGB0L7RgdGC0L7Rj9C90LjQuCBjaGVja2VkICovXHJcbiAgLnctY2hlY2tib3g6Zm9jdXM6bm90KDpjaGVja2VkKSArIGxhYmVsOjpiZWZvcmUge1xyXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1zZWNvbmRhcnkteWVsbG93KTtcclxuICB9XHJcbiAgLyog0YHRgtC40LvQuCDQtNC70Y8g0YfQtdC60LHQvtC60YHQsCwg0L3QsNGF0L7QtNGP0YnQtdCz0L7RgdGPINCyINGB0L7RgdGC0L7Rj9C90LjQuCBkaXNhYmxlZCAqL1xyXG4gIC53LWNoZWNrYm94OmRpc2FibGVkICsgbGFiZWw6OmJlZm9yZSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XHJcbiAgfVxyXG4gIFxyXG4gIC53LWFncmVlbWVudCB7XHJcbiAgICBmb250LXNpemU6IDE2cHg7XHJcbiAgICBjb2xvcjogdmFyKC0tbWFpbi1ncmF5KTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogYmFzZWxpbmU7XHJcbiAgICBwYWRkaW5nOiAzcHggMDtcclxuICB9XHJcbiAgXHJcbiAgLnctbGluayB7XHJcbiAgICBjb2xvcjogdmFyKC0tbWFpbi1ncmF5KTtcclxuICAgIHRyYW5zaXRpb246IGFsbCAwLjJzO1xyXG4gIH1cclxuICBcclxuICAudy1saW5rOmhvdmVyIHtcclxuICAgIGNvbG9yOiB2YXIoLS1tYWluLXllbGxvdyk7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcclxuICB9XHJcbiAgXHJcbiAgLnctc3VibWl0OmhvdmVyIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNmY2MzMTk7XHJcbiAgICB0cmFuc2l0aW9uOiBhbGwgMC4ycztcclxuICB9XHJcblxyXG4gIHVsIC53LWJhbmstaXRlbTo6bWFya2VyIHtcclxuICAgIGNvbG9yOiB2YXIoLS1tYWluLXllbGxvdyk7XHJcbiAgICAke21hcmtlclN0eWxlfVxyXG4gIH1cclxuXHJcbiAgYDtcclxuICBjb25zdCBodG1sID0gYFxyXG48ZGl2IGNsYXNzPVwidy1jb250YWluZXJcIj5cclxuPGRpdiBjbGFzcz1cInctZ3JpZFwiPlxyXG5cclxuPCEtLSA8ZGl2IGNsYXNzPVwidy1maWVsZC13cmFwXCI+XHJcbiAgPHNwYW4gY2xhc3M9XCJ3LWZpZWxkLW5hbWUgdy1hY3RpdmVcIj7Qn9GA0L7QtNGD0LrRgjwvc3Bhbj5cclxuICA8c3BhbiBjbGFzcz1cInctc2VsZWN0ZWRcIj7QmtGA0LXQtNC40YI8L3NwYW4+XHJcbiAgPHVsIGNsYXNzPVwidy1kcm9wZG93blwiPlxyXG4gICAgPGxpPtCa0YDQtdC00LjRgjwvbGk+XHJcbiAgICA8bGk+0KTQsNC60YLQvtGA0LjQvdCzPC9saT5cclxuICAgIDxsaT7Qm9C40LfQuNC90LM8L2xpPlxyXG4gICAgPGxpPtCR0LDQvdC60L7QstGB0LrQuNC1INCz0LDRgNCw0L3RgtC40Lg8L2xpPlxyXG4gIDwvdWw+XHJcbjwvZGl2PlxyXG48c3Bhbj48L3NwYW4+IC0tPlxyXG48ZGl2IGNsYXNzPVwidy1maWVsZC13cmFwIHctdGVybVwiPlxyXG4gIDxzcGFuIGNsYXNzPVwidy1maWVsZC1uYW1lIHctYWN0aXZlXCI+0KHRgNC+0Lo8L3NwYW4+XHJcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ3LWlucHV0IHctdGVybVwiIHZhbHVlPVwiMyDQvNC10YHRj9GG0LBcIiAvPlxyXG4gIDxpbnB1dCB0eXBlPVwicmFuZ2VcIiBtaW49XCIzXCIgbWF4PVwiMzZcIiB2YWx1ZT1cIjNcIiBjbGFzcz1cInctc2xpZGVyIHctdGVybVwiIGlkPVwibXlSYW5nZVwiIC8+XHJcbiAgPGRpdiBjbGFzcz1cInctdGVybSB3LXNsaWRlci1hY3RpdmUtcG9ydGlvblwiPjwvZGl2PlxyXG48L2Rpdj5cclxuPGRpdiBjbGFzcz1cInctZmllbGQtd3JhcCB3LXN1bVwiPlxyXG4gIDxzcGFuIGNsYXNzPVwidy1maWVsZC1uYW1lIHctYWN0aXZlXCI+0KHRg9C80LzQsCwg4oK9PC9zcGFuPlxyXG4gIDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwidy1pbnB1dCB3LXN1bVwiIHZhbHVlPVwiMTAgMDAwXCIgLz5cclxuICA8aW5wdXQgdHlwZT1cInJhbmdlXCIgbWluPVwiMVwiIG1heD1cIjUwMDAwXCIgdmFsdWU9XCIxXCIgY2xhc3M9XCJ3LXNsaWRlciB3LXN1bVwiIGlkPVwibXlSYW5nZVwiIC8+XHJcbiAgPGRpdiBjbGFzcz1cInctc3VtIHctc2xpZGVyLWFjdGl2ZS1wb3J0aW9uXCI+PC9kaXY+XHJcbjwvZGl2PlxyXG5cclxuPHVsPlxyXG48bGkgY2xhc3M9J3ctYmFuay1pdGVtJz50ZXN0PC9saT48bGkgY2xhc3M9J3ctYmFuay1pdGVtJz50ZXN0PC9saT5cclxuPC91bD5cclxuXHJcblxyXG48ZGl2IGNsYXNzPVwidy1maWVsZC13cmFwXCI+XHJcbiAgPHNwYW4gY2xhc3M9XCJ3LWZpZWxkLW5hbWVcIj7QpNCw0LzQuNC70LjRjyo8L3NwYW4+XHJcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ3LWlucHV0IHctbGFzdG5hbWVcIiAvPlxyXG48L2Rpdj5cclxuPGRpdiBjbGFzcz1cInctZmllbGQtd3JhcFwiPlxyXG4gIDxzcGFuIGNsYXNzPVwidy1maWVsZC1uYW1lXCI+0JjQvNGPKjwvc3Bhbj5cclxuICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cInctaW5wdXQgdy0xc3RuYW1lXCIgLz5cclxuPC9kaXY+XHJcbjxkaXYgY2xhc3M9XCJ3LWZpZWxkLXdyYXBcIj5cclxuICA8c3BhbiBjbGFzcz1cInctZmllbGQtbmFtZVwiPtCe0YLRh9C10YHRgtCy0L48L3NwYW4+XHJcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ3LWlucHV0IHctMm5kbmFtZVwiIC8+XHJcbjwvZGl2PlxyXG48ZGl2IGNsYXNzPVwidy1maWVsZC13cmFwXCI+XHJcbiAgPHNwYW4gY2xhc3M9XCJ3LWZpZWxkLW5hbWUgICR7ISFpbm4gPyBcInctYWN0aXZlXCIgOiBcIlwifVwiPtCY0J3QnSo8L3NwYW4+XHJcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ3LWlucHV0IHctaW5uXCIgLz5cclxuPC9kaXY+XHJcblxyXG48ZGl2IGNsYXNzPVwidy1maWVsZC13cmFwXCI+XHJcbiAgPHNwYW4gY2xhc3M9XCJ3LWZpZWxkLW5hbWUgdy1hY3RpdmVcIj7QotC10LvQtdGE0L7QvSo8L3NwYW4+XHJcbiAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJ3LWlucHV0IHctcGhvbmVcIiB2YWx1ZT1cIitcIiAvPlxyXG48L2Rpdj5cclxuPGRpdiBjbGFzcz1cInctZmllbGQtd3JhcFwiPlxyXG4gIDxzcGFuIGNsYXNzPVwidy1maWVsZC1uYW1lXCI+0K3Qu9C10LrRgtGA0L7QvdC90LDRjyDQv9C+0YfRgtCwKjwvc3Bhbj5cclxuICA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cInctaW5wdXQgdy1lbWFpbFwiIC8+XHJcbjwvZGl2PlxyXG48L2Rpdj5cclxuPGRpdiBjbGFzcz1cInctYWdyZWVtZW50LXdyYXBcIj5cclxuXHJcbjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInctY2hlY2tib3hcIiBpZD1cImFncmVlMlwiIG5hbWU9XCJhZ3JlZTJcIiB2YWx1ZT1cInRydWVcIiAvPlxyXG48bGFiZWwgY2xhc3M9XCJ3LWFncmVlbWVudFwiIGZvcj1cImFncmVlMlwiXHJcbiAgPjxzcGFuXHJcbiAgICA+0J3QsNGB0YLQvtGP0YnQuNC8LCDQsiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Lgg0YHQviDRgdGCLiA5INCk0LXQtNC10YDQsNC70YzQvdC+0LPQviDQt9Cw0LrQvtC90LAg0L7RgiAyNy4wNy4yMDA2IOKEliAxNTIt0KTQlyDCq9CeINC/0LXRgNGB0L7QvdCw0LvRjNC90YvRhSDQtNCw0L3QvdGL0YXCuywg0K8g0LLRi9GA0LDQttCw0Y4g0YHQstC+0LUg0YHQvtCz0LvQsNGB0LjQtSDQntCe0J4gwqvQnNCw0LnRhNC4wrssINCY0J3QnSA3NzAyNDU0NjY0LCDQvdCwINC+0LHRgNCw0LHQvtGC0LrRgyDQuCDQtNCw0LvRjNC90LXQudGI0YPRjiDQv9C10YDQtdC00LDRh9GDINCyINCw0LTRgNC10YEg0LrRgNC10LTQuNGC0L3Ri9GFINC+0YDQs9Cw0L3QuNC30LDRhtC40LksINGD0LrQsNC30LDQvdC90YvRhSDQsiDRjdC70LXQutGC0YDQvtC90L3QvtC5INC30LDRj9Cy0LrQtSDQv9C10YDRgdC+0L3QsNC70YzQvdGL0YUg0LTQsNC90L3Ri9GFINC4INC90LDQv9GA0LDQstC70Y/QtdC80YvRhSDQvNC90L7RjiDQsiDQv9GA0L7RhtC10YHRgdC1INGA0LDRgdGB0LzQvtGC0YDQtdC90LjRjyDRjdC70LXQutGC0YDQvtC90L3QvtC5INC30LDRj9Cy0LrQuCDQtNC+0LrRg9C80LXQvdGC0LDRhSDQv9C+0LTRgtCy0LXRgNC20LTQsNGOLCDRh9GC0L4g0LTQsNGOINGC0LDQutC+0LUg0YHQvtCz0LvQsNGB0LjQtSDRgdCy0L7QsdC+0LTQvdC+LCDRgdCy0L7QtdC5INCy0L7Qu9C10Lkg0Lgg0LIg0YHQstC+0LXQvCDQuNC90YLQtdGA0LXRgdC1LiDQodC+0LPQu9Cw0YHQuNC1INC00LDQtdGC0YHRjyDQvNC90L7QuSwg0LTQu9GPINGG0LXQu9C10Lkg0YDQsNGB0YHQvNC+0YLRgNC10L3QuNGPINC60YDQtdC00LjRgtC90L7QuSDQvtGA0LPQsNC90LjQt9Cw0YbQuNC10Lkg0LLQvtC/0YDQvtGB0L7QsiDQviDQstC+0LfQvNC+0LbQvdC+0YHRgtC4INC/0YDQtdC00L7RgdGC0LDQstC70LXQvdC40Y8g0LzQvdC1INC60YDQtdC00LjRgtC90YvRhSDQv9GA0L7QtNGD0LrRgtC+0LIuPC9sYWJlbFxyXG4+XHJcbjxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cInctY2hlY2tib3hcIiBpZD1cImFncmVlM1wiIG5hbWU9XCJhZ3JlZTNcIiB2YWx1ZT1cInRydWVcIiAvPlxyXG48bGFiZWwgY2xhc3M9XCJ3LWFncmVlbWVudFwiIGZvcj1cImFncmVlM1wiXHJcbiAgPjxzcGFuXHJcbiAgICA+0K8g0LTQsNGOINGB0LLQvtC1INGB0L7Qs9C70LDRgdC40LUg0L3QsFxyXG4gICAgPGEgY2xhc3M9XCJ3LWxpbmtcIiBocmVmPVwiXCIgdGFyZ2V0PVwiX2JsYW5rXCI+0L/QtdGA0LXQtNCw0YfRgyDRgdCy0LXQtNC10L3QuNC5INC+0YIg0J/QsNGA0YLQvdGR0YDQsCDQkdCw0L3QutGDPC9hPi48L3NwYW5cclxuICA+PC9sYWJlbFxyXG4+XHJcblxyXG5cclxuPC9kaXY+XHJcbjxidXR0b24gY2xhc3M9XCJ3LXN1Ym1pdCBkaXNhYmxlZFwiPtCe0YLQv9GA0LDQstC40YLRjDwvYnV0dG9uPlxyXG5cclxuPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuY2RuZm9udHMuY29tL2Nzcy9yb2JvdG9cIiByZWw9XCJzdHlsZXNoZWV0XCIgLz5cclxuXHJcbiAgICAgICAgICAgICAgICBcclxuPHN0eWxlPi53LWNvbnRhaW5lciB7XHJcbiR7c3R5bGV9O1xyXG59XHJcblxyXG4udy1jb250YWluZXIgKiB7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICBmb250LWZhbWlseTogJHtmb250RmFtaWx5fTtcclxufVxyXG5cclxuJHtjc3N9XHJcblxyXG48L3N0eWxlPjwvZGl2PlxyXG5gO1xyXG5cclxuICBjb25zdCB3cmFwcGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihjb250YWluZXIpO1xyXG5cclxuICBpZiAoIXdyYXBwZXIpIHtcclxuICAgIGNvbnNvbGUubG9nKFwi0J3QtdGCINC60L7QvdGC0LXQudC90LXRgNCwXCIpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZiAoIXBhcnRuZXJVc2VySWQgfHwgIXBhcnRuZXJDb21wYW55SWQpIHtcclxuICAgIGNvbnNvbGUubG9nKFwi0J3QtSDQv9C10YDQtdC00LDQvdGLINC+0LHRj9C30LDRgtC10LvRjNC90YvQtSDQv9Cw0YDQsNC80LXRgtGA0YtcIik7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIHdyYXBwZXIuaW5uZXJIVE1MID0gaHRtbDtcclxuXHJcbiAgY29uc3Qgd2NvbnRhaW5lcjogSFRNTEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnctY29udGFpbmVyXCIpITtcclxuXHJcbiAgY29uc3Qgd2dyaWQ6IEhUTUxFbGVtZW50ID0gd2NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnctZ3JpZFwiKTtcclxuXHJcbiAgY29uc3QgcGhvbmVJbnB1dDogSFRNTElucHV0RWxlbWVudCA9IHdjb250YWluZXIucXVlcnlTZWxlY3RvcihcIi53LXBob25lXCIpITtcclxuXHJcbiAgY29uc3Qgc2VsZWN0OiBIVE1MU3BhbkVsZW1lbnQgPSB3Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudy1zZWxlY3RlZFwiKSE7XHJcbiAgY29uc3QgZHJvcGRvd246IEhUTUxVTGlzdEVsZW1lbnQgPSB3Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudy1kcm9wZG93blwiKSE7XHJcbiAgLy8gbGV0IHNlbGVjdEFjdGl2ZTogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gIFtcIkRPTUNvbnRlbnRMb2FkZWRcIiwgXCJyZXNpemVcIiwgXCJsb2FkXCJdLmZvckVhY2goKGl0ZW0pID0+XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihpdGVtLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGNvbnN0IHdpZHRoID0gd2NvbnRhaW5lci5vZmZzZXRXaWR0aDtcclxuICAgICAgaWYgKHdpZHRoIDwgNDgwKSB7XHJcbiAgICAgICAgd2dyaWQuc3R5bGVbXCJncmlkLXRlbXBsYXRlLWNvbHVtbnNcIl0gPSBcIjFmclwiO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHdncmlkLnN0eWxlW1wiZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zXCJdID0gXCIxZnIgMWZyXCI7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgKTtcclxuXHJcbiAgcGhvbmVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpO1xyXG4gICAgaWYgKHZhbHVlLmxlbmd0aCA8IDE1KSB7XHJcbiAgICAgIHRoaXMudmFsdWUgPSBuZXcgQXNZb3VUeXBlKCkuaW5wdXQodGhpcy52YWx1ZSk7XHJcbiAgICB9IGVsc2UgdGhpcy52YWx1ZSA9IHZhbHVlLnN1YnN0cmluZygwLCB2YWx1ZS5sZW5ndGggLSAxKTtcclxuXHJcbiAgICBpZiAoIXRoaXMudmFsdWUpIHtcclxuICAgICAgdGhpcy52YWx1ZSA9IFwiK1wiO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAvLyAgIGNvbnNvbGUubG9nKFwic2VsZWN0QWN0aXZlXCIsIHNlbGVjdEFjdGl2ZSk7XHJcbiAgLy8gICBpZiAoc2VsZWN0QWN0aXZlKSB7XHJcbiAgLy8gICAgIGRyb3Bkb3duLmNsYXNzTGlzdC5hZGQoXCJ3LWFjdGl2ZVwiKTtcclxuICAvLyAgICAgc2VsZWN0LmNsYXNzTGlzdC5hZGQoXCJ3LWFjdGl2ZVwiKTtcclxuICAvLyAgIH0gZWxzZSB7XHJcbiAgLy8gICAgIGRyb3Bkb3duLmNsYXNzTGlzdC5yZW1vdmUoXCJ3LWFjdGl2ZVwiKTtcclxuICAvLyAgICAgc2VsZWN0LmNsYXNzTGlzdC5yZW1vdmUoXCJ3LWFjdGl2ZVwiKTtcclxuICAvLyAgIH1cclxuICAvLyAgIHNlbGVjdEFjdGl2ZSA9ICFzZWxlY3RBY3RpdmU7XHJcbiAgLy8gfSk7XHJcblxyXG4gIC8vIGRyb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZTogTW91c2VFdmVudCkge1xyXG4gIC8vICAgY29uc3QgdmFsdWUgPSAoZS50YXJnZXQgYXMgSFRNTFNwYW5FbGVtZW50KS5pbm5lckhUTUw7XHJcbiAgLy8gICBjb25zb2xlLmxvZyhcInZhbHVlXCIsIHZhbHVlKTtcclxuXHJcbiAgLy8gICBzZWxlY3QuaW5uZXJUZXh0ID0gdmFsdWU7XHJcbiAgLy8gICBzZWxlY3RBY3RpdmUgPSAhc2VsZWN0QWN0aXZlO1xyXG4gIC8vICAgZHJvcGRvd24uY2xhc3NMaXN0LnJlbW92ZShcInctYWN0aXZlXCIpO1xyXG4gIC8vICAgc2VsZWN0LmNsYXNzTGlzdC5yZW1vdmUoXCJ3LWFjdGl2ZVwiKTtcclxuICAvLyB9KTtcclxuXHJcbiAgLy8gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlOiBNb3VzZUV2ZW50KSB7XHJcbiAgLy8gICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAvLyAgIGNvbnN0IGNsaWNrQXdheSA9IHRhcmdldCAhPT0gZHJvcGRvd24gJiYgdGFyZ2V0ICE9PSBzZWxlY3Q7XHJcbiAgLy8gICBpZiAoISFzZWxlY3RBY3RpdmUgJiYgY2xpY2tBd2F5KSB7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKFwic2VsZWN0QWN0aXZlXCIsIHNlbGVjdEFjdGl2ZSk7XHJcbiAgLy8gICAgIGNvbnNvbGUubG9nKFwiZmlyZWRcIik7XHJcbiAgLy8gICB9XHJcbiAgLy8gfSk7XHJcblxyXG4gIGNvbnN0IGRpZ2l0c1dpdGhXaGl0ZXNwYWNlID0gL15bMC05XFxiXXxcXHQrJC87XHJcbiAgY29uc3QgZGlnaXRzID0gL15bMC05XFxiXSskLztcclxuICBjb25zdCBlbWFpbCA9IC8uK0AuK1xcLltBLVphLXpdKyQvO1xyXG5cclxuICBjb25zdCBtdWx0aXBsaWVyID0gMWUzO1xyXG5cclxuICBjb25zdCB0ZXJtU2xpZGVyID0gd2NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnctc2xpZGVyLnctdGVybVwiKTtcclxuICAhIXRlcm1TbGlkZXIgJiYgdGVybVNsaWRlci5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgaGFuZGxlVGVybVNsaWRlckNoYW5nZSk7XHJcbiAgY29uc3QgdGVybVNsaWRlckFjdGl2ZVBhcnQ6IEhUTUxFbGVtZW50ID0gd2NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnctdGVybSAudy1zbGlkZXItYWN0aXZlLXBvcnRpb25cIik7XHJcblxyXG4gIGNvbnN0IHRlcm1JbnB1dDogSFRNTElucHV0RWxlbWVudCA9IHdjb250YWluZXIucXVlcnlTZWxlY3RvcihcIi53LWlucHV0LnctdGVybVwiKSE7XHJcbiAgdGVybUlucHV0LnZhbHVlID0gXCIzINC80LXRgdGP0YbQsFwiO1xyXG5cclxuICBjb25zdCBzdW1TbGlkZXI6IEhUTUxJbnB1dEVsZW1lbnQgPSB3Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudy1zbGlkZXIudy1zdW1cIik7XHJcbiAgISFzdW1TbGlkZXIgJiYgc3VtU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBoYW5kbGVTdW1TbGlkZXJDaGFuZ2UpO1xyXG4gIGNvbnN0IHN1bVNsaWRlckFjdGl2ZVBhcnQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB3Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudy1zdW0gLnctc2xpZGVyLWFjdGl2ZS1wb3J0aW9uXCIpO1xyXG5cclxuICBjb25zdCBmaXJzdG5hbWVJbnB1dDogSFRNTElucHV0RWxlbWVudCA9IHdjb250YWluZXIucXVlcnlTZWxlY3RvcihcIi53LTFzdG5hbWVcIikhO1xyXG4gIGNvbnN0IHNlY29uZG5hbWVJbnB1dDogSFRNTElucHV0RWxlbWVudCA9IHdjb250YWluZXIucXVlcnlTZWxlY3RvcihcIi53LTJuZG5hbWVcIikhO1xyXG4gIGNvbnN0IGxhc3RuYW1lSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB3Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudy1sYXN0bmFtZVwiKSE7XHJcbiAgY29uc3QgaW5uSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgPSB3Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIudy1pbm5cIikhO1xyXG4gIGlubklucHV0LnZhbHVlID0gaW5uO1xyXG5cclxuICBjb25zdCBlbWFpbElucHV0OiBIVE1MSW5wdXRFbGVtZW50ID0gd2NvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLnctZW1haWxcIikhO1xyXG5cclxuICBjb25zdCBzdW1JbnB1dDogSFRNTElucHV0RWxlbWVudCA9IHdjb250YWluZXIucXVlcnlTZWxlY3RvcihcIi53LWlucHV0Lnctc3VtXCIpITtcclxuICAhIXN1bUlucHV0ICYmIHN1bUlucHV0LmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCBoYW5kbGVTdW1JbnB1dENoYW5nZSk7XHJcblxyXG4gIFtzdW1JbnB1dCwgZmlyc3RuYW1lSW5wdXQsIHNlY29uZG5hbWVJbnB1dCwgbGFzdG5hbWVJbnB1dCwgaW5uSW5wdXQsIHBob25lSW5wdXQsIGVtYWlsSW5wdXRdLmZvckVhY2goKGl0ZW0pID0+XHJcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBoYW5kbGVGb2N1c0NoYW5nZSlcclxuICApO1xyXG4gIFtzdW1JbnB1dCwgZmlyc3RuYW1lSW5wdXQsIHNlY29uZG5hbWVJbnB1dCwgbGFzdG5hbWVJbnB1dCwgaW5uSW5wdXQsIHBob25lSW5wdXQsIGVtYWlsSW5wdXRdLmZvckVhY2goKGl0ZW0pID0+XHJcbiAgICBpdGVtLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIGhhbmRsZUZvY3VzQ2hhbmdlKVxyXG4gICk7XHJcblxyXG4gIGNvbnN0IHN1Ym1pdEJ0bjogSFRNTElucHV0RWxlbWVudCA9IHdjb250YWluZXIucXVlcnlTZWxlY3RvcihcIi53LXN1Ym1pdFwiKSE7XHJcblxyXG4gIGNvbnN0IGFncmVlbWVudHM6IEFycmF5PEhUTUxJbnB1dEVsZW1lbnQ+ID0gQXJyYXkuZnJvbSh3Y29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudy1jaGVja2JveFwiKSk7XHJcbiAgYWdyZWVtZW50cy5mb3JFYWNoKChlbCkgPT5cclxuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICBjb25zdCBoYXNBZ3JlZWRUb0FsbCA9IGFncmVlbWVudHNbMF0uY2hlY2tlZCAmJiBhZ3JlZW1lbnRzWzFdLmNoZWNrZWQ7XHJcbiAgICAgIGlmICghaGFzQWdyZWVkVG9BbGwpIHtcclxuICAgICAgICBzdWJtaXRCdG4uY2xhc3NMaXN0LmFkZChcImRpc2FibGVkXCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHN1Ym1pdEJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiZGlzYWJsZWRcIik7XHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgKTtcclxuXHJcbiAgc3VibWl0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBoYW5kbGVTdWJtaXQpO1xyXG5cclxuICBzZXRJbnB1dEZpbHRlcldpdGhXaGl0ZXNwYWNlcyhcclxuICAgIHN1bUlucHV0LFxyXG4gICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiAoZGlnaXRzLnRlc3QodmFsdWUucmVwbGFjZUFsbChcIiBcIiwgXCJcIikpICYmIHBhcnNlSW50KHZhbHVlLnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpKSA8IDFlOSkgfHwgIXZhbHVlLmxlbmd0aDtcclxuICAgIH0sXHJcbiAgICBcItCg0LDQt9GA0LXRiNC10L3RiyDRgtC+0LvRjNC60L4g0YfQuNGB0LvQvtCy0YvQtSDRgdC40LzQstC+0LvRiy4g0JLRgNGD0YfQvdGD0Y4g0LzQvtC20L3QviDQstCy0LXRgdGC0Lgg0YHRg9C80LzRgyDQtNC+IDEg0LzQu9GA0LQuXCJcclxuICApO1xyXG5cclxuICBzZXRJbnB1dEZpbHRlcihcclxuICAgIGlubklucHV0LFxyXG4gICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgIHJldHVybiAoZGlnaXRzLnRlc3QodmFsdWUpICYmIHZhbHVlLnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpLmxlbmd0aCA8IDEzKSB8fCAhdmFsdWUubGVuZ3RoO1xyXG4gICAgfSxcclxuICAgIFwi0KDQsNC30YDQtdGI0LXQvdGLINGC0L7Qu9GM0LrQviDRh9C40YHQu9C+0LLRi9C1INGB0LjQvNCy0L7Qu9GLLiDQlNC70LjQvdCwINCY0J3QnSAxMCDQuNC70LggMTIg0YbQuNGE0YAuXCJcclxuICApO1xyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVUZXJtU2xpZGVyQ2hhbmdlKGUpIHtcclxuICAgIGNvbnN0IHZhbHVlID0gZS50YXJnZXQudmFsdWU7XHJcbiAgICBjb25zdCBtaW4gPSBwYXJzZUludChlLnRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtaW5cIikpO1xyXG4gICAgY29uc3QgbWF4ID0gcGFyc2VJbnQoZS50YXJnZXQuZ2V0QXR0cmlidXRlKFwibWF4XCIpKTtcclxuXHJcbiAgICBjb25zdCBzdGVwcyA9IG1heCAtIG1pbjtcclxuXHJcbiAgICBjb25zdCB2YWx1ZVN0ZXAgPSAxO1xyXG4gICAgY29uc3QgcGVyY2VudGFnZVN0ZXAgPSAxMDAgLyBzdGVwcztcclxuXHJcbiAgICBjb25zdCBmcmFjdGlvbiA9IHBlcmNlbnRhZ2VTdGVwICogKCh2YWx1ZSAtIG1pbikgKiB2YWx1ZVN0ZXApO1xyXG5cclxuICAgIGxldCBzdWZmaXggPSBcIlwiO1xyXG4gICAgaWYgKHZhbHVlICUgMTAgPiAxICYmIHZhbHVlICUgMTAgPCA1KSBzdWZmaXggPSBcItCwXCI7XHJcbiAgICBpZiAodmFsdWUgJSAxMCA+PSA1IHx8IHZhbHVlICUgMTAgPT09IDAgfHwgKHZhbHVlID4gMTAgJiYgdmFsdWUgPCAxNSkpIHN1ZmZpeCA9IFwi0LXQslwiO1xyXG4gICAgdGVybUlucHV0LnZhbHVlID0gdmFsdWUgKyBcIiDQvNC10YHRj9GGXCIgKyBzdWZmaXg7XHJcbiAgICB0ZXJtU2xpZGVyQWN0aXZlUGFydC5zdHlsZS53aWR0aCA9IGBjYWxjKCR7ZnJhY3Rpb259JSAtICR7ZnJhY3Rpb24gLyAxMDB9ICogMTRweClgO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gaGFuZGxlU3VtU2xpZGVyQ2hhbmdlKGU6IElucHV0RXZlbnQpIHtcclxuICAgIGNvbnN0IHZhbHVlID0gKGUudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlO1xyXG4gICAgY29uc3Qgc3RlcHMgPVxyXG4gICAgICBwYXJzZUludCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuZ2V0QXR0cmlidXRlKFwibWF4XCIpKSAtIHBhcnNlSW50KChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS5nZXRBdHRyaWJ1dGUoXCJtaW5cIikpO1xyXG5cclxuICAgIGNvbnN0IHZhbHVlU3RlcCA9IChwYXJzZUludCgoZS50YXJnZXQgYXMgSFRNTElucHV0RWxlbWVudCkuZ2V0QXR0cmlidXRlKFwibWF4XCIpKSAtIDEpIC8gc3RlcHM7XHJcblxyXG4gICAgY29uc3QgcGVyY2VudGFnZVN0ZXAgPSAxMDAgLyBzdGVwcztcclxuXHJcbiAgICBjb25zdCBmcmFjdGlvbiA9IHBlcmNlbnRhZ2VTdGVwICogKChwYXJzZUludCh2YWx1ZSkgLSAxKSAqIHZhbHVlU3RlcCk7XHJcblxyXG4gICAgc3VtU2xpZGVyQWN0aXZlUGFydC5zdHlsZS53aWR0aCA9IGBjYWxjKCR7ZnJhY3Rpb259JSAtICR7ZnJhY3Rpb24gLyAxMDB9ICogMTRweClgO1xyXG4gICAgc3VtSW5wdXQudmFsdWUgPSBgJHtudW1iZXJXaXRoU3BhY2VzKHBhcnNlSW50KHZhbHVlKSAqIG11bHRpcGxpZXIpfWA7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBoYW5kbGVTdW1JbnB1dENoYW5nZShlOiBJbnB1dEV2ZW50KSB7XHJcbiAgICBjb25zdCB2YWx1ZSA9IChlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZS5yZXBsYWNlQWxsKFwiIFwiLCBcIlwiKTtcclxuXHJcbiAgICBjb25zdCBzdGVwcyA9IHBhcnNlSW50KHN1bVNsaWRlci5nZXRBdHRyaWJ1dGUoXCJtYXhcIikpIC0gcGFyc2VJbnQoc3VtU2xpZGVyLmdldEF0dHJpYnV0ZShcIm1pblwiKSk7XHJcbiAgICBjb25zdCB2YWx1ZVN0ZXAgPSAocGFyc2VJbnQoc3VtU2xpZGVyLmdldEF0dHJpYnV0ZShcIm1heFwiKSkgLSAxKSAvIHN0ZXBzO1xyXG4gICAgY29uc3QgcGVyY2VudGFnZVN0ZXAgPSAxMDAgLyBzdGVwcztcclxuICAgIGNvbnN0IGZyYWN0aW9uID0gKHBlcmNlbnRhZ2VTdGVwICogKHBhcnNlSW50KHZhbHVlKSAtIDEpICogdmFsdWVTdGVwKSAvIG11bHRpcGxpZXI7XHJcblxyXG4gICAgc3VtU2xpZGVyQWN0aXZlUGFydC5zdHlsZS53aWR0aCA9IGBjYWxjKCR7ZnJhY3Rpb259JSAtICR7ZnJhY3Rpb24gLyAxMDB9ICogMTRweClgO1xyXG5cclxuICAgIGNvbnN0IHNsaWRlclZhbHVlID0gcGFyc2VJbnQodmFsdWUpIC8gbXVsdGlwbGllciArIDE7XHJcblxyXG4gICAgc3VtU2xpZGVyLnZhbHVlID0gYCR7c2xpZGVyVmFsdWV9YDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIGhhbmRsZUZvY3VzQ2hhbmdlKGUpIHtcclxuICAgIGxldCBpc0ZvY3VzZWQgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBlLnRhcmdldDtcclxuXHJcbiAgICBsZXQgcGFyZW50ID0gZS50YXJnZXQucGFyZW50RWxlbWVudDtcclxuXHJcbiAgICBpZiAoIVsuLi5wYXJlbnQuY2xhc3NMaXN0XS5pbmNsdWRlcyhcInctZmllbGQtd3JhcFwiKSkgcGFyZW50ID0gcGFyZW50LnBhcmVudEVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuXHJcbiAgICBpZiAoaXNGb2N1c2VkKSB7XHJcbiAgICAgIHBhcmVudC5jbGFzc0xpc3QuYWRkKFwidy1mb2N1c2VkXCIpO1xyXG4gICAgICBwYXJlbnQucXVlcnlTZWxlY3RvcihcIi53LWZpZWxkLW5hbWVcIikuY2xhc3NMaXN0LmFkZChcInctYWN0aXZlXCIpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcGFyZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJ3LWZvY3VzZWRcIik7XHJcbiAgICAgIGlmICghcGFyZW50LnF1ZXJ5U2VsZWN0b3IoXCIudy1pbnB1dFwiKS52YWx1ZSkge1xyXG4gICAgICAgIHBhcmVudC5xdWVyeVNlbGVjdG9yKFwiLnctZmllbGQtbmFtZVwiKS5jbGFzc0xpc3QucmVtb3ZlKFwidy1hY3RpdmVcIik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc2V0Rm9ybSgpIHtcclxuICAgIHRlcm1JbnB1dC52YWx1ZSA9IFwiMyDQvNC10YHRj9GG0LBcIjtcclxuICAgIHN1bUlucHV0LnZhbHVlID0gXCIxMCAwMDBcIjtcclxuICAgIGZpcnN0bmFtZUlucHV0LnZhbHVlID0gXCJcIjtcclxuICAgIHNlY29uZG5hbWVJbnB1dC52YWx1ZSA9IFwiXCI7XHJcbiAgICBsYXN0bmFtZUlucHV0LnZhbHVlID0gXCJcIjtcclxuICAgIGlubklucHV0LnZhbHVlID0gXCJcIjtcclxuICAgIHBob25lSW5wdXQudmFsdWUgPSBcIitcIjtcclxuICAgIGVtYWlsSW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZnVuY3Rpb24gaGFuZGxlU3VibWl0KCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgaWYgKCFsYXN0bmFtZUlucHV0LnZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0JfQsNC/0L7Qu9C90LjRgtC1INC/0L7Qu9C1INGE0LDQvNC40LvQuNC4XCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghZmlyc3RuYW1lSW5wdXQudmFsdWUpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQl9Cw0L/QvtC70L3QuNGC0LUg0L/QvtC70LUg0LjQvNC10L3QuFwiKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIWlubklucHV0LnZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0JfQsNC/0L7Qu9C90LjRgtC1INC/0L7Qu9C1INCY0J3QnVwiKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAoIXN1bUlucHV0LnZhbHVlKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0JfQsNC/0L7Qu9C90LjRgtC1INC/0L7Qu9C1INGB0YPQvNC80YtcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHBhcnNlSW50KHN1bUlucHV0LnZhbHVlLnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpKSA8IDFlNCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcItCh0YPQvNC80LAg0LTQvtC70LbQvdCwINCx0YvRgtGMINC90LUg0LzQtdC90LXQtSAxMCAwMDAg4oK9XCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHRyaW1tZWRJbm4gPSBpbm5JbnB1dC52YWx1ZS50b1N0cmluZygpLnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpO1xyXG4gICAgICBpZiAoISh0cmltbWVkSW5uLmxlbmd0aCA9PT0gMTAgfHwgdHJpbW1lZElubi5sZW5ndGggPT09IDEyKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcItCY0J3QnSDQtNC+0LvQttC10L0g0YHQvtGB0YLQvtGP0YLRjCDQuNC3IDEwINC40LvQuCAxMiDRhtC40YTRgFwiKTtcclxuICAgICAgfVxyXG4gICAgICBpZiAocGhvbmVJbnB1dC52YWx1ZSA9PT0gXCIrXCIpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQl9Cw0L/QvtC70L3QuNGC0LUg0L/QvtC70LUg0YLQtdC70LXRhNC+0L3QsFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFpc1ZhbGlkUGhvbmVOdW1iZXIocGhvbmVJbnB1dC52YWx1ZSkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCLQndC10LrQvtGA0YDQtdC60YLQvdGL0Lkg0YTQvtGA0LzQsNGCINC90L7QvNC10YDQsCDRgtC10LvQtdGE0L7QvdCwXCIpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICghZW1haWxJbnB1dC52YWx1ZSkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcItCX0LDQv9C+0LvQvdC40YLQtSDQv9C+0LvQtSDRjdC70LXQutGC0YDQvtC90L3QvtC5INC/0L7Rh9GC0YtcIik7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFlbWFpbC50ZXN0KGVtYWlsSW5wdXQudmFsdWUpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwi0J3QtdC60L7RgNGA0LXQutGC0L3Ri9C5INGE0L7RgNC80LDRgiDRjdC70LXQutGC0YDQvtC90L3QvtC5INC/0L7Rh9GC0YtcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHZhbHVlcyA9IHtcclxuICAgICAgICBhZ3JlZW1lbnRzOiB7XHJcbiAgICAgICAgICBia2k6IGZhbHNlLFxyXG4gICAgICAgICAgcGVyc29uYWw6ICEhYWdyZWVtZW50c1swXS5jaGVja2VkLFxyXG4gICAgICAgICAgc2hhcmluZzogISFhZ3JlZW1lbnRzWzFdLmNoZWNrZWQsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBhbW91bnQ6IHBhcnNlSW50KHN1bUlucHV0LnZhbHVlLnJlcGxhY2VBbGwoXCIgXCIsIFwiXCIpKSxcclxuICAgICAgICBlbWFpbDogZW1haWxJbnB1dC52YWx1ZSxcclxuICAgICAgICBpbm46IHRyaW1tZWRJbm4sXHJcbiAgICAgICAgZmlyc3RfbmFtZTogZmlyc3RuYW1lSW5wdXQudmFsdWUsXHJcbiAgICAgICAgc2Vjb25kX25hbWU6IHNlY29uZG5hbWVJbnB1dC52YWx1ZSxcclxuICAgICAgICBsYXN0X25hbWU6IGxhc3RuYW1lSW5wdXQudmFsdWUsXHJcbiAgICAgICAgcGFydG5lcl91c2VyX2lkOiBwYXJ0bmVyVXNlcklkLFxyXG4gICAgICAgIHBhcnRuZXJfY29tcGFueV9pZDogcGFydG5lckNvbXBhbnlJZCxcclxuICAgICAgICBwaG9uZTogcGhvbmVJbnB1dC52YWx1ZS5yZXBsYWNlQWxsKFwiIFwiLCBcIlwiKSxcclxuICAgICAgICBzZXJ2aWNlX2NvZGU6IFwiQ1JFRElUXCIsXHJcbiAgICAgICAgdGVybTogcGFyc2VJbnQodGVybUlucHV0LnZhbHVlKSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGAke2FwaVVybH0vd2lkZ2V0L3JlcXVlc3QvYCwge1xyXG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXHJcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxyXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHZhbHVlcyksXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCkge1xyXG4gICAgICAgIGNvbnN0IGRldGFpbCA9IChhd2FpdCByZXMuanNvbigpKS5kZXRhaWw7XHJcbiAgICAgICAgbGV0IGVycm9yID0gXCJcIjtcclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkZXRhaWwpKSB7XHJcbiAgICAgICAgICBkZXRhaWwuZm9yRWFjaCgoaXRlbSkgPT4gKGVycm9yICs9IGl0ZW0ubXNnICsgXCJcXG5cIikpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBlcnJvciA9IGRldGFpbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlcy5qc29uKCk7XHJcbiAgICAgIGNvbnN0IGJhbmtzID0gZGF0YS5tYXAoKGl0ZW0pID0+IGl0ZW0udG9fY29tcGFueS5uYW1lX2NsZWFyKTtcclxuXHJcbiAgICAgIHJlc2V0Rm9ybSgpO1xyXG4gICAgICBjb25zdCBiYW5rc1VsID0gYmFua3MubWFwKChpdGVtOiBzdHJpbmcpID0+IGA8bGkgY2xhc3M9XCJ3LWJhbmstaXRlbVwiPiR7aXRlbX08L2xpPmApLmpvaW4oXCJcIik7XHJcbiAgICAgIHdyYXBwZXIucXVlcnlTZWxlY3RvcihcclxuICAgICAgICBcIi53LWFncmVlbWVudC13cmFwXCJcclxuICAgICAgKS5pbm5lckhUTUwgPSBgPHA+0JLQsNGI0LAg0LfQsNGP0LLQutCwINC+0YLQv9GA0LDQstC70LXQvdCwINCyOiA8dWw+JHtiYW5rc1VsfTwvdWw+INCSINCx0LvQuNC20LDQudGI0LXQtSDQstGA0LXQvNGPINGBINCy0LDQvNC4INGB0LLRj9C20YPRgtGB0Y8g0LzQtdC90LXQtNC20LXRgNGLINCx0LDQvdC60L7Qsi48L3A+YDtcclxuICAgICAgd3JhcHBlci5xdWVyeVNlbGVjdG9yKFwiLnctc3VibWl0XCIpLm91dGVySFRNTCA9IFwiXCI7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICBhbGVydChlLnJlc3BvbnNlPy5kYXRhPy5tZXNzYWdlID8/IGUubWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==